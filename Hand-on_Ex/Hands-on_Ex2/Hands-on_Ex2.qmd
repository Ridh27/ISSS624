---
title: "Global and Local Measures of Spatial Autocorrelation"
editor: visual
---

# Overview

In this section, we will learn about computation of Global and Local Measures of Spatial Autocorrelation using **spdep** packages. Analysis is performed for detecting clusters and outliers, hot spot or/and cold spot areas.

# Getting Started

## The analytical question

One of the main agenda for local government and planners is to ensure equal distribution of development in the province. Therefore, appropriate statistical methods will be applied to compute whether development are evenly distributed geographically or not. If the answer is **NO,** then next step will be to know "is there sign of spatial clustering?" or if the answer is **YES,** then next step will be to know "where are these clusters?"

In this section, spatial pattern of a selected development indicator (i.e. GDP per capita) of Hunan Provice, People Republic of China will be examined.

## The Study Area Data and Analytical Tools

In this exercise, two data sets will be used, Hunan province administrative boundary layer at county level and Hunan_2012.csv.

Following R packages are installed before starting the analysis: **spdep**, **sf**, **tmap** and **tidyverse.**

```{r}
packages = c('sf', 'spdep', 'tmap', 'tidyverse')
for (p in packages){
  if(!require(p, character.only = T)){
    install.packages(p)
  }
  library(p,character.only = T)
}
```

# Getting the Data into R environment

## Import shapefile into r environment

Importing Hunan shapefile into R environment. The imported shapefile will be **simple features** Object of **sf**.

```{r}
hunan <- st_read(dsn = "data/Geospatial/", 
                 layer = "Hunan")
```

## Importing csv file into R environment

```{r}
hunan2012 <- read_csv("data/aspatial/Hunan_2012.csv")
```

## Performing relational join

Updating the attribute table of *hunan*'s SpatialPolygonsDataFrame with the attribute fields of *hunan2012* dataframe.

```{r}
hunan <- left_join(hunan,hunan2012)
```

## Visualizing Regional Development Indicator

Basemap and Cholorpleth maps are prepared to show the distribution of GDPPC 2012:

```{R}
equal <- tm_shape(hunan) +
  tm_fill("GDPPC",
          n = 5,
          style = "equal") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Equal interval classification")

quantile <- tm_shape(hunan) +
  tm_fill("GDPPC",
          n = 5,
          style = "quantile") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Equal quantile classification")

tmap_arrange(equal, 
             quantile, 
             asp=1, 
             ncol=2)
```

# Global Spatial Autocorrelation

In this section , global spatial autocorrelation statistics is computed and spatial complete randomness test for global spatial autocorrelation is performed.

## Computing Continuity Spatial Weights

Before computing Global spatial autocorrelation, Spatial weights of the study are constructed. Spatial weights are the neighbourhood relationships between the geographical units (i.e. county) in the study area.

Using **poly2nb()** of **spdep** package, Queen contiguity weight matrix is computed:

```{r}
wm_q <- poly2nb(hunan, 
                queen=TRUE)
summary(wm_q)
```

The summary reports shows that in Hunan area there are 88 area units. The most number of neighbors are with 85th area unit and the least number of neighbors are with 30th and 65th area unit.

## Row-standardized weights matrix

In th is section, each neighboring polygon will assigned with equal weights (style="W"). It is done by assigning the fraction 1/(#ofneighbors) to each neighboring county then summing the weighted income values.

One of the **drawback** is that polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data.

```{r}
rswm_q <- nb2listw(wm_q, 
                   style="W", 
                   zero.policy = TRUE)
rswm_q
```

The input of *nb2listw()* must be an object of class **nb**. The syntax of the function has two major arguments, namely style and zero.poly.

-   *style* can take values "W", "B", "C", "U", "minmax" and "S". B is the basic binary coding, W is row standardized (sums over all links to n), C is globally standardized (sums over all links to n), U is equal to C divided by the number of neighbours (sums over all links to unity), while S is the variance-stabilizing coding scheme proposed by Tiefelsdorf et al. 1999, p. 167-168 (sums over all links to n).

-   If *zero policy* is set to TRUE, weights vectors of zero length are inserted for regions without neighbor in the neighbours list. These will in turn generate lag values of zero, equivalent to the sum of products of the zero row t(rep(0, length=length(neighbours))) %\*% x, for arbitrary numerical vector x of length length(neighbours). The spatially lagged value of x for the zero-neighbor region will then be zero, which may (or may not) be a sensible choice.

## Global Spatial Autocorrelation: Moran's I Test

In this section, Moran's I statistics test will be performed using **moran.test()** of **spdep**.

```{R}
moran.test(hunan$GDPPC, 
           listw=rswm_q, 
           zero.policy = TRUE, 
           na.action=na.omit)
```

As p value is very small, smaller than the significant level of 0.05% .Therefore, we will reject the null hypothesis.

### Computing Morte Carlo Moran's I

In this total of 1000 simulations will be performed by using **moran.mc()** of **spdep**

```{r}
set.seed(1234)
bperm= moran.mc(hunan$GDPPC, 
                listw=rswm_q, 
                nsim=999, 
                zero.policy = TRUE, 
                na.action=na.omit)
bperm
```

Also, after 1000 simulations p value is less than significane level of 0.05%. Therefore, we can reject the null hypothesis.

### Visualizing Monte Carlo Moran's I

```{r}
mean(bperm$res[1:999])
```

```{r}
var(bperm$res[1:999])
```

```{r}
summary(bperm$res[1:999])
```

```{R}
hist(bperm$res, 
     freq=TRUE, 
     breaks=20, 
     xlab="Simulated Moran's I")
abline(v=0, 
       col="red") 
```

**Using ggplot()**

```{r}
bperm_df <- bperm[7] #Extracting Only reserve data set

trial <- as.data.frame(bperm_df) #Creating data frame 

ggplot(data=trial, mapping= aes(x=res))+
  geom_histogram(bins=20, color= "Black", fill="orange")+
  labs(title= "Simulated Moran's I", 
       x= "Simulated Moran's I",
       y="Frequency")
```

## Global Spatial Autocorrelation: Geary's

In this section, Geary's c statistics testing will be performed using functions of **spdep** package

```{r}
geary.test(hunan$GDPPC, listw=rswm_q)
```

As c values are less than 1, we can conclude values are dispersed and observations tend to be similar. We reject the null hypothesis as p value is less than the significant value of 0.05%.

### Computing Monte Carlo Geary's C

Permutation test for Geary's C Statistics is performed

```{r}
set.seed(1234)
bperm=geary.mc(hunan$GDPPC, 
               listw=rswm_q, 
               nsim=999)
bperm
```

### Visualizing the Monte Carlo Gearey's C

```{r}
mean(bperm$res[1:999])
```

```{r}
var(bperm$res[1:999])
```

```{r}
summary(bperm$res[1:999])
```

```{r}
hist(bperm$res, freq=TRUE, breaks=20, xlab="Simulated Geary c")
abline(v=1, col="red") 
```

# Spatial Correlogram

Spatial correlogram are great to examine the patterns of spatial autocorrelation in the data or model residual.

They show how correlated are pairs of spatial observations when you increase the distance (lag) between them - they are plots of some index of autocorrelation (Moran's I or Geary's c) against distance.

Although these are not as fundamental as variograms but they provide richer information than variograms. Spatial Correlogram are useful as an exploratory and descriptive tool.

## Compute Moran's I Correlogram

Computation of 6-lag spatial correlogram of GDPPC. The global spatial autocorrelation used in Moran's I. The **plot()** of base Graph is then used to plot the output.

```{R}
MI_corr <- sp.correlogram(wm_q, 
                          hunan$GDPPC, 
                          order=6, 
                          method="I", 
                          style="W")
plot(MI_corr)
```

We should examine full analysis report as plotting the output might now allow us to provide complete interpretation. This is because not all autocorrelation values are statistically significant.

```{r}
print(MI_corr)
```

Out of 6lag spatial correlogram plotting only 1 out of 6 has p value/two sided value greater than significance value.

## Compute Geary's C correlogram and plot

```{r}
GC_corr <- sp.correlogram(wm_q, 
                          hunan$GDPPC, 
                          order=6, 
                          method="C", 
                          style="W")
plot(GC_corr)
```

**Analysis Report:**

```{r}
print(GC_corr)
```

Out of 6 lag spatial correlogram plotting, 3 have p value less than signifiance level of 0.05% and rest are above the significance level.

# Cluster and Outlier Analysis

Local Indicators of Spatial Association or LISA are statistics that evaluate the existence of clusters in the spatial arrangement of a given variable. For instance if we are studying cancer rates among census tracts in a given city local clusters in the rates mean that there are areas that have higher or lower rates than is to be expected by chance alone; that is, the values occurring are above or below those of a random distribution in space.

In this section, clusters or/and outliers are detected from GDP per capita 2012 of Hunan Province, PRC.

## Computing local Moran's I

Computing local Moran's I of *GDPPC2012* at the county level using **localmoran() function in spdep.**

```{R}
fips <- order(hunan$County)
localMI <- localmoran(hunan$GDPPC, rswm_q)
head(localMI)
```

localmoran() function returns a matrix of values whose columns are:

-   Ii: the local Moran's I statistics

-   E.Ii: the expectation of local moran statistic under the randomisation hypothesis

-   Var.Ii: the variance of local moran statistic under the randomisation hypothesis

-   Z.Ii:the standard deviate of local moran statistic

-   Pr(): the p-value of local moran statistic

List the content of the local Moran matrix derived by using [*printCoefmat()*](https://www.rdocumentation.org/packages/stats/versions/3.6.2/topics/printCoefmat).

```{r}
printCoefmat(data.frame(localMI[fips,], row.names=hunan$County[fips]), check.names=FALSE)
```

### Mapping the local Moran's I

Before mapping, append the local Moran's I dataframe (i.e. localMI) onto hunan SpatialPolygonDataFrame:

```{R}
hunan.localMI <- cbind(hunan,localMI) %>%
  rename(Pr.Ii = Pr.z....E.Ii..)
```

### Mapping the local Moran's I values

```{r}
tm_shape(hunan.localMI) +
  tm_fill(col = "Ii", 
          style = "pretty",
          palette = "RdBu",
          title = "local moran statistics") +
  tm_borders(alpha = 0.5)
```

### Mapping local Moran's I p values

As li has both positive and negative values, therefore it is useful to consider p values for each of these values:

```{R}
tm_shape(hunan.localMI) +
  tm_fill(col = "Pr.Ii", 
          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),
          palette="-Blues", 
          title = "local Moran's I p-values") +
  tm_borders(alpha = 0.5)
```

### Mapping both local Moran's I values and p-values

```{r}
localMI.map <- tm_shape(hunan.localMI) +
  tm_fill(col = "Ii", 
          style = "pretty", 
          title = "local moran statistics") +
  tm_borders(alpha = 0.5)

pvalue.map <- tm_shape(hunan.localMI) +
  tm_fill(col = "Pr.Ii", 
          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),
          palette="-Blues", 
          title = "local Moran's I p-values") +
  tm_borders(alpha = 0.5)

tmap_arrange(localMI.map, pvalue.map, asp=1, ncol=2)
```

# Creating a LISA cluster map

It shows the significant locations color coded by type of spatial autocorrelation. The first step before we can generate the LISA cluster map is to plot the Moran scatterplot.

## Plotting Moran Scatterplot

It is the illustration of the relationship between the values of the chosen attributes at each location and the average value of the same attribute at the neighboring location.

```{r}
nci <- moran.plot(hunan$GDPPC, rswm_q,
                  labels=as.character(hunan$County), 
                  xlab="GDPPC 2012", 
                  ylab="Spatially Lag GDPPC 2012")
```

The top right corner belongs to areas that have high GDPPC and are surrounded by other areas that have the average level of GDPPC.

## Plotting Moran scatterplot with standardized variables

First, using [*scale()*](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/scale) to centers and scales the variable. Here centering is done by subtracting the mean (omitting NAs) the corresponding columns, and scaling is done by dividing the (centered) variable by their standard deviations.

The [*as.vector()*](https://www.rdocumentation.org/packages/pbdDMAT/versions/0.5-1/topics/as.vector) added to the end is to make sure that the data type we get out of this is a vector, that map neatly into out dataframe.

```{r}
hunan$Z.GDPPC <- scale(hunan$GDPPC) %>% as.vector 
```

```{r}
nci2 <- moran.plot(hunan$Z.GDPPC, rswm_q,
                   labels=as.character(hunan$County),
                   xlab="z-GDPPC 2012", 
                   ylab="Spatially Lag z-GDPPC 2012")
```

## Preparing LISA map classes

1.  Prepare LISA cluster map

```{R}
quadrant <- vector(mode="numeric",length=nrow(localMI))
```

2.  Centre the variable of interest around the mean

```{r}
DV <- hunan$GDPPC - mean(hunan$GDPPC)     
```

3.  Centering the local Moran's around the mean

```{r}
C_mI <- localMI[,1] - mean(localMI[,1])    
```

4.  Setting a significance level for the local Moran

```{r}
signif <- 0.05       
```

5.  These four command lines define the high-high, low-low, low-high and high-low categories.

```{r}
quadrant[DV >0 & C_mI>0] <- 4      
quadrant[DV <0 & C_mI<0] <- 1      
quadrant[DV <0 & C_mI>0] <- 2
quadrant[DV >0 & C_mI<0] <- 3
```

6.  Placing non significant Moran in the category 0

```{r}
quadrant[localMI[,5]>signif] <- 0
```

Combining all the steps into one single code chunk

```{r}
quadrant <- vector(mode="numeric",length=nrow(localMI))
DV <- hunan$GDPPC - mean(hunan$GDPPC)     
C_mI <- localMI[,1] - mean(localMI[,1])    
signif <- 0.05       
quadrant[DV >0 & C_mI>0] <- 4      
quadrant[DV <0 & C_mI<0] <- 2      
quadrant[DV <0 & C_mI>0] <- 1
quadrant[DV >0 & C_mI<0] <- 3
quadrant[localMI[,5]>signif] <- 0
```

## Plotting LISA map

```{r}
hunan.localMI$quadrant <- quadrant
colors <- c("#ffffff", "#2c7bb6", "#abd9e9", "#fdae61", "#d7191c")
clusters <- c("insignificant", "low-low", "low-high", "high-low", "high-high")

tm_shape(hunan.localMI) +
  tm_fill(col = "quadrant", 
          style = "cat", 
          palette = colors[c(sort(unique(quadrant)))+1], 
          labels = clusters[c(sort(unique(quadrant)))+1],
          popup.vars = c("")) +
  tm_view(set.zoom.limits = c(11,17)) +
  tm_borders(alpha=0.5)
```

For effective interpretation, it is better to plot both the local Moran's I values map and its corresponding p-values map next to each other.

```{R}
gdppc <- qtm(hunan, "GDPPC")

hunan.localMI$quadrant <- quadrant
colors <- c("#ffffff", "#2c7bb6", "#abd9e9", "#fdae61", "#d7191c")
clusters <- c("insignificant", "low-low", "low-high", "high-low", "high-high")

LISAmap <- tm_shape(hunan.localMI) +
  tm_fill(col = "quadrant", 
          style = "cat", 
          palette = colors[c(sort(unique(quadrant)))+1], 
          labels = clusters[c(sort(unique(quadrant)))+1],
          popup.vars = c("")) +
  tm_view(set.zoom.limits = c(11,17)) +
  tm_borders(alpha=0.5)

tmap_arrange(gdppc, LISAmap, asp=1, ncol=2)
```

# Hot spot and Cold spot Area Analysis

Beside detecting cluster and outliers, localised spatial statistics can be also used to detect hot spot and/or cold spot areas.

**"Hot Spot" is used to describe a region or value that is higher relative to its surroundings.**

## Getis and Ord's G-Statistics

It is an alternative spatial statistics to detect spatial anomalies, looking at neighbors within a defined proximity to identify where either high or low values clutser spatially. Statistically significant **hot-spots** are recognised as areas of high values where other areas within a neighbourhood range also share high values too. The analysis consists of three steps:

-   Deriving spatial weight matrix

-   Computing Gi statistics

-   Mapping Gi statistics

## Deriving Distance-based weight matrix

First, defining a new set of neighbors. Whist the spatial autocorrelation considered units which shared borders, for Getis-Ord we are defining neighbours based on distance.

There are two type of distance-based proximity matrix, they are:

-   fixed distance weight matrix; and

-   adaptive distance weight matrix.

### 

Deriving the centroid

Coordinates in separate dataframe is required. The mapping function applies a given function to each element of a vector and returns a vector of the same length. Our input vector will be the geometry column of us.bound. Our function will be *st_centroid()*. We will be using map_dbl variation of map from the purrr package.

Calculation longitude, first value in each centroid:

```{r}
longitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])
```

Then, latitudde is calculated in similar manner, only difference is We access the second value per each centroid with \[\[2\]\]:

```{r}
latitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])
```

Putting longitude and latitude in same object:

```{R}
coords <- cbind(longitude, latitude)
```

### Determine the cut-off distance

Upper limit for the distance is calculated using the following steps:

-   Return a matrix with the indices of points belonging to the set of the k nearest neighbours of each other by using [*knearneigh()*](https://r-spatial.github.io/spdep/reference/knearneigh.html) of **spdep**.

-   Convert the knn object returned by *knearneigh()* into a neighbours list of class nb with a list of integer vectors containing neighbour region number ids by using [*knn2nb()*](https://r-spatial.github.io/spdep/reference/knn2nb.html).

-   Return the length of neighbour relationship edges by using [*nbdists()*](https://r-spatial.github.io/spdep/reference/nbdists.html) of **spdep**. The function returns in the units of the coordinates if the coordinates are projected, in km otherwise.

-   Remove the list structure of the returned object by using [**unlist()**](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/unlist).

```{r}
#coords <- coordinates(hunan)
k1 <- knn2nb(knearneigh(coords))
k1dists <- unlist(nbdists(k1, coords, longlat = TRUE))
summary(k1dists)
```

The summary report shows that the largest first nearest neighbour distance is 61.79 km, so using this as the upper threshold gives certainty that all units will have at least one neighbour.

### Computing fixed distance weight matrix

```{r}
wm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)
wm_d62
```

Convert the nb object into spatial weight object

```{r}
wm62_lw <- nb2listw(wm_d62, style = 'B')
summary(wm62_lw)
```

## Computing adaptive distance weight matrix

More densely settled areas (usually the urban areas) tend to have more neighbours and the less densely settled areas (usually the rural counties) tend to have lesser neighbours.

It is possible to control the numbers of neighbours directly using k-nearest neighbours, either accepting asymmetric neighbours or imposing symmetry:

```{r}
knn <- knn2nb(knearneigh(coords, k=8))
knn
```

Convert the nb object into spatial weight object

```{r}
knn_lw <- nb2listw(knn, style = 'B')
summary(knn_lw)
```

# Computing Gi statistics

## Gi statistics using fixed distance

```{R}
fips <- order(hunan$County)
gi.fixed <- localG(hunan$GDPPC, wm62_lw)
gi.fixed
```

The output of localG() is a vector of G or Gstar values, with attributes "gstari" set to TRUE or FALSE, "call" set to the function call, and class "localG".

The Gi statistics is represented as a Z-score. Greater values represent a greater intensity of clustering and the direction (positive or negative) indicates high or low clusters.

Joining the Gi values to their corresponding hunan sf data frame:

```{r}
hunan.gi <- cbind(hunan, as.matrix(gi.fixed)) %>%
  rename(gstat_fixed = as.matrix.gi.fixed.)
```

Following steps are followed in the above code chunk:

-   First, it convert the output vector (i.e. gi.fixed) into r matrix object by using as.matrix()

-   . Next, cbind() is used to join hunan\@data and gi.fixed matrix to produce a new SpatialPolygonDataFrame called hunan.gi.

-   Lastly, the field name of the gi values is renamed to gstat_fixed by using rename().

## Mapping Gi values with fixed distance weights

```{r}
gdppc <- qtm(hunan, "GDPPC")

Gimap <-tm_shape(hunan.gi) +
  tm_fill(col = "gstat_fixed", 
          style = "pretty",
          palette="-RdBu",
          title = "local Gi") +
  tm_borders(alpha = 0.5)

tmap_arrange(gdppc, Gimap, asp=1, ncol=2)

```

## Mapping Gi values with adaptive distance weights

```{r}
gdppc<- qtm(hunan, "GDPPC")

Gimap <- tm_shape(hunan.gi) + 
  tm_fill(col = "gstat_fixed", 
          style = "pretty", 
          palette="-RdBu", 
          title = "local Gi") + 
  tm_borders(alpha = 0.5)

tmap_arrange(gdppc, 
             Gimap, 
             asp=1, 
             ncol=2)
```
