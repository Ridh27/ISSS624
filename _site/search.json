[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "This website is created by a full time Masters of IT in Business Analytics student,Ridhima Bansal.\nShe is learning to build this website under the guidance of her Geospatial Analytics professor, Prof KAM Tin Seong.\nIn this website, geospatial analytics will be explained in detail over 5 weeks.\nContact details:\nLinkedIn: https://www.linkedin.com/in/ridhima-bansal-a28aa783/\nEmail: Ridhimab.2022@mitb.smu.edu.sg\nGitHub Username: Ridh27"
  },
  {
    "objectID": "Hand-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html",
    "href": "Hand-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html",
    "title": "Hand On Exercise 1",
    "section": "",
    "text": "In this hands-on exercise, I learn how to import and wrangle geospatial data using appropriate R packages.\n\n\n\nThe code chunk below install and load sf and tidyverse packages into R environment.\n\npacman::p_load(sf,tidyverse)\n\n\n\n\n\n\nmpsz= st_read(dsn= \"data/geospatial/\", layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\Ridh27\\ISSS624\\Hand-on_Ex\\Hands-on_Ex1\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\ncyclingpath = st_read(dsn = \"data/geospatial/\", \n                         layer = \"CyclingPath\")\n\nReading layer `CyclingPath' from data source \n  `C:\\Ridh27\\ISSS624\\Hand-on_Ex\\Hands-on_Ex1\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 1625 features and 2 fields\nGeometry type: LINESTRING\nDimension:     XY\nBounding box:  xmin: 12711.19 ymin: 28711.33 xmax: 42626.09 ymax: 48948.15\nProjected CRS: SVY21\n\n\n\n\n\n\npreschool = st_read(\"data/geospatial/pre-schools-location-kml.kml\")\n\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `C:\\Ridh27\\ISSS624\\Hand-on_Ex\\Hands-on_Ex1\\data\\geospatial\\pre-schools-location-kml.kml' \n  using driver `KML'\nSimple feature collection with 1359 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6824 ymin: 1.248403 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\n\n\n\n\nRetrieve information related to the content of a simple feature data frame.\n\n\n\nst_geometry(mpsz)\n\nGeometry set for 323 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 5 geometries:\n\n\nMULTIPOLYGON (((31495.56 30140.01, 31980.96 296...\n\n\nMULTIPOLYGON (((29092.28 30021.89, 29119.64 300...\n\n\nMULTIPOLYGON (((29932.33 29879.12, 29947.32 298...\n\n\nMULTIPOLYGON (((27131.28 30059.73, 27088.33 297...\n\n\nMULTIPOLYGON (((26451.03 30396.46, 26440.47 303...\n\n\n\n\n\n\nglimpse(mpsz)\n\nRows: 323\nColumns: 16\n$ OBJECTID   <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, …\n$ SUBZONE_NO <int> 1, 1, 3, 8, 3, 7, 9, 2, 13, 7, 12, 6, 1, 5, 1, 1, 3, 2, 2, …\n$ SUBZONE_N  <chr> \"MARINA SOUTH\", \"PEARL'S HILL\", \"BOAT QUAY\", \"HENDERSON HIL…\n$ SUBZONE_C  <chr> \"MSSZ01\", \"OTSZ01\", \"SRSZ03\", \"BMSZ08\", \"BMSZ03\", \"BMSZ07\",…\n$ CA_IND     <chr> \"Y\", \"Y\", \"Y\", \"N\", \"N\", \"N\", \"N\", \"Y\", \"N\", \"N\", \"N\", \"N\",…\n$ PLN_AREA_N <chr> \"MARINA SOUTH\", \"OUTRAM\", \"SINGAPORE RIVER\", \"BUKIT MERAH\",…\n$ PLN_AREA_C <chr> \"MS\", \"OT\", \"SR\", \"BM\", \"BM\", \"BM\", \"BM\", \"SR\", \"QT\", \"QT\",…\n$ REGION_N   <chr> \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENT…\n$ REGION_C   <chr> \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\",…\n$ INC_CRC    <chr> \"5ED7EB253F99252E\", \"8C7149B9EB32EEFC\", \"C35FEFF02B13E0E5\",…\n$ FMEL_UPD_D <date> 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05…\n$ X_ADDR     <dbl> 31595.84, 28679.06, 29654.96, 26782.83, 26201.96, 25358.82,…\n$ Y_ADDR     <dbl> 29220.19, 29782.05, 29974.66, 29933.77, 30005.70, 29991.38,…\n$ SHAPE_Leng <dbl> 5267.381, 3506.107, 1740.926, 3313.625, 2825.594, 4428.913,…\n$ SHAPE_Area <dbl> 1630379.27, 559816.25, 160807.50, 595428.89, 387429.44, 103…\n$ geometry   <MULTIPOLYGON [m]> MULTIPOLYGON (((31495.56 30..., MULTIPOLYGON (…\n\n\n\n\n\n\nhead(mpsz, n=5)  \n\nSimple feature collection with 5 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 25867.68 ymin: 28369.47 xmax: 32362.39 ymax: 30435.54\nProjected CRS: SVY21\n  OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1        1          1   MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2        2          1   PEARL'S HILL    OTSZ01      Y          OUTRAM\n3        3          3      BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4        4          8 HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5        5          3        REDHILL    BMSZ03      N     BUKIT MERAH\n  PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1         MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2         OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3         SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4         BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5         BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n    Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1 29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2 29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3 29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4 29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5 30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n\n\n\n\n\n\nIn this section, we will cover interesting visual of geospatial features.\n\n\n\nplot(mpsz)\n\nWarning: plotting the first 9 out of 15 attributes; use max.plot = 15 to plot\nall\n\n\n\n\n\n\n\n\n\nplot(st_geometry(mpsz))\n\n\n\n\n\n\n\n\nplot(mpsz[\"PLN_AREA_N\"])\n\n\n\n\n\n\n\n\nMap projections is important property of geospatial data. We must ensure both geospatial data should be in similar coordinate system.\nProject Transformation: Project a simple feature data frame from one coordinate system to another coordinate system.\n\n\n\nst_crs(mpsz)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\nWe can observe, mpsz data frame is projected in svy21 but when we read until the end of the print, it indicates that the EPSG is 9001. This is a wrong EPSG code because the correct EPSG code for svy21 should be [3414].\nIn order to assign the correct EPSG code to mpsz data frame:\n\nmpsz3414 <- st_set_crs(mpsz, 3414)\n\nWarning: st_crs<- : replacing crs does not reproject data; use st_transform for\nthat\n\nst_crs(mpsz3414)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\nNow the error has been rectified.\n\n\n\nTransform the original data from geographic coordinate system to projected coordinate system\nTransforming preschool data from one coordinate system to another:\n\nst_geometry(preschool) ##Original WGS84\n\nGeometry set for 1359 features \nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6824 ymin: 1.248403 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\nFirst 5 geometries:\n\n\nPOINT Z (103.7614 1.308683 0)\n\n\nPOINT Z (103.7536 1.315748 0)\n\n\nPOINT Z (103.7645 1.305078 0)\n\n\nPOINT Z (103.765 1.305239 0)\n\n\nPOINT Z (103.7597 1.315983 0)\n\npreschool3414 <- st_transform(preschool, \n                              crs = 3414)\nst_geometry(preschool3414) #Transformed SVY21\n\nGeometry set for 1359 features \nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 11203.01 ymin: 25667.6 xmax: 45404.24 ymax: 49300.88\nz_range:       zmin: 0 zmax: 0\nProjected CRS: SVY21 / Singapore TM\nFirst 5 geometries:\n\n\nPOINT Z (19997.26 32333.17 0)\n\n\nPOINT Z (19126.75 33114.35 0)\n\n\nPOINT Z (20345.12 31934.56 0)\n\n\nPOINT Z (20400.31 31952.36 0)\n\n\nPOINT Z (19810.78 33140.31 0)\n\n\n\n\n\n\nIn this section, we will learn, how to import an aspatial data into R environment and save it as a tibble data frame.\n\n\n##We will assume that the data is in wgs84 Geographic Coordinate System.\n\nlistings <- read_csv(\"data/aspatial/listings.csv\")\n\nRows: 4252 Columns: 16\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (5): name, host_name, neighbourhood_group, neighbourhood, room_type\ndbl  (10): id, host_id, latitude, longitude, price, minimum_nights, number_o...\ndate  (1): last_review\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nlist(listings) \n\n[[1]]\n# A tibble: 4,252 × 16\n       id name     host_id host_…¹ neigh…² neigh…³ latit…⁴ longi…⁵ room_…⁶ price\n    <dbl> <chr>      <dbl> <chr>   <chr>   <chr>     <dbl>   <dbl> <chr>   <dbl>\n 1  50646 Pleasan…  227796 Sujatha Centra… Bukit …    1.33    104. Privat…    80\n 2  71609 Ensuite…  367042 Belinda East R… Tampin…    1.35    104. Privat…   178\n 3  71896 B&B  Ro…  367042 Belinda East R… Tampin…    1.35    104. Privat…    81\n 4  71903 Room 2-…  367042 Belinda East R… Tampin…    1.35    104. Privat…    81\n 5 275343 Conveni… 1439258 Joyce   Centra… Bukit …    1.29    104. Privat…    52\n 6 275344 15 mins… 1439258 Joyce   Centra… Bukit …    1.29    104. Privat…    40\n 7 294281 5 mins … 1521514 Elizab… Centra… Newton     1.31    104. Privat…    72\n 8 301247 Nice ro… 1552002 Rahul   Centra… Geylang    1.32    104. Privat…    41\n 9 324945 20 Mins… 1439258 Joyce   Centra… Bukit …    1.29    104. Privat…    49\n10 330089 Accomo@… 1439258 Joyce   Centra… Bukit …    1.29    104. Privat…    49\n# … with 4,242 more rows, 6 more variables: minimum_nights <dbl>,\n#   number_of_reviews <dbl>, last_review <date>, reviews_per_month <dbl>,\n#   calculated_host_listings_count <dbl>, availability_365 <dbl>, and\n#   abbreviated variable names ¹​host_name, ²​neighbourhood_group,\n#   ³​neighbourhood, ⁴​latitude, ⁵​longitude, ⁶​room_type\n\n\n\n\n\n\nlistings_sf <- st_as_sf(listings, \n                       coords = c(\"longitude\", \"latitude\"),\n                       crs=4326) %>%\n  st_transform(crs = 3414)\nglimpse(listings_sf)\n\nRows: 4,252\nColumns: 15\n$ id                             <dbl> 50646, 71609, 71896, 71903, 275343, 275…\n$ name                           <chr> \"Pleasant Room along Bukit Timah\", \"Ens…\n$ host_id                        <dbl> 227796, 367042, 367042, 367042, 1439258…\n$ host_name                      <chr> \"Sujatha\", \"Belinda\", \"Belinda\", \"Belin…\n$ neighbourhood_group            <chr> \"Central Region\", \"East Region\", \"East …\n$ neighbourhood                  <chr> \"Bukit Timah\", \"Tampines\", \"Tampines\", …\n$ room_type                      <chr> \"Private room\", \"Private room\", \"Privat…\n$ price                          <dbl> 80, 178, 81, 81, 52, 40, 72, 41, 49, 49…\n$ minimum_nights                 <dbl> 90, 90, 90, 90, 14, 14, 90, 8, 14, 14, …\n$ number_of_reviews              <dbl> 18, 20, 24, 48, 20, 13, 133, 105, 14, 1…\n$ last_review                    <date> 2014-07-08, 2019-12-28, 2014-12-10, 20…\n$ reviews_per_month              <dbl> 0.22, 0.28, 0.33, 0.67, 0.20, 0.16, 1.2…\n$ calculated_host_listings_count <dbl> 1, 4, 4, 4, 50, 50, 7, 1, 50, 50, 50, 4…\n$ availability_365               <dbl> 365, 365, 365, 365, 353, 364, 365, 90, …\n$ geometry                       <POINT [m]> POINT (22646.02 35167.9), POINT (…\n\n\nNew column called geometry has been added into the data frame. On the other hand, the longitude and latitude columns have been dropped from the data frame.\n\n\n\n\nApart from handling functions, sf package also offers a wide range of geoprocessing (also known as GIS analysis) functions.\n\n\n\n\n\nThe scenario:\nThe authority is planning to upgrade the exiting cycling path. To do so, they need to acquire 5 metres of reserved land on the both sides of the current cycling path. You are tasked to determine the extend of the land need to be acquired and their total area.\nThe solution:\nFirst, 5-meter buffers around cycling paths are computed.\n\nbuffer_cycling <- st_buffer(cyclingpath, \n                               dist=5, nQuadSegs = 30)\n\nSecond, calculate the area of the buffer:\n\nbuffer_cycling$AREA <- st_area(buffer_cycling)\n\nThirdly, total land involved is calculated:\n\nsum(buffer_cycling$AREA)\n\n773143.9 [m^2]\n\n\nSuccessful!\n\n\n\nThe scenario:\nA pre-school service group want to find out the numbers of pre-schools in each Planning Subzone.\nThe solution:\nFirstly, using st_intersects(), pre school located at each Planning Subzone is identified.\nSecondly, using length(),numbers of pre-schools that fall inside each planning subzone is calculated.\n\nmpsz3414$`PreSch Count`<- lengths(st_intersects(mpsz3414, preschool3414))\n\nSummary statistics:\n\nsummary(mpsz3414$`PreSch Count`)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  0.000   0.000   2.000   4.207   6.000  37.000 \n\n\nTo list the planning subzone with the most number of pre-school:\n\ntop_n(mpsz3414, 1, `PreSch Count`)\n\nSimple feature collection with 1 feature and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 23449.05 ymin: 46001.23 xmax: 25594.22 ymax: 47996.47\nProjected CRS: SVY21 / Singapore TM\n  OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND PLN_AREA_N PLN_AREA_C\n1      290          3 WOODLANDS EAST    WDSZ03      N  WOODLANDS         WD\n      REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR   Y_ADDR\n1 NORTH REGION       NR C90769E43EE6B0F2 2014-12-05 24506.64 46991.63\n  SHAPE_Leng SHAPE_Area                       geometry PreSch Count\n1   6603.608    2553464 MULTIPOLYGON (((24786.75 46...           37\n\n\nQues:Calculate the density of pre-school by planning subzone. Solution:\nTo derive the area of each planning subzone:\n\nmpsz3414$Area <- mpsz3414 %>%\n  st_area()\n\nCompute the density :\n\nmpsz3414 <- mpsz3414 %>%\n  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)\n\n\n\n\n\nIn this section, wewill learn how to use appropriate ggplot2 functions to create functional and yet truthful statistical graphs for EDA purposes.\n\nHISTOGRAM\n\n\n  hist(mpsz3414$`PreSch Density`)\n\n\n\n\nUSING ggplot2\n\nggplot(data=mpsz3414, \n       aes(x= as.numeric(`PreSch Density`)))+\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  labs(title = \"Are pre-school even distributed in Singapore?\",\n       subtitle= \"There are many planning sub-zones with a single pre-school, on the other hand, \\nthere are two planning sub-zones with at least 20 pre-schools\",\n      x = \"Pre-school density (per km sq)\",\n      y = \"Frequency\")\n\n\n\n\nSCATTER PLOT\nRelationship between Pre-school Density and Pre-school Count:\n\nggplot(data=mpsz3414,aes(x= as.numeric(`PreSch Density`), y=as.numeric(`PreSch Count`)))+\n        geom_point()+labs(x= \"Pre-Scool density(per km sq)\",y=\"Pre-school Count\")"
  },
  {
    "objectID": "Hand-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#overview-1",
    "href": "Hand-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#overview-1",
    "title": "Hand On Exercise 1",
    "section": "Overview",
    "text": "Overview\nIn this section, by choropleth mapping we will symbolize enumeration units, such as countries, provinces, states, counties or census units, using area patterns or graduated colors.\nIn this section, we will use R package called **tmap** package.\n\npacman::p_load(sf, tmap, tidyverse)\n\n\nImporting Geospatial data into R\n\n\n\n\nmpsz <- st_read(dsn = \"data/geospatial/\", \n                layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\Ridh27\\ISSS624\\Hand-on_Ex\\Hands-on_Ex1\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nExamine:\n\nmpsz\n\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 10 features:\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1         1          1    MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2         2          1    PEARL'S HILL    OTSZ01      Y          OUTRAM\n3         3          3       BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4         4          8  HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5         5          3         REDHILL    BMSZ03      N     BUKIT MERAH\n6         6          7  ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n7         7          9   BUKIT HO SWEE    BMSZ09      N     BUKIT MERAH\n8         8          2     CLARKE QUAY    SRSZ02      Y SINGAPORE RIVER\n9         9         13 PASIR PANJANG 1    QTSZ13      N      QUEENSTOWN\n10       10          7       QUEENSWAY    QTSZ07      N      QUEENSTOWN\n   PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1          MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2          OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3          SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4          BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5          BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6          BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n7          BM CENTRAL REGION       CR 7839A8577144EFE2 2014-12-05 27680.06\n8          SR CENTRAL REGION       CR 48661DC0FBA09F7A 2014-12-05 29253.21\n9          QT CENTRAL REGION       CR 1F721290C421BFAB 2014-12-05 22077.34\n10         QT CENTRAL REGION       CR 3580D2AFFBEE914C 2014-12-05 24168.31\n     Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1  29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2  29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3  29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4  29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5  30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n6  29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...\n7  30230.86   3275.312   551732.0 MULTIPOLYGON (((27746.95 30...\n8  30222.86   2208.619   290184.7 MULTIPOLYGON (((29351.26 29...\n9  29893.78   6571.323  1084792.3 MULTIPOLYGON (((20996.49 30...\n10 30104.18   3454.239   631644.3 MULTIPOLYGON (((24472.11 29...\n\n\n\n\nImporting Attribute Data into R\n\npopdata <- read_csv(\"data/aspatial/respopagesextod2011to2020.csv\")\n\nRows: 984656 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): PA, SZ, AG, Sex, TOD\ndbl (2): Pop, Time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nNumber of Rows: 984656, Number of Cols: 7\n\n\nData Preparation\nThe data table should include the variables PA, SZ, YOUNG, ECONOMY ACTIVE, AGED, TOTAL, DEPENDENCY.\n\nYOUNG: age group 0 to 4 until age groyup 20 to 24,\nECONOMY ACTIVE: age group 25-29 until age group 60-64,\nAGED: age group 65 and above,\nTOTAL: all age group, and\nDEPENDENCY: the ratio between young and aged against economy active group\n\n\nData Wrangling\nThe following data wrangling and transformation functions will be used:\n\npivot_wider() of tidyr package, and\nmutate(), filter(), group_by() and select() of dplyr package\n\n\npopdata2020 <- popdata %>%\n  filter(Time == 2020) %>%\n  group_by(PA, SZ, AG) %>%\n  summarise(`POP` = sum(`Pop`)) %>%\n  ungroup()%>%\n  pivot_wider(names_from=AG, \n              values_from=POP) %>%\n  mutate(YOUNG = rowSums(.[3:6])\n         +rowSums(.[12])) %>%\nmutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+\nrowSums(.[13:15]))%>%\nmutate(`AGED`=rowSums(.[16:21])) %>%\nmutate(`TOTAL`=rowSums(.[3:21])) %>%  \nmutate(`DEPENDENCY` = (`YOUNG` + `AGED`)\n/`ECONOMY ACTIVE`) %>%\n  select(`PA`, `SZ`, `YOUNG`, \n       `ECONOMY ACTIVE`, `AGED`, \n       `TOTAL`, `DEPENDENCY`)\n\n`summarise()` has grouped output by 'PA', 'SZ'. You can override using the\n`.groups` argument.\n\n\n\n\nJoining the attribute data and geospatial data\nIn this we will convert the values of PA and SZ fields to uppercase as SUBZONE_N and PLN_AREA_N are in uppercase.\n\npopdata2020 <- popdata2020 %>%\n  mutate_at(.vars = vars(PA, SZ), \n          .funs = funs(toupper)) %>%\n  filter(`ECONOMY ACTIVE` > 0)\n\nWarning: `funs()` was deprecated in dplyr 0.8.0.\nPlease use a list of either functions or lambdas: \n\n  # Simple named list: \n  list(mean = mean, median = median)\n\n  # Auto named with `tibble::lst()`: \n  tibble::lst(mean, median)\n\n  # Using lambdas\n  list(~ mean(., trim = .2), ~ median(., na.rm = TRUE))\nThis warning is displayed once every 8 hours.\nCall `lifecycle::last_lifecycle_warnings()` to see where this warning was generated.\n\n\nJoin the geographical data and attribute table using planning subzone name e.g. SUBZONE_N and SZ as the common identifier.\n\nmpsz_pop2020 <- left_join(mpsz, popdata2020,\n                          by = c(\"SUBZONE_N\" = \"SZ\"))\n\n\nwrite_rds(mpsz_pop2020, \"data/rds/mpszpop2020.rds\")\n\n\n\n\nChoropleth Mapping Geospatial Data Using tmap\nTwo approaches can be used to prepare thematic map using tmap, they are:\n\nPlotting a thematic map quickly by using qtm().\nPlotting highly customisable thematic map by using tmap elements.\n\n\nPlotting a choropleth map quickly by using qtm()\nThe quick way:\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\nqtm(mpsz_pop2020, \n    fill = \"DEPENDENCY\")\n\n\n\n\n\n\nCreating a choropleth map by using tmap’s elements\nAbove method is quick but there is a disadvantage of qtm() as it makes aesthetics of individual layers harder to control.\nTo draw a a high quality cartographic choropleth map :\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"Dependency ratio\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\n\nDrawing a base map\ntm_shape() is used to define the input data (i.e mpsz_pop2020) tm_polygons() is used to draw the planning subzone polygons\n\ntm_shape(mpsz_pop2020) +\n  tm_polygons()\n\n\n\n\n\n\nDrawing a choropleth map using tm_polygons()\nIn this, geographical distribution of a selected variable by planning subzone is shown. We just need to assign the target varibale.\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\")\n\n\n\n\nBy default,\n1. color scheme used is YlOrRd of ColorBrewer\n2. missing values will be shaded grey.\n\n\nDrawing a choropleth map using tm_fill() and *tm_border()**\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\")\n\n\n\n\nTo add boundary of the planning subzones:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\") +\n  tm_borders(lwd = 0.1,  alpha = 1)\n\n\n\n\nThe alpha argument is used to define transparency number between 0 (totally transparent) and 1 (not transparent). By default, the alpha value of the col is used (normally 1).\nBeside alpha argument, there are three other arguments for tm_borders(), they are:\n\ncol = border colour,\nlwd = border line width. The default is 1, and\nlty = border line type. The default is “solid”.\n\n\n\n\nData classification methods of tmap\nThe point of classification is to take a large number of observations and group them into data ranges or classes.\ntmap provides a total ten data classification methods, namely: fixed, sd, equal, pretty (default), quantile, kmeans, hclust, bclust, fisher, and jenks.\nTo define a data classification method, the style argument of tm_fill() or tm_polygons() will be used.\n\nPlotting choropleth maps with built-in classification methods\n5 classes:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"jenks\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n2 classes:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 2,\n          style = \"jenks\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n20 classes:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 20,\n          style = \"jenks\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nEqual data classification method:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\nPlotting choropleth map with custome break\nTo avoid defaults, the breakpoints can be set explicitly by means of the breaks argument to the tm_fill().\nNOTE: In tmap the breaks include a minimum and maximum.\nIn order to end up with n categories, n+1 elements must be specified in the breaks option (the values must be in increasing order).\n\nsummary(mpsz_pop2020$DEPENDENCY)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.0000  0.6519  0.7025  0.7742  0.7645 19.0000      92 \n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) +\n  tm_borders(alpha = 0.5)\n\nWarning: Values have found that are higher than the highest break\n\n\n\n\n\n\n\n\nColor Scheme\ntmap supports colour ramps either defined by the user or a set of predefined colour ramps from the RColorBrewer package.\n\nUsing ColourBrewer palette\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"quantile\",\n          palette = \"Blues\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nNotice that the choropleth map is shaded in green.\nTo reverse the colour shading, add a “-” prefix.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\nMap Layouts\nIt is a combination of all map elements into a cohesive map. Map elements include among others the objects to be mapped, the title, the scale bar, the compass, margins and aspects ratios.\n\nMap Legend\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"jenks\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone \\n(Jenks classification)\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            legend.outside = FALSE,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\nMap Style\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"classic\")\n\ntmap style set to \"classic\"\n\n\nother available styles are: \"white\", \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"watercolor\" \n\n\n\n\n\n\n\nCartographic Furniture\nIn this various map furniture such as compass, scale bar and grid lines are inserted.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"No. of persons\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio \\nby planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar(width = 0.15) +\n  tm_grid(lwd = 0.1, alpha = 0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\nTo reset to the default style,\n\ntmap_style(\"white\")\n\ntmap style set to \"white\"\n\n\nother available styles are: \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"classic\", \"watercolor\" \n\n\n\n\n\nDrawing Small Multiple Choropleth Maps\nSmall multiple maps, also referred to as facet maps, are composed of many maps arrange side-by-side, and sometimes stacked vertically.\nIn tmap, small multiple maps can be plotted in three ways:\n\nby assigning multiple values to at least one of the asthetic arguments,\nby defining a group-by variable in tm_facets(), and\nby creating multiple stand-alone maps with tmap_arrange().\n\n\nBy assigning multiple values to at least one of the aesthetic arguments\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(c(\"YOUNG\", \"AGED\"),\n          style = \"equal\", \n          palette = \"Blues\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\")) +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"white\")\n\ntmap style set to \"white\"\n\n\nother available styles are: \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"classic\", \"watercolor\" \n\n\n\n\n\nMultiple values are assigned to least one of the aesthetic arguments:\n\ntm_shape(mpsz_pop2020)+ \n  tm_polygons(c(\"DEPENDENCY\",\"AGED\"),\n          style = c(\"equal\", \"quantile\"), \n          palette = list(\"Blues\",\"Greens\")) +\n  tm_layout(legend.position = c(\"right\", \"bottom\"))\n\n\n\n\n\n\ny defining a group-by variable in tm_facets()\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          thres.poly = 0) + \n  tm_facets(by=\"REGION_N\", \n            free.coords=TRUE, \n            drop.shapes=TRUE) +\n  tm_layout(legend.show = FALSE,\n            title.position = c(\"center\", \"center\"), \n            title.size = 20) +\n  tm_borders(alpha = 0.5)\n\nWarning: The argument drop.shapes has been renamed to drop.units, and is\ntherefore deprecated\n\n\n\n\n\n\n\nBy creating multiple stand-alone maps with tmap_arrange()\n\nyoungmap <- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"YOUNG\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\nagedmap <- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"AGED\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\ntmap_arrange(youngmap, agedmap, asp=1, ncol=2)\n\n\n\n\n\n\nMappping Spatial Object Meeting a Selection Criterion\n\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N==\"CENTRAL REGION\", ])+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(legend.outside = TRUE,\n            legend.height = 0.45, \n            legend.width = 5.0,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\nWarning in pre_process_gt(x, interactive = interactive, orig_crs =\ngm$shape.orig_crs): legend.width controls the width of the legend within a map.\nPlease use legend.outside.size to control the width of the outside legend"
  },
  {
    "objectID": "Hand-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html",
    "href": "Hand-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html",
    "title": "Global and Local Measures of Spatial Autocorrelation",
    "section": "",
    "text": "In this section, we will learn about computation of Global and Local Measures of Spatial Autocorrelation using spdep packages. Analysis is performed for detecting clusters and outliers, hot spot or/and cold spot areas."
  },
  {
    "objectID": "Hand-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#the-analytical-question",
    "href": "Hand-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#the-analytical-question",
    "title": "Global and Local Measures of Spatial Autocorrelation",
    "section": "The analytical question",
    "text": "The analytical question\nOne of the main agenda for local government and planners is to ensure equal distribution of development in the province. Therefore, appropriate statistical methods will be applied to compute whether development are evenly distributed geographically or not. If the answer is NO, then next step will be to know “is there sign of spatial clustering?” or if the answer is YES, then next step will be to know “where are these clusters?”\nIn this section, spatial pattern of a selected development indicator (i.e. GDP per capita) of Hunan Provice, People Republic of China will be examined."
  },
  {
    "objectID": "Hand-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#the-study-area-data-and-analytical-tools",
    "href": "Hand-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#the-study-area-data-and-analytical-tools",
    "title": "Global and Local Measures of Spatial Autocorrelation",
    "section": "The Study Area Data and Analytical Tools",
    "text": "The Study Area Data and Analytical Tools\nIn this exercise, two data sets will be used, Hunan province administrative boundary layer at county level and Hunan_2012.csv.\nFollowing R packages are installed before starting the analysis: spdep, sf, tmap and tidyverse.\n\npackages = c('sf', 'spdep', 'tmap', 'tidyverse')\nfor (p in packages){\n  if(!require(p, character.only = T)){\n    install.packages(p)\n  }\n  library(p,character.only = T)\n}\n\nLoading required package: sf\n\n\nLinking to GEOS 3.9.1, GDAL 3.4.3, PROJ 7.2.1; sf_use_s2() is TRUE\n\n\nLoading required package: spdep\n\n\nLoading required package: sp\n\n\nLoading required package: spData\n\n\nTo access larger datasets in this package, install the spDataLarge\npackage with: `install.packages('spDataLarge',\nrepos='https://nowosad.github.io/drat/', type='source')`\n\n\nLoading required package: tmap\n\n\nLoading required package: tidyverse\n\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.3.6      ✔ purrr   0.3.4 \n✔ tibble  3.1.8      ✔ dplyr   1.0.10\n✔ tidyr   1.2.0      ✔ stringr 1.4.1 \n✔ readr   2.1.2      ✔ forcats 0.5.2 \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()"
  },
  {
    "objectID": "Hand-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#import-shapefile-into-r-environment",
    "href": "Hand-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#import-shapefile-into-r-environment",
    "title": "Global and Local Measures of Spatial Autocorrelation",
    "section": "Import shapefile into r environment",
    "text": "Import shapefile into r environment\nImporting Hunan shapefile into R environment. The imported shapefile will be simple features Object of sf.\n\nhunan <- st_read(dsn = \"data/Geospatial/\", \n                 layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `C:\\Ridh27\\ISSS624\\Hand-on_Ex\\Hands-on_Ex2\\data\\Geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84"
  },
  {
    "objectID": "Hand-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#importing-csv-file-into-r-environment",
    "href": "Hand-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#importing-csv-file-into-r-environment",
    "title": "Global and Local Measures of Spatial Autocorrelation",
    "section": "Importing csv file into R environment",
    "text": "Importing csv file into R environment\n\nhunan2012 <- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\nRows: 88 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): County, City\ndbl (27): avg_wage, deposite, FAI, Gov_Rev, Gov_Exp, GDP, GDPPC, GIO, Loan, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "Hand-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#performing-relational-join",
    "href": "Hand-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#performing-relational-join",
    "title": "Global and Local Measures of Spatial Autocorrelation",
    "section": "Performing relational join",
    "text": "Performing relational join\nUpdating the attribute table of hunan’s SpatialPolygonsDataFrame with the attribute fields of hunan2012 dataframe.\n\nhunan <- left_join(hunan,hunan2012)\n\nJoining, by = \"County\""
  },
  {
    "objectID": "Hand-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#visualizing-regional-development-indicator",
    "href": "Hand-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#visualizing-regional-development-indicator",
    "title": "Global and Local Measures of Spatial Autocorrelation",
    "section": "Visualizing Regional Development Indicator",
    "text": "Visualizing Regional Development Indicator\nBasemap and Cholorpleth maps are prepared to show the distribution of GDPPC 2012:\n\nequal <- tm_shape(hunan) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal interval classification\")\n\nquantile <- tm_shape(hunan) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal quantile classification\")\n\ntmap_arrange(equal, \n             quantile, \n             asp=1, \n             ncol=2)"
  },
  {
    "objectID": "Hand-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#computing-continuity-spatial-weights",
    "href": "Hand-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#computing-continuity-spatial-weights",
    "title": "Global and Local Measures of Spatial Autocorrelation",
    "section": "Computing Continuity Spatial Weights",
    "text": "Computing Continuity Spatial Weights\nBefore computing Global spatial autocorrelation, Spatial weights of the study are constructed. Spatial weights are the neighbourhood relationships between the geographical units (i.e. county) in the study area.\nUsing poly2nb() of spdep package, Queen contiguity weight matrix is computed:\n\nwm_q <- poly2nb(hunan, \n                queen=TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\nThe summary reports shows that in Hunan area there are 88 area units. The most number of neighbors are with 85th area unit and the least number of neighbors are with 30th and 65th area unit."
  },
  {
    "objectID": "Hand-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#row-standardized-weights-matrix",
    "href": "Hand-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#row-standardized-weights-matrix",
    "title": "Global and Local Measures of Spatial Autocorrelation",
    "section": "Row-standardized weights matrix",
    "text": "Row-standardized weights matrix\nIn th is section, each neighboring polygon will assigned with equal weights (style=“W”). It is done by assigning the fraction 1/(#ofneighbors) to each neighboring county then summing the weighted income values.\nOne of the drawback is that polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data.\n\nrswm_q <- nb2listw(wm_q, \n                   style=\"W\", \n                   zero.policy = TRUE)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\nThe input of nb2listw() must be an object of class nb. The syntax of the function has two major arguments, namely style and zero.poly.\n\nstyle can take values “W”, “B”, “C”, “U”, “minmax” and “S”. B is the basic binary coding, W is row standardized (sums over all links to n), C is globally standardized (sums over all links to n), U is equal to C divided by the number of neighbours (sums over all links to unity), while S is the variance-stabilizing coding scheme proposed by Tiefelsdorf et al. 1999, p. 167-168 (sums over all links to n).\nIf zero policy is set to TRUE, weights vectors of zero length are inserted for regions without neighbor in the neighbours list. These will in turn generate lag values of zero, equivalent to the sum of products of the zero row t(rep(0, length=length(neighbours))) %*% x, for arbitrary numerical vector x of length length(neighbours). The spatially lagged value of x for the zero-neighbor region will then be zero, which may (or may not) be a sensible choice."
  },
  {
    "objectID": "Hand-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#global-spatial-autocorrelation-morans-i-test",
    "href": "Hand-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#global-spatial-autocorrelation-morans-i-test",
    "title": "Global and Local Measures of Spatial Autocorrelation",
    "section": "Global Spatial Autocorrelation: Moran’s I Test",
    "text": "Global Spatial Autocorrelation: Moran’s I Test\nIn this section, Moran’s I statistics test will be performed using moran.test() of spdep.\n\nmoran.test(hunan$GDPPC, \n           listw=rswm_q, \n           zero.policy = TRUE, \n           na.action=na.omit)\n\n\n    Moran I test under randomisation\n\ndata:  hunan$GDPPC  \nweights: rswm_q    \n\nMoran I statistic standard deviate = 4.7351, p-value = 1.095e-06\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.300749970      -0.011494253       0.004348351 \n\n\nAs p value is very small, smaller than the significant level of 0.05% .Therefore, we will reject the null hypothesis.\n\nComputing Morte Carlo Moran’s I\nIn this total of 1000 simulations will be performed by using moran.mc() of spdep\n\nset.seed(1234)\nbperm= moran.mc(hunan$GDPPC, \n                listw=rswm_q, \n                nsim=999, \n                zero.policy = TRUE, \n                na.action=na.omit)\nbperm\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  hunan$GDPPC \nweights: rswm_q  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.30075, observed rank = 1000, p-value = 0.001\nalternative hypothesis: greater\n\n\nAlso, after 1000 simulations p value is less than significane level of 0.05%. Therefore, we can reject the null hypothesis.\n\n\nVisualizing Monte Carlo Moran’s I\n\nmean(bperm$res[1:999])\n\n[1] -0.01504572\n\n\n\nvar(bperm$res[1:999])\n\n[1] 0.004371574\n\n\n\nsummary(bperm$res[1:999])\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n-0.18339 -0.06168 -0.02125 -0.01505  0.02611  0.27593 \n\n\n\nhist(bperm$res, \n     freq=TRUE, \n     breaks=20, \n     xlab=\"Simulated Moran's I\")\nabline(v=0, \n       col=\"red\") \n\n\n\n\nUsing ggplot()\n\nbperm_df <- bperm[7] #Extracting Only reserve data set\n\ntrial <- as.data.frame(bperm_df) #Creating data frame \n\nggplot(data=trial, mapping= aes(x=res))+\n  geom_histogram(bins=20, color= \"Black\", fill=\"orange\")+\n  labs(title= \"Simulated Moran's I\", \n       x= \"Simulated Moran's I\",\n       y=\"Frequency\")"
  },
  {
    "objectID": "Hand-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#global-spatial-autocorrelation-gearys",
    "href": "Hand-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#global-spatial-autocorrelation-gearys",
    "title": "Global and Local Measures of Spatial Autocorrelation",
    "section": "Global Spatial Autocorrelation: Geary’s",
    "text": "Global Spatial Autocorrelation: Geary’s\nIn this section, Geary’s c statistics testing will be performed using functions of spdep package\n\ngeary.test(hunan$GDPPC, listw=rswm_q)\n\n\n    Geary C test under randomisation\n\ndata:  hunan$GDPPC \nweights: rswm_q \n\nGeary C statistic standard deviate = 3.6108, p-value = 0.0001526\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n        0.6907223         1.0000000         0.0073364 \n\n\nAs c values are less than 1, we can conclude values are dispersed and observations tend to be similar. We reject the null hypothesis as p value is less than the significant value of 0.05%.\n\nComputing Monte Carlo Geary’s C\nPermutation test for Geary’s C Statistics is performed\n\nset.seed(1234)\nbperm=geary.mc(hunan$GDPPC, \n               listw=rswm_q, \n               nsim=999)\nbperm\n\n\n    Monte-Carlo simulation of Geary C\n\ndata:  hunan$GDPPC \nweights: rswm_q \nnumber of simulations + 1: 1000 \n\nstatistic = 0.69072, observed rank = 1, p-value = 0.001\nalternative hypothesis: greater\n\n\n\n\nVisualizing the Monte Carlo Gearey’s C\n\nmean(bperm$res[1:999])\n\n[1] 1.004402\n\n\n\nvar(bperm$res[1:999])\n\n[1] 0.007436493\n\n\n\nsummary(bperm$res[1:999])\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.7142  0.9502  1.0052  1.0044  1.0595  1.2722 \n\n\n\nhist(bperm$res, freq=TRUE, breaks=20, xlab=\"Simulated Geary c\")\nabline(v=1, col=\"red\")"
  },
  {
    "objectID": "Hand-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#compute-morans-i-correlogram",
    "href": "Hand-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#compute-morans-i-correlogram",
    "title": "Global and Local Measures of Spatial Autocorrelation",
    "section": "Compute Moran’s I Correlogram",
    "text": "Compute Moran’s I Correlogram\nComputation of 6-lag spatial correlogram of GDPPC. The global spatial autocorrelation used in Moran’s I. The plot() of base Graph is then used to plot the output.\n\nMI_corr <- sp.correlogram(wm_q, \n                          hunan$GDPPC, \n                          order=6, \n                          method=\"I\", \n                          style=\"W\")\nplot(MI_corr)\n\n\n\n\nWe should examine full analysis report as plotting the output might now allow us to provide complete interpretation. This is because not all autocorrelation values are statistically significant.\n\nprint(MI_corr)\n\nSpatial correlogram for hunan$GDPPC \nmethod: Moran's I\n         estimate expectation   variance standard deviate Pr(I) two sided    \n1 (88)  0.3007500  -0.0114943  0.0043484           4.7351       2.189e-06 ***\n2 (88)  0.2060084  -0.0114943  0.0020962           4.7505       2.029e-06 ***\n3 (88)  0.0668273  -0.0114943  0.0014602           2.0496        0.040400 *  \n4 (88)  0.0299470  -0.0114943  0.0011717           1.2107        0.226015    \n5 (88) -0.1530471  -0.0114943  0.0012440          -4.0134       5.984e-05 ***\n6 (88) -0.1187070  -0.0114943  0.0016791          -2.6164        0.008886 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nOut of 6lag spatial correlogram plotting only 1 out of 6 has p value/two sided value greater than significance value."
  },
  {
    "objectID": "Hand-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#compute-gearys-c-correlogram-and-plot",
    "href": "Hand-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#compute-gearys-c-correlogram-and-plot",
    "title": "Global and Local Measures of Spatial Autocorrelation",
    "section": "Compute Geary’s C correlogram and plot",
    "text": "Compute Geary’s C correlogram and plot\n\nGC_corr <- sp.correlogram(wm_q, \n                          hunan$GDPPC, \n                          order=6, \n                          method=\"C\", \n                          style=\"W\")\nplot(GC_corr)\n\n\n\n\nAnalysis Report:\n\nprint(GC_corr)\n\nSpatial correlogram for hunan$GDPPC \nmethod: Geary's C\n        estimate expectation  variance standard deviate Pr(I) two sided    \n1 (88) 0.6907223   1.0000000 0.0073364          -3.6108       0.0003052 ***\n2 (88) 0.7630197   1.0000000 0.0049126          -3.3811       0.0007220 ***\n3 (88) 0.9397299   1.0000000 0.0049005          -0.8610       0.3892612    \n4 (88) 1.0098462   1.0000000 0.0039631           0.1564       0.8757128    \n5 (88) 1.2008204   1.0000000 0.0035568           3.3673       0.0007592 ***\n6 (88) 1.0773386   1.0000000 0.0058042           1.0151       0.3100407    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nOut of 6 lag spatial correlogram plotting, 3 have p value less than signifiance level of 0.05% and rest are above the significance level."
  },
  {
    "objectID": "Hand-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#computing-local-morans-i",
    "href": "Hand-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#computing-local-morans-i",
    "title": "Global and Local Measures of Spatial Autocorrelation",
    "section": "Computing local Moran’s I",
    "text": "Computing local Moran’s I\nComputing local Moran’s I of GDPPC2012 at the county level using localmoran() function in spdep.\n\nfips <- order(hunan$County)\nlocalMI <- localmoran(hunan$GDPPC, rswm_q)\nhead(localMI)\n\n            Ii          E.Ii       Var.Ii        Z.Ii Pr(z != E(Ii))\n1 -0.001468468 -2.815006e-05 4.723841e-04 -0.06626904      0.9471636\n2  0.025878173 -6.061953e-04 1.016664e-02  0.26266425      0.7928094\n3 -0.011987646 -5.366648e-03 1.133362e-01 -0.01966705      0.9843090\n4  0.001022468 -2.404783e-07 5.105969e-06  0.45259801      0.6508382\n5  0.014814881 -6.829362e-05 1.449949e-03  0.39085814      0.6959021\n6 -0.038793829 -3.860263e-04 6.475559e-03 -0.47728835      0.6331568\n\n\nlocalmoran() function returns a matrix of values whose columns are:\n\nIi: the local Moran’s I statistics\nE.Ii: the expectation of local moran statistic under the randomisation hypothesis\nVar.Ii: the variance of local moran statistic under the randomisation hypothesis\nZ.Ii:the standard deviate of local moran statistic\nPr(): the p-value of local moran statistic\n\nList the content of the local Moran matrix derived by using printCoefmat().\n\nprintCoefmat(data.frame(localMI[fips,], row.names=hunan$County[fips]), check.names=FALSE)\n\n                       Ii        E.Ii      Var.Ii        Z.Ii Pr.z....E.Ii..\nAnhua         -2.2493e-02 -5.0048e-03  5.8235e-02 -7.2467e-02         0.9422\nAnren         -3.9932e-01 -7.0111e-03  7.0348e-02 -1.4791e+00         0.1391\nAnxiang       -1.4685e-03 -2.8150e-05  4.7238e-04 -6.6269e-02         0.9472\nBaojing        3.4737e-01 -5.0089e-03  8.3636e-02  1.2185e+00         0.2230\nChaling        2.0559e-02 -9.6812e-04  2.7711e-02  1.2932e-01         0.8971\nChangning     -2.9868e-05 -9.0010e-09  1.5105e-07 -7.6828e-02         0.9388\nChangsha       4.9022e+00 -2.1348e-01  2.3194e+00  3.3590e+00         0.0008\nChengbu        7.3725e-01 -1.0534e-02  2.2132e-01  1.5895e+00         0.1119\nChenxi         1.4544e-01 -2.8156e-03  4.7116e-02  6.8299e-01         0.4946\nCili           7.3176e-02 -1.6747e-03  4.7902e-02  3.4200e-01         0.7324\nDao            2.1420e-01 -2.0824e-03  4.4123e-02  1.0297e+00         0.3032\nDongan         1.5210e-01 -6.3485e-04  1.3471e-02  1.3159e+00         0.1882\nDongkou        5.2918e-01 -6.4461e-03  1.0748e-01  1.6338e+00         0.1023\nFenghuang      1.8013e-01 -6.2832e-03  1.3257e-01  5.1198e-01         0.6087\nGuidong       -5.9160e-01 -1.3086e-02  3.7003e-01 -9.5104e-01         0.3416\nGuiyang        1.8240e-01 -3.6908e-03  3.2610e-02  1.0305e+00         0.3028\nGuzhang        2.8466e-01 -8.5054e-03  1.4152e-01  7.7931e-01         0.4358\nHanshou        2.5878e-02 -6.0620e-04  1.0167e-02  2.6266e-01         0.7928\nHengdong       9.9964e-03 -4.9063e-04  6.7742e-03  1.2742e-01         0.8986\nHengnan        2.8064e-02 -3.2160e-04  3.7597e-03  4.6294e-01         0.6434\nHengshan      -5.8201e-03 -3.0437e-05  5.1076e-04 -2.5618e-01         0.7978\nHengyang       6.2997e-02 -1.3046e-03  2.1865e-02  4.3486e-01         0.6637\nHongjiang      1.8790e-01 -2.3019e-03  3.1725e-02  1.0678e+00         0.2856\nHuarong       -1.5389e-02 -1.8667e-03  8.1030e-02 -4.7503e-02         0.9621\nHuayuan        8.3772e-02 -8.5569e-04  2.4495e-02  5.4072e-01         0.5887\nHuitong        2.5997e-01 -5.2447e-03  1.1077e-01  7.9685e-01         0.4255\nJiahe         -1.2431e-01 -3.0550e-03  5.1111e-02 -5.3633e-01         0.5917\nJianghua       2.8651e-01 -3.8280e-03  8.0968e-02  1.0204e+00         0.3076\nJiangyong      2.4337e-01 -2.7082e-03  1.1746e-01  7.1800e-01         0.4728\nJingzhou       1.8270e-01 -8.5106e-04  2.4363e-02  1.1759e+00         0.2396\nJinshi        -1.1988e-02 -5.3666e-03  1.1334e-01 -1.9667e-02         0.9843\nJishou        -2.8680e-01 -2.6305e-03  4.4028e-02 -1.3543e+00         0.1756\nLanshan        6.3334e-02 -9.6365e-04  2.0441e-02  4.4972e-01         0.6529\nLeiyang        1.1581e-02 -1.4948e-04  2.5082e-03  2.3422e-01         0.8148\nLengshuijiang -1.7903e+00 -8.2129e-02  2.1598e+00 -1.1623e+00         0.2451\nLi             1.0225e-03 -2.4048e-07  5.1060e-06  4.5260e-01         0.6508\nLianyuan      -1.4672e-01 -1.8983e-03  1.9145e-02 -1.0467e+00         0.2952\nLiling         1.3774e+00 -1.5097e-02  4.2601e-01  2.1335e+00         0.0329\nLinli          1.4815e-02 -6.8294e-05  1.4499e-03  3.9086e-01         0.6959\nLinwu         -2.4621e-03 -9.0703e-06  1.9258e-04 -1.7676e-01         0.8597\nLinxiang       6.5904e-02 -2.9028e-03  2.5470e-01  1.3634e-01         0.8916\nLiuyang        3.3688e+00 -7.7502e-02  1.5180e+00  2.7972e+00         0.0052\nLonghui        8.0801e-01 -1.1377e-02  1.5538e-01  2.0787e+00         0.0376\nLongshan       7.5663e-01 -1.1100e-02  3.1449e-01  1.3690e+00         0.1710\nLuxi           1.8177e-01 -2.4855e-03  3.4249e-02  9.9561e-01         0.3194\nMayang         2.1852e-01 -5.8773e-03  9.8049e-02  7.1663e-01         0.4736\nMiluo          1.8704e+00 -1.6927e-02  2.7925e-01  3.5715e+00         0.0004\nNan           -9.5789e-03 -4.9497e-04  6.8341e-03 -1.0988e-01         0.9125\nNingxiang      1.5607e+00 -7.3878e-02  8.0012e-01  1.8274e+00         0.0676\nNingyuan       2.0910e-01 -7.0884e-03  8.2306e-02  7.5356e-01         0.4511\nPingjiang     -9.8964e-01 -2.6457e-03  5.6027e-02 -4.1698e+00         0.0000\nQidong         1.1806e-01 -2.1207e-03  2.4747e-02  7.6396e-01         0.4449\nQiyang         6.1966e-02 -7.3374e-04  8.5743e-03  6.7712e-01         0.4983\nRucheng       -3.6992e-01 -8.8999e-03  2.5272e-01 -7.1814e-01         0.4727\nSangzhi        2.5053e-01 -4.9470e-03  6.8000e-02  9.7972e-01         0.3272\nShaodong      -3.2659e-02 -3.6592e-05  5.0546e-04 -1.4510e+00         0.1468\nShaoshan       2.1223e+00 -5.0227e-02  1.3668e+00  1.8583e+00         0.0631\nShaoyang       5.9499e-01 -1.1253e-02  1.3012e-01  1.6807e+00         0.0928\nShimen        -3.8794e-02 -3.8603e-04  6.4756e-03 -4.7729e-01         0.6332\nShuangfeng     9.2835e-03 -2.2867e-03  3.1516e-02  6.5174e-02         0.9480\nShuangpai      8.0591e-02 -3.1366e-04  8.9838e-03  8.5358e-01         0.3933\nSuining        3.7585e-01 -3.5933e-03  4.1870e-02  1.8544e+00         0.0637\nTaojiang      -2.5394e-01 -1.2395e-03  1.4477e-02 -2.1002e+00         0.0357\nTaoyuan        1.4729e-02 -1.2039e-04  8.5103e-04  5.0903e-01         0.6107\nTongdao        4.6482e-01 -6.9870e-03  1.9879e-01  1.0582e+00         0.2900\nWangcheng      4.4220e+00 -1.1067e-01  1.3596e+00  3.8873e+00         0.0001\nWugang         7.1003e-01 -7.8144e-03  1.0710e-01  2.1935e+00         0.0283\nXiangtan       2.4530e-01 -3.6457e-04  3.2319e-03  4.3213e+00         0.0000\nXiangxiang     2.6271e-01 -1.2703e-03  2.1290e-02  1.8092e+00         0.0704\nXiangyin       5.4525e-01 -4.7442e-03  7.9236e-02  1.9539e+00         0.0507\nXinhua         1.1810e-01 -6.2649e-03  8.6001e-02  4.2409e-01         0.6715\nXinhuang       1.5725e-01 -4.1820e-03  3.6648e-01  2.6667e-01         0.7897\nXinning        6.8928e-01 -9.6674e-03  2.0328e-01  1.5502e+00         0.1211\nXinshao        5.7578e-02 -8.5932e-03  1.1769e-01  1.9289e-01         0.8470\nXintian       -7.4050e-03 -5.1493e-03  1.0877e-01 -6.8395e-03         0.9945\nXupu           3.2406e-01 -5.7468e-03  5.7735e-02  1.3726e+00         0.1699\nYanling       -6.9021e-02 -5.9211e-04  9.9306e-03 -6.8667e-01         0.4923\nYizhang       -2.6844e-01 -2.2463e-03  4.7588e-02 -1.2202e+00         0.2224\nYongshun       6.3064e-01 -1.1350e-02  1.8830e-01  1.4795e+00         0.1390\nYongxing       4.3411e-01 -9.0735e-03  1.5088e-01  1.1409e+00         0.2539\nYou            7.8750e-02 -7.2728e-03  1.2116e-01  2.4714e-01         0.8048\nYuanjiang      2.0004e-04 -1.7760e-04  2.9798e-03  6.9181e-03         0.9945\nYuanling       8.7298e-03 -2.2981e-06  2.3221e-05  1.8121e+00         0.0700\nYueyang        4.1189e-02 -1.9768e-04  2.3113e-03  8.6085e-01         0.3893\nZhijiang       1.0476e-01 -7.8123e-04  1.3100e-02  9.2214e-01         0.3565\nZhongfang     -2.2685e-01 -2.1455e-03  3.5927e-02 -1.1855e+00         0.2358\nZhuzhou        3.2864e-01 -5.2432e-04  7.2391e-03  3.8688e+00         0.0001\nZixing        -7.6849e-01 -8.8210e-02  9.4057e-01 -7.0144e-01         0.4830\n\n\n\nMapping the local Moran’s I\nBefore mapping, append the local Moran’s I dataframe (i.e. localMI) onto hunan SpatialPolygonDataFrame:\n\nhunan.localMI <- cbind(hunan,localMI) %>%\n  rename(Pr.Ii = Pr.z....E.Ii..)\n\n\n\nMapping the local Moran’s I values\n\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\",\n          palette = \"RdBu\",\n          title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5)\n\nVariable(s) \"Ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\nMapping local Moran’s I p values\nAs li has both positive and negative values, therefore it is useful to consider p values for each of these values:\n\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\nMapping both local Moran’s I values and p-values\n\nlocalMI.map <- tm_shape(hunan.localMI) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\", \n          title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5)\n\npvalue.map <- tm_shape(hunan.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(localMI.map, pvalue.map, asp=1, ncol=2)\n\nVariable(s) \"Ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette."
  },
  {
    "objectID": "Hand-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#plotting-moran-scatterplot",
    "href": "Hand-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#plotting-moran-scatterplot",
    "title": "Global and Local Measures of Spatial Autocorrelation",
    "section": "Plotting Moran Scatterplot",
    "text": "Plotting Moran Scatterplot\nIt is the illustration of the relationship between the values of the chosen attributes at each location and the average value of the same attribute at the neighboring location.\n\nnci <- moran.plot(hunan$GDPPC, rswm_q,\n                  labels=as.character(hunan$County), \n                  xlab=\"GDPPC 2012\", \n                  ylab=\"Spatially Lag GDPPC 2012\")\n\n\n\n\nThe top right corner belongs to areas that have high GDPPC and are surrounded by other areas that have the average level of GDPPC."
  },
  {
    "objectID": "Hand-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#plotting-moran-scatterplot-with-standardized-variables",
    "href": "Hand-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#plotting-moran-scatterplot-with-standardized-variables",
    "title": "Global and Local Measures of Spatial Autocorrelation",
    "section": "Plotting Moran scatterplot with standardized variables",
    "text": "Plotting Moran scatterplot with standardized variables\nFirst, using scale() to centers and scales the variable. Here centering is done by subtracting the mean (omitting NAs) the corresponding columns, and scaling is done by dividing the (centered) variable by their standard deviations.\nThe as.vector() added to the end is to make sure that the data type we get out of this is a vector, that map neatly into out dataframe.\n\nhunan$Z.GDPPC <- scale(hunan$GDPPC) %>% as.vector \n\n\nnci2 <- moran.plot(hunan$Z.GDPPC, rswm_q,\n                   labels=as.character(hunan$County),\n                   xlab=\"z-GDPPC 2012\", \n                   ylab=\"Spatially Lag z-GDPPC 2012\")"
  },
  {
    "objectID": "Hand-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#preparing-lisa-map-classes",
    "href": "Hand-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#preparing-lisa-map-classes",
    "title": "Global and Local Measures of Spatial Autocorrelation",
    "section": "Preparing LISA map classes",
    "text": "Preparing LISA map classes\n\nPrepare LISA cluster map\n\n\nquadrant <- vector(mode=\"numeric\",length=nrow(localMI))\n\n\nCentre the variable of interest around the mean\n\n\nDV <- hunan$GDPPC - mean(hunan$GDPPC)     \n\n\nCentering the local Moran’s around the mean\n\n\nC_mI <- localMI[,1] - mean(localMI[,1])    \n\n\nSetting a significance level for the local Moran\n\n\nsignif <- 0.05       \n\n\nThese four command lines define the high-high, low-low, low-high and high-low categories.\n\n\nquadrant[DV >0 & C_mI>0] <- 4      \nquadrant[DV <0 & C_mI<0] <- 2      \nquadrant[DV <0 & C_mI>0] <- 1\nquadrant[DV >0 & C_mI<0] <- 3\n\n\nPlacing non significant Moran in the category 0\n\n\nquadrant[localMI[,5]>signif] <- 0\n\nCombining all the steps into one single code chunk\n\nquadrant <- vector(mode=\"numeric\",length=nrow(localMI))\nDV <- hunan$GDPPC - mean(hunan$GDPPC)     \nC_mI <- localMI[,1] - mean(localMI[,1])    \nsignif <- 0.05       \nquadrant[DV >0 & C_mI>0] <- 4      \nquadrant[DV <0 & C_mI<0] <- 2      \nquadrant[DV <0 & C_mI>0] <- 1\nquadrant[DV >0 & C_mI<0] <- 3\nquadrant[localMI[,5]>signif] <- 0"
  },
  {
    "objectID": "Hand-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#plotting-lisa-map",
    "href": "Hand-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#plotting-lisa-map",
    "title": "Global and Local Measures of Spatial Autocorrelation",
    "section": "Plotting LISA map",
    "text": "Plotting LISA map\n\nhunan.localMI$quadrant <- quadrant\ncolors <- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters <- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n\n\n\n\nFor effective interpretation, it is better to plot both the local Moran’s I values map and its corresponding p-values map next to each other.\n\ngdppc <- qtm(hunan, \"GDPPC\")\n\nhunan.localMI$quadrant <- quadrant\ncolors <- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters <- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\nLISAmap <- tm_shape(hunan.localMI) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n\ntmap_arrange(gdppc, LISAmap, asp=1, ncol=2)"
  },
  {
    "objectID": "Hand-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#getis-and-ords-g-statistics",
    "href": "Hand-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#getis-and-ords-g-statistics",
    "title": "Global and Local Measures of Spatial Autocorrelation",
    "section": "Getis and Ord’s G-Statistics",
    "text": "Getis and Ord’s G-Statistics\nIt is an alternative spatial statistics to detect spatial anomalies, looking at neighbors within a defined proximity to identify where either high or low values clutser spatially. Statistically significant hot-spots are recognised as areas of high values where other areas within a neighbourhood range also share high values too. The analysis consists of three steps:\n\nDeriving spatial weight matrix\nComputing Gi statistics\nMapping Gi statistics"
  },
  {
    "objectID": "Hand-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#deriving-distance-based-weight-matrix",
    "href": "Hand-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#deriving-distance-based-weight-matrix",
    "title": "Global and Local Measures of Spatial Autocorrelation",
    "section": "Deriving Distance-based weight matrix",
    "text": "Deriving Distance-based weight matrix\nFirst, defining a new set of neighbors. Whist the spatial autocorrelation considered units which shared borders, for Getis-Ord we are defining neighbours based on distance.\nThere are two type of distance-based proximity matrix, they are:\n\nfixed distance weight matrix; and\nadaptive distance weight matrix.\n\n\n\nDeriving the centroid\nCoordinates in separate dataframe is required. The mapping function applies a given function to each element of a vector and returns a vector of the same length. Our input vector will be the geometry column of us.bound. Our function will be st_centroid(). We will be using map_dbl variation of map from the purrr package.\nCalculation longitude, first value in each centroid:\n\nlongitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])\n\nThen, latitudde is calculated in similar manner, only difference is We access the second value per each centroid with [[2]]:\n\nlatitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\n\nPutting longitude and latitude in same object:\n\ncoords <- cbind(longitude, latitude)\n\n\n\nDetermine the cut-off distance\nUpper limit for the distance is calculated using the following steps:\n\nReturn a matrix with the indices of points belonging to the set of the k nearest neighbours of each other by using knearneigh() of spdep.\nConvert the knn object returned by knearneigh() into a neighbours list of class nb with a list of integer vectors containing neighbour region number ids by using knn2nb().\nReturn the length of neighbour relationship edges by using nbdists() of spdep. The function returns in the units of the coordinates if the coordinates are projected, in km otherwise.\nRemove the list structure of the returned object by using unlist().\n\n\n#coords <- coordinates(hunan)\nk1 <- knn2nb(knearneigh(coords))\nk1dists <- unlist(nbdists(k1, coords, longlat = TRUE))\nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n\n\nThe summary report shows that the largest first nearest neighbour distance is 61.79 km, so using this as the upper threshold gives certainty that all units will have at least one neighbour.\n\n\nComputing fixed distance weight matrix\n\nwm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)\nwm_d62\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \n\n\nConvert the nb object into spatial weight object\n\nwm62_lw <- nb2listw(wm_d62, style = 'B')\nsummary(wm62_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \nLink number distribution:\n\n 1  2  3  4  5  6 \n 6 15 14 26 20  7 \n6 least connected regions:\n6 15 30 32 56 65 with 1 link\n7 most connected regions:\n21 28 35 45 50 52 82 with 6 links\n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1   S2\nB 88 7744 324 648 5440"
  },
  {
    "objectID": "Hand-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#computing-adaptive-distance-weight-matrix",
    "href": "Hand-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#computing-adaptive-distance-weight-matrix",
    "title": "Global and Local Measures of Spatial Autocorrelation",
    "section": "Computing adaptive distance weight matrix",
    "text": "Computing adaptive distance weight matrix\nMore densely settled areas (usually the urban areas) tend to have more neighbours and the less densely settled areas (usually the rural counties) tend to have lesser neighbours.\nIt is possible to control the numbers of neighbours directly using k-nearest neighbours, either accepting asymmetric neighbours or imposing symmetry:\n\nknn <- knn2nb(knearneigh(coords, k=8))\nknn\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 704 \nPercentage nonzero weights: 9.090909 \nAverage number of links: 8 \nNon-symmetric neighbours list\n\n\nConvert the nb object into spatial weight object\n\nknn_lw <- nb2listw(knn, style = 'B')\nsummary(knn_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 704 \nPercentage nonzero weights: 9.090909 \nAverage number of links: 8 \nNon-symmetric neighbours list\nLink number distribution:\n\n 8 \n88 \n88 least connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 with 8 links\n88 most connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 with 8 links\n\nWeights style: B \nWeights constants summary:\n   n   nn  S0   S1    S2\nB 88 7744 704 1300 23014"
  },
  {
    "objectID": "Hand-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#gi-statistics-using-fixed-distance",
    "href": "Hand-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#gi-statistics-using-fixed-distance",
    "title": "Global and Local Measures of Spatial Autocorrelation",
    "section": "Gi statistics using fixed distance",
    "text": "Gi statistics using fixed distance\n\nfips <- order(hunan$County)\ngi.fixed <- localG(hunan$GDPPC, wm62_lw)\ngi.fixed\n\n [1]  0.436075843 -0.265505650 -0.073033665  0.413017033  0.273070579\n [6] -0.377510776  2.863898821  2.794350420  5.216125401  0.228236603\n[11]  0.951035346 -0.536334231  0.176761556  1.195564020 -0.033020610\n[16]  1.378081093 -0.585756761 -0.419680565  0.258805141  0.012056111\n[21] -0.145716531 -0.027158687 -0.318615290 -0.748946051 -0.961700582\n[26] -0.796851342 -1.033949773 -0.460979158 -0.885240161 -0.266671512\n[31] -0.886168613 -0.855476971 -0.922143185 -1.162328599  0.735582222\n[36] -0.003358489 -0.967459309 -1.259299080 -1.452256513 -1.540671121\n[41] -1.395011407 -1.681505286 -1.314110709 -0.767944457 -0.192889342\n[46]  2.720804542  1.809191360 -1.218469473 -0.511984469 -0.834546363\n[51] -0.908179070 -1.541081516 -1.192199867 -1.075080164 -1.631075961\n[56] -0.743472246  0.418842387  0.832943753 -0.710289083 -0.449718820\n[61] -0.493238743 -1.083386776  0.042979051  0.008596093  0.136337469\n[66]  2.203411744  2.690329952  4.453703219 -0.340842743 -0.129318589\n[71]  0.737806634 -1.246912658  0.666667559  1.088613505 -0.985792573\n[76]  1.233609606 -0.487196415  1.626174042 -1.060416797  0.425361422\n[81] -0.837897118 -0.314565243  0.371456331  4.424392623 -0.109566928\n[86]  1.364597995 -1.029658605 -0.718000620\nattr(,\"cluster\")\n [1] Low  Low  High High High High High High High Low  Low  High Low  Low  Low \n[16] High High High High Low  High High Low  Low  High Low  Low  Low  Low  Low \n[31] Low  Low  Low  High Low  Low  Low  Low  Low  Low  High Low  Low  Low  Low \n[46] High High Low  Low  Low  Low  High Low  Low  Low  Low  Low  High Low  Low \n[61] Low  Low  Low  High High High Low  High Low  Low  High Low  High High Low \n[76] High Low  Low  Low  Low  Low  Low  High High Low  High Low  Low \nLevels: Low High\nattr(,\"gstari\")\n[1] FALSE\nattr(,\"call\")\nlocalG(x = hunan$GDPPC, listw = wm62_lw)\nattr(,\"class\")\n[1] \"localG\"\n\n\nThe output of localG() is a vector of G or Gstar values, with attributes “gstari” set to TRUE or FALSE, “call” set to the function call, and class “localG”.\nThe Gi statistics is represented as a Z-score. Greater values represent a greater intensity of clustering and the direction (positive or negative) indicates high or low clusters.\nJoining the Gi values to their corresponding hunan sf data frame:\n\nhunan.gi <- cbind(hunan, as.matrix(gi.fixed)) %>%\n  rename(gstat_fixed = as.matrix.gi.fixed.)\n\nFollowing steps are followed in the above code chunk:\n\nFirst, it convert the output vector (i.e. gi.fixed) into r matrix object by using as.matrix()\n. Next, cbind() is used to join hunan@data and gi.fixed matrix to produce a new SpatialPolygonDataFrame called hunan.gi.\nLastly, the field name of the gi values is renamed to gstat_fixed by using rename()."
  },
  {
    "objectID": "Hand-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#mapping-gi-values-with-fixed-distance-weights",
    "href": "Hand-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#mapping-gi-values-with-fixed-distance-weights",
    "title": "Global and Local Measures of Spatial Autocorrelation",
    "section": "Mapping Gi values with fixed distance weights",
    "text": "Mapping Gi values with fixed distance weights\n\ngdppc <- qtm(hunan, \"GDPPC\")\n\nGimap <-tm_shape(hunan.gi) +\n  tm_fill(col = \"gstat_fixed\", \n          style = \"pretty\",\n          palette=\"-RdBu\",\n          title = \"local Gi\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(gdppc, Gimap, asp=1, ncol=2)\n\nVariable(s) \"gstat_fixed\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette."
  },
  {
    "objectID": "Hand-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#mapping-gi-values-with-adaptive-distance-weights",
    "href": "Hand-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#mapping-gi-values-with-adaptive-distance-weights",
    "title": "Global and Local Measures of Spatial Autocorrelation",
    "section": "Mapping Gi values with adaptive distance weights",
    "text": "Mapping Gi values with adaptive distance weights\n\ngdppc<- qtm(hunan, \"GDPPC\")\n\nGimap <- tm_shape(hunan.gi) + \n  tm_fill(col = \"gstat_fixed\", \n          style = \"pretty\", \n          palette=\"-RdBu\", \n          title = \"local Gi\") + \n  tm_borders(alpha = 0.5)\n\ntmap_arrange(gdppc, \n             Gimap, \n             asp=1, \n             ncol=2)\n\nVariable(s) \"gstat_fixed\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette."
  },
  {
    "objectID": "Hand-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html",
    "href": "Hand-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html",
    "title": "Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "",
    "text": "In this hands-on Exercise, we will learn how to delineate homogeneous region by using geographically referenced multivariate data. There are two major analysis, namely:\n\nhierarchical cluster analysis; and\nspatially constrained cluster analysis."
  },
  {
    "objectID": "Hand-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#the-analytical-question",
    "href": "Hand-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#the-analytical-question",
    "title": "Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "The analytical question",
    "text": "The analytical question\nIn geobusiness and spatial policy, it is common to group market and planning area into homogeneous regions using multivariate data. In this hands-on exercise, we are interested to delineate Shan State, Myanmar into homogeneous regions by using multiple Information and Communication technology (ICT) measures, namely: Radio, Television, Land line phone, Mobile phone, Computer, and Internet at home."
  },
  {
    "objectID": "Hand-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#installing-and-loading-r-packages",
    "href": "Hand-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#installing-and-loading-r-packages",
    "title": "Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "Installing and Loading R packages",
    "text": "Installing and Loading R packages\nUsing the code chunk below all the necessary R packages are installed and loaded into R environment.\n\npacman::p_load(rgdal, spdep, tmap, sf, \n               ggpubr, cluster, factoextra, NbClust,\n               heatmaply, corrplot, psych, tidyverse, ClustGeo)"
  },
  {
    "objectID": "Hand-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#importing-geospatial-data-into-r-environment",
    "href": "Hand-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#importing-geospatial-data-into-r-environment",
    "title": "Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "Importing Geospatial data into R environment",
    "text": "Importing Geospatial data into R environment\nMyanmar Township Boundary GIS data and its associated attrbiute table are imported into R environment\nThe Myanmar Township Boundary GIS data is in ESRI shapefile format. It will be imported into R environment by using the st_read() function of sf as shown in code chunk below\n\nshan_sf <- st_read(dsn = \"data/data/geospatial/\", \n                   layer = \"myanmar_township_boundaries\") %>%\n  filter(ST %in% c(\"Shan (East)\", \"Shan (North)\", \"Shan (South)\"))\n\nReading layer `myanmar_township_boundaries' from data source \n  `C:\\Ridh27\\ISSS624\\Hand-on_Ex\\Hands-on_Ex3\\data\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 330 features and 14 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 92.17275 ymin: 9.671252 xmax: 101.1699 ymax: 28.54554\nGeodetic CRS:  WGS 84\n\n\nWe can view newly created dataframe, “shan_sf” by using the code chunk below\n\nshan_sf\n\nSimple feature collection with 55 features and 14 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 96.15107 ymin: 19.29932 xmax: 101.1699 ymax: 24.15907\nGeodetic CRS:  WGS 84\nFirst 10 features:\n   OBJECTID           ST ST_PCODE       DT   DT_PCODE        TS  TS_PCODE\n1       163 Shan (North)   MMR015  Mongmit MMR015D008   Mongmit MMR015017\n2       203 Shan (South)   MMR014 Taunggyi MMR014D001   Pindaya MMR014006\n3       240 Shan (South)   MMR014 Taunggyi MMR014D001   Ywangan MMR014007\n4       106 Shan (South)   MMR014 Taunggyi MMR014D001  Pinlaung MMR014009\n5        72 Shan (North)   MMR015  Mongmit MMR015D008    Mabein MMR015018\n6        40 Shan (South)   MMR014 Taunggyi MMR014D001     Kalaw MMR014005\n7       194 Shan (South)   MMR014 Taunggyi MMR014D001     Pekon MMR014010\n8       159 Shan (South)   MMR014 Taunggyi MMR014D001  Lawksawk MMR014008\n9        61 Shan (North)   MMR015  Kyaukme MMR015D003 Nawnghkio MMR015013\n10      124 Shan (North)   MMR015  Kyaukme MMR015D003   Kyaukme MMR015012\n                 ST_2            LABEL2 SELF_ADMIN ST_RG T_NAME_WIN T_NAME_M3\n1  Shan State (North)    Mongmit\\n61072       <NA> State   rdk;rdwf      မိုးမိတ်\n2  Shan State (South)    Pindaya\\n77769       Danu State     yif;w,     ပင်းတယ\n3  Shan State (South)    Ywangan\\n76933       Danu State      &GmiH       ရွာငံ\n4  Shan State (South)  Pinlaung\\n162537       Pa-O State  yifavmif;   ပင်လောင်း\n5  Shan State (North)     Mabein\\n35718       <NA> State     rbdrf;      မဘိမ်း\n6  Shan State (South)     Kalaw\\n163138       <NA> State       uavm      ကလော\n7  Shan State (South)      Pekon\\n94226       <NA> State     z,fcHk       ဖယ်ခုံ\n8  Shan State (South)          Lawksawk       <NA> State   &yfapmuf    ရပ်စောက်\n9  Shan State (North) Nawnghkio\\n128357       <NA> State  aemifcsdK    နောင်ချို\n10 Shan State (North)   Kyaukme\\n172874       <NA> State   ausmufrJ    ကျောက်မဲ\n       AREA                       geometry\n1  2703.611 MULTIPOLYGON (((96.96001 23...\n2   629.025 MULTIPOLYGON (((96.7731 21....\n3  2984.377 MULTIPOLYGON (((96.78483 21...\n4  3396.963 MULTIPOLYGON (((96.49518 20...\n5  5034.413 MULTIPOLYGON (((96.66306 24...\n6  1456.624 MULTIPOLYGON (((96.49518 20...\n7  2073.513 MULTIPOLYGON (((97.14738 19...\n8  5145.659 MULTIPOLYGON (((96.94981 22...\n9  3271.537 MULTIPOLYGON (((96.75648 22...\n10 3920.869 MULTIPOLYGON (((96.95498 22...\n\n\nSince shan_sf is conformed to tidy framework, we can also glimpse() to reveal the data type of it’s fields\n\nglimpse(shan_sf)\n\nRows: 55\nColumns: 15\n$ OBJECTID   <dbl> 163, 203, 240, 106, 72, 40, 194, 159, 61, 124, 71, 155, 101…\n$ ST         <chr> \"Shan (North)\", \"Shan (South)\", \"Shan (South)\", \"Shan (Sout…\n$ ST_PCODE   <chr> \"MMR015\", \"MMR014\", \"MMR014\", \"MMR014\", \"MMR015\", \"MMR014\",…\n$ DT         <chr> \"Mongmit\", \"Taunggyi\", \"Taunggyi\", \"Taunggyi\", \"Mongmit\", \"…\n$ DT_PCODE   <chr> \"MMR015D008\", \"MMR014D001\", \"MMR014D001\", \"MMR014D001\", \"MM…\n$ TS         <chr> \"Mongmit\", \"Pindaya\", \"Ywangan\", \"Pinlaung\", \"Mabein\", \"Kal…\n$ TS_PCODE   <chr> \"MMR015017\", \"MMR014006\", \"MMR014007\", \"MMR014009\", \"MMR015…\n$ ST_2       <chr> \"Shan State (North)\", \"Shan State (South)\", \"Shan State (So…\n$ LABEL2     <chr> \"Mongmit\\n61072\", \"Pindaya\\n77769\", \"Ywangan\\n76933\", \"Pinl…\n$ SELF_ADMIN <chr> NA, \"Danu\", \"Danu\", \"Pa-O\", NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ST_RG      <chr> \"State\", \"State\", \"State\", \"State\", \"State\", \"State\", \"Stat…\n$ T_NAME_WIN <chr> \"rdk;rdwf\", \"yif;w,\", \"&GmiH\", \"yifavmif;\", \"rbdrf;\", \"uavm…\n$ T_NAME_M3  <chr> \"မိုးမိတ်\", \"ပင်းတယ\", \"ရွာငံ\", \"ပင်လောင်း\", \"မဘိမ်း\", \"ကလော\", \"ဖယ်ခုံ\", \"…\n$ AREA       <dbl> 2703.611, 629.025, 2984.377, 3396.963, 5034.413, 1456.624, …\n$ geometry   <MULTIPOLYGON [°]> MULTIPOLYGON (((96.96001 23..., MULTIPOLYGON (…"
  },
  {
    "objectID": "Hand-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#importing-aspatial-data-into-r-environment",
    "href": "Hand-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#importing-aspatial-data-into-r-environment",
    "title": "Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "Importing aspatial data into R environment",
    "text": "Importing aspatial data into R environment\nUsing the code chunk below, the csv file will be import using read_csv function of readr package.\n\nict <- read_csv (\"data/data/aspatial/Shan-ICT.csv\")\n\nRows: 55 Columns: 11\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): District Pcode, District Name, Township Pcode, Township Name\ndbl (7): Total households, Radio, Television, Land line phone, Mobile phone,...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nThe attribute data set, “ict” is saved in R’s tibble data.frame format.\nThe code chunk below reveal the summary statistics of ict data.frame.\n\nsummary(ict)\n\n District Pcode     District Name      Township Pcode     Township Name     \n Length:55          Length:55          Length:55          Length:55         \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n Total households     Radio         Television    Land line phone \n Min.   : 3318    Min.   :  115   Min.   :  728   Min.   :  20.0  \n 1st Qu.: 8711    1st Qu.: 1260   1st Qu.: 3744   1st Qu.: 266.5  \n Median :13685    Median : 2497   Median : 6117   Median : 695.0  \n Mean   :18369    Mean   : 4487   Mean   :10183   Mean   : 929.9  \n 3rd Qu.:23471    3rd Qu.: 6192   3rd Qu.:13906   3rd Qu.:1082.5  \n Max.   :82604    Max.   :30176   Max.   :62388   Max.   :6736.0  \n  Mobile phone      Computer      Internet at home\n Min.   :  150   Min.   :  20.0   Min.   :   8.0  \n 1st Qu.: 2037   1st Qu.: 121.0   1st Qu.:  88.0  \n Median : 3559   Median : 244.0   Median : 316.0  \n Mean   : 6470   Mean   : 575.5   Mean   : 760.2  \n 3rd Qu.: 7177   3rd Qu.: 507.0   3rd Qu.: 630.5  \n Max.   :48461   Max.   :6705.0   Max.   :9746.0  \n\n\nFrom the summary report above, there are 55 observations and 11 variables in the tibble data frame."
  },
  {
    "objectID": "Hand-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#derive-new-variables-using-dplyr-package",
    "href": "Hand-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#derive-new-variables-using-dplyr-package",
    "title": "Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "Derive new variables using dplyr package",
    "text": "Derive new variables using dplyr package\nThe unit of measurement of the values are number of household. In general, the townships with relatively higher total number of households will also have higher number of households owning radio, TV, etc.\nIn order to overcome this problem, we will derive the penetration rate of each ICT variable by using the code chunk below.\n\nict_derived <- ict %>%\n  mutate(`RADIO_PR` = `Radio`/`Total households`*1000) %>%\n  mutate(`TV_PR` = `Television`/`Total households`*1000) %>%\n  mutate(`LLPHONE_PR` = `Land line phone`/`Total households`*1000) %>%\n  mutate(`MPHONE_PR` = `Mobile phone`/`Total households`*1000) %>%\n  mutate(`COMPUTER_PR` = `Computer`/`Total households`*1000) %>%\n  mutate(`INTERNET_PR` = `Internet at home`/`Total households`*1000) %>%\n  rename(`DT_PCODE` =`District Pcode`,`DT`=`District Name`,\n         `TS_PCODE`=`Township Pcode`, `TS`=`Township Name`,\n         `TT_HOUSEHOLDS`=`Total households`,\n         `RADIO`=`Radio`, `TV`=`Television`, \n         `LLPHONE`=`Land line phone`, `MPHONE`=`Mobile phone`,\n         `COMPUTER`=`Computer`, `INTERNET`=`Internet at home`) \n\nNow, let’s review the summary statistics\n\nsummary(ict_derived)\n\n   DT_PCODE              DT              TS_PCODE              TS           \n Length:55          Length:55          Length:55          Length:55         \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n TT_HOUSEHOLDS       RADIO             TV           LLPHONE      \n Min.   : 3318   Min.   :  115   Min.   :  728   Min.   :  20.0  \n 1st Qu.: 8711   1st Qu.: 1260   1st Qu.: 3744   1st Qu.: 266.5  \n Median :13685   Median : 2497   Median : 6117   Median : 695.0  \n Mean   :18369   Mean   : 4487   Mean   :10183   Mean   : 929.9  \n 3rd Qu.:23471   3rd Qu.: 6192   3rd Qu.:13906   3rd Qu.:1082.5  \n Max.   :82604   Max.   :30176   Max.   :62388   Max.   :6736.0  \n     MPHONE         COMPUTER         INTERNET         RADIO_PR     \n Min.   :  150   Min.   :  20.0   Min.   :   8.0   Min.   : 21.05  \n 1st Qu.: 2037   1st Qu.: 121.0   1st Qu.:  88.0   1st Qu.:138.95  \n Median : 3559   Median : 244.0   Median : 316.0   Median :210.95  \n Mean   : 6470   Mean   : 575.5   Mean   : 760.2   Mean   :215.68  \n 3rd Qu.: 7177   3rd Qu.: 507.0   3rd Qu.: 630.5   3rd Qu.:268.07  \n Max.   :48461   Max.   :6705.0   Max.   :9746.0   Max.   :484.52  \n     TV_PR         LLPHONE_PR       MPHONE_PR       COMPUTER_PR    \n Min.   :116.0   Min.   :  2.78   Min.   : 36.42   Min.   : 3.278  \n 1st Qu.:450.2   1st Qu.: 22.84   1st Qu.:190.14   1st Qu.:11.832  \n Median :517.2   Median : 37.59   Median :305.27   Median :18.970  \n Mean   :509.5   Mean   : 51.09   Mean   :314.05   Mean   :24.393  \n 3rd Qu.:606.4   3rd Qu.: 69.72   3rd Qu.:428.43   3rd Qu.:29.897  \n Max.   :842.5   Max.   :181.49   Max.   :735.43   Max.   :92.402  \n  INTERNET_PR     \n Min.   :  1.041  \n 1st Qu.:  8.617  \n Median : 22.829  \n Mean   : 30.644  \n 3rd Qu.: 41.281  \n Max.   :117.985  \n\n\nIt can be observed, 6 new fields have been added into the data frame table."
  },
  {
    "objectID": "Hand-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#eda-using-statistical-graphics",
    "href": "Hand-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#eda-using-statistical-graphics",
    "title": "Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "EDA using statistical graphics",
    "text": "EDA using statistical graphics\nWe can plot number of households with Radio using EDA as shown in the code chunk below.\nNOTE: Histogram is useful to identify the overall distribution of the data values (i.e. left skew, right skew or normal distribution)\n\nggplot(data=ict_derived, \n       aes(x=`RADIO`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"orange\")\n\n\n\n\nBoxplot is useful to detect if there are outliers.\n\nggplot(data=ict_derived, \n       aes(x=`RADIO`)) +\n  geom_boxplot(color=\"black\", \n               fill=\"light blue\")\n\n\n\n\nNext, we will also plotting the distribution of the newly derived variables (i.e. Radio penetration rate) by using the code chunk below.\n\nggplot(data=ict_derived, \n       aes(x=`RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"Pink\")\n\n\n\n\nggplot for Radio Penetration rate\n\nggplot(data=ict_derived, \n       aes(x=`RADIO_PR`)) +\n  geom_boxplot(color=\"black\", \n               fill=\"light green\")\n\n\n\n\nIt can be observed that after calculating penetration rate, data is normal and number of outliers (dot in boxplot) have also been reduced.\nMultiple histograms are plotted to reveal the distribution of the selected variables in the ict_derived data.frame.\n\nradio <- ggplot(data=ict_derived, \n             aes(x= `RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\ntv <- ggplot(data=ict_derived, \n             aes(x= `TV_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light pink\")\n\nllphone <- ggplot(data=ict_derived, \n             aes(x= `LLPHONE_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light green\")\n\nmphone <- ggplot(data=ict_derived, \n             aes(x= `MPHONE_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"green\")\n\ncomputer <- ggplot(data=ict_derived, \n             aes(x= `COMPUTER_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"orange\")\n\ninternet <- ggplot(data=ict_derived, \n             aes(x= `INTERNET_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"yellow\")\nggarrange(radio, tv, llphone, mphone, computer, internet, \n          ncol = 3, \n          nrow = 2)"
  },
  {
    "objectID": "Hand-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#eda-using-choropleth-map",
    "href": "Hand-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#eda-using-choropleth-map",
    "title": "Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "EDA using choropleth map",
    "text": "EDA using choropleth map\nJoining geospatial data with aspatial data. We will combine both geospatial and aspatial data sets. This will be performed by using the left_join function of dplyr package. The shan_sf simple feature data.frame will be used as the base data object and the ict_derived data.frame will be used as the join table.\nThe code chunks below is used to perform the task. The unique identifier used to join both data objects is TS_PCODE.(common variable in both the data frames)\n\nshan_sf <- left_join(shan_sf, \n                     ict_derived, \n                     by=c(\"TS_PCODE\"=\"TS_PCODE\"))\n\n\nPreparing Choropleth map\nChoropleth map is plotted to visualize distribution of Radio penetration rate of Shan State at township level.\nThe code chunks below are used to prepare the choroplethby using the qtm() function of tmap package.\n\nqtm(shan_sf, \"RADIO_PR\")\n\n\n\n\nIn order to reveal the distribution shown in the choropleth map above are bias to the underlying total number of households at the townships, we will create two choropleth maps, one for the total number of households (i.e. TT_HOUSEHOLDS.map) and one for the total number of household with Radio (RADIO.map) by using the code chunk below.\n\nTT_HOUSEHOLDS.map <- tm_shape(shan_sf) + \n  tm_fill(col = \"TT_HOUSEHOLDS\",\n          n = 5,\n          style = \"jenks\", \n          title = \"Total households\") + \n  tm_borders(alpha = 0.5) \n\nRADIO.map <- tm_shape(shan_sf) + \n  tm_fill(col = \"RADIO\",\n          n = 5,\n          style = \"jenks\",\n          title = \"Number Radio \") + \n  tm_borders(alpha = 0.5) \n\ntmap_arrange(TT_HOUSEHOLDS.map, RADIO.map,\n             asp=NA, ncol=2)\n\n\n\n\nIt can be clearly observed that region with highest total number of households are 2 whereas there is only one region with highest number of radios in households.\nChoropleth maps showing the dsitribution of total number of households and Radio penetration rate by using the code chunk below.\n\ntm_shape(shan_sf) +\n    tm_polygons(c(\"TT_HOUSEHOLDS\", \"RADIO_PR\"),\n                style=\"jenks\") +\n    tm_facets(sync = TRUE, ncol = 2) +\n  tm_legend(legend.position = c(\"right\", \"bottom\"))+\n  tm_layout(outer.margins=0, asp=0)\n\n\n\n\nIt can be observed that with radio penetration rate there are more than 1 region with households having more radios."
  },
  {
    "objectID": "Hand-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#extracting-cluster-variables",
    "href": "Hand-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#extracting-cluster-variables",
    "title": "Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "Extracting Cluster Variables",
    "text": "Extracting Cluster Variables\nThe code chunk below will be used to extract the clustering variables from the shan_sf simple feature object into data.frame.\n\ncluster_vars <- shan_sf %>%\n  st_set_geometry(NULL) %>%\n  select(\"TS.x\", \"RADIO_PR\", \"TV_PR\", \"LLPHONE_PR\", \"MPHONE_PR\", \"COMPUTER_PR\")\nhead(cluster_vars,10)\n\n        TS.x RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\n1    Mongmit 286.1852 554.1313   35.30618  260.6944    12.15939\n2    Pindaya 417.4647 505.1300   19.83584  162.3917    12.88190\n3    Ywangan 484.5215 260.5734   11.93591  120.2856     4.41465\n4   Pinlaung 231.6499 541.7189   28.54454  249.4903    13.76255\n5     Mabein 449.4903 708.6423   72.75255  392.6089    16.45042\n6      Kalaw 280.7624 611.6204   42.06478  408.7951    29.63160\n7      Pekon 318.6118 535.8494   39.83270  214.8476    18.97032\n8   Lawksawk 387.1017 630.0035   31.51366  320.5686    21.76677\n9  Nawnghkio 349.3359 547.9456   38.44960  323.0201    15.76465\n10   Kyaukme 210.9548 601.1773   39.58267  372.4930    30.94709\n\n\nNOTE: Variable INTERNET_PR is not included because it is highly correlated with variable COMPUTER_PR. Next, we need to change the rows by township name instead of row number by using the code chunk below\n\nrow.names(cluster_vars) <- cluster_vars$\"TS.x\"\nhead(cluster_vars,10)\n\n               TS.x RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\nMongmit     Mongmit 286.1852 554.1313   35.30618  260.6944    12.15939\nPindaya     Pindaya 417.4647 505.1300   19.83584  162.3917    12.88190\nYwangan     Ywangan 484.5215 260.5734   11.93591  120.2856     4.41465\nPinlaung   Pinlaung 231.6499 541.7189   28.54454  249.4903    13.76255\nMabein       Mabein 449.4903 708.6423   72.75255  392.6089    16.45042\nKalaw         Kalaw 280.7624 611.6204   42.06478  408.7951    29.63160\nPekon         Pekon 318.6118 535.8494   39.83270  214.8476    18.97032\nLawksawk   Lawksawk 387.1017 630.0035   31.51366  320.5686    21.76677\nNawnghkio Nawnghkio 349.3359 547.9456   38.44960  323.0201    15.76465\nKyaukme     Kyaukme 210.9548 601.1773   39.58267  372.4930    30.94709\n\n\nNow, we will delete the TS.x field by using the code chunk below.\n\nshan_ict <- select(cluster_vars, c(2:6))\nhead(shan_ict, 10)\n\n          RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\nMongmit   286.1852 554.1313   35.30618  260.6944    12.15939\nPindaya   417.4647 505.1300   19.83584  162.3917    12.88190\nYwangan   484.5215 260.5734   11.93591  120.2856     4.41465\nPinlaung  231.6499 541.7189   28.54454  249.4903    13.76255\nMabein    449.4903 708.6423   72.75255  392.6089    16.45042\nKalaw     280.7624 611.6204   42.06478  408.7951    29.63160\nPekon     318.6118 535.8494   39.83270  214.8476    18.97032\nLawksawk  387.1017 630.0035   31.51366  320.5686    21.76677\nNawnghkio 349.3359 547.9456   38.44960  323.0201    15.76465\nKyaukme   210.9548 601.1773   39.58267  372.4930    30.94709"
  },
  {
    "objectID": "Hand-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#data-standardization",
    "href": "Hand-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#data-standardization",
    "title": "Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "Data Standardization",
    "text": "Data Standardization\nIn general, multiple variables will be used in cluster analysis. It is not unusual their values range are different. In order to avoid the cluster analysis result is baised to clustering variables with large values, it is useful to standardise the input variables before performing cluster analysis."
  },
  {
    "objectID": "Hand-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#min-max-standardization",
    "href": "Hand-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#min-max-standardization",
    "title": "Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "Min-Max Standardization",
    "text": "Min-Max Standardization\nIn the code chunk below, normalize() of heatmaply package is used to stadardisation the clustering variables by using Min-Max method.\n\nshan_ict.std <- normalize(shan_ict)\nsummary(shan_ict.std)\n\n    RADIO_PR          TV_PR          LLPHONE_PR       MPHONE_PR     \n Min.   :0.0000   Min.   :0.0000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.2544   1st Qu.:0.4600   1st Qu.:0.1123   1st Qu.:0.2199  \n Median :0.4097   Median :0.5523   Median :0.1948   Median :0.3846  \n Mean   :0.4199   Mean   :0.5416   Mean   :0.2703   Mean   :0.3972  \n 3rd Qu.:0.5330   3rd Qu.:0.6750   3rd Qu.:0.3746   3rd Qu.:0.5608  \n Max.   :1.0000   Max.   :1.0000   Max.   :1.0000   Max.   :1.0000  \n  COMPUTER_PR     \n Min.   :0.00000  \n 1st Qu.:0.09598  \n Median :0.17607  \n Mean   :0.23692  \n 3rd Qu.:0.29868  \n Max.   :1.00000  \n\n\nWe can observe that Range of Min-Max standardized clustering variables are 0-1 now.\nUsing scale(), Z-Score standardization can be performed so easily. Below code chunk is used.\n\nshan_ict.z <- scale(shan_ict)\ndescribe(shan_ict.z)\n\n            vars  n mean sd median trimmed  mad   min  max range  skew kurtosis\nRADIO_PR       1 55    0  1  -0.04   -0.06 0.94 -1.85 2.55  4.40  0.48    -0.27\nTV_PR          2 55    0  1   0.05    0.04 0.78 -2.47 2.09  4.56 -0.38    -0.23\nLLPHONE_PR     3 55    0  1  -0.33   -0.15 0.68 -1.19 3.20  4.39  1.37     1.49\nMPHONE_PR      4 55    0  1  -0.05   -0.06 1.01 -1.58 2.40  3.98  0.48    -0.34\nCOMPUTER_PR    5 55    0  1  -0.26   -0.18 0.64 -1.03 3.31  4.34  1.80     2.96\n              se\nRADIO_PR    0.13\nTV_PR       0.13\nLLPHONE_PR  0.13\nMPHONE_PR   0.13\nCOMPUTER_PR 0.13\n\n\nNOTE: The mean and standard deviation of the Z-score standardised clustering variables are 0 and 1 respectively.\ndescribe() provides standard deviation unlike summary().\nWarning: Z-score standardisation method should only be used if we would assume all variables come from some normal distribution."
  },
  {
    "objectID": "Hand-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#visualizing-the-standardized-clustering-variables",
    "href": "Hand-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#visualizing-the-standardized-clustering-variables",
    "title": "Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "Visualizing the standardized clustering variables",
    "text": "Visualizing the standardized clustering variables\nThe code chunk below plot the scaled Radio_PR field.\n\nr <- ggplot(data=ict_derived, \n             aes(x= `RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\nshan_ict_s_df <- as.data.frame(shan_ict.std)\ns <- ggplot(data=shan_ict_s_df, \n       aes(x=`RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light pink\") +\n  ggtitle(\"Min-Max Standardisation\")\n\nshan_ict_z_df <- as.data.frame(shan_ict.z)\nz <- ggplot(data=shan_ict_z_df, \n       aes(x=`RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light green\") +\n  ggtitle(\"Z-score Standardisation\")\n\nggarrange(r, s, z,\n          ncol = 3,\n          nrow = 1)\n\n\n\n\nNotice that the overall distribution of the clustering variables will change after the data standardisation. Hence, it is advisible NOT to perform data standardisation if the values range of the clustering variables are not very large."
  },
  {
    "objectID": "Hand-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#computing-proximity-matrix",
    "href": "Hand-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#computing-proximity-matrix",
    "title": "Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "Computing Proximity Matrix",
    "text": "Computing Proximity Matrix\nWe will compute proximity matrix using dist() in R.\ndist() supports six distance proximity calculations, they are: euclidean, maximum, manhattan, canberra, binary and minkowski. The default is euclidean proximity matrix.\nThe code chunk below is used to compute the proximity matrix using euclidean method.\n\nproxmat <- dist(shan_ict, method = 'euclidean')"
  },
  {
    "objectID": "Hand-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#computing-hierarchical-clustering",
    "href": "Hand-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#computing-hierarchical-clustering",
    "title": "Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "Computing Hierarchical Clustering",
    "text": "Computing Hierarchical Clustering\nIn this exercise, hclust() will be used for hierarchical clustering.\nhclust() employed agglomeration method to compute the cluster. Eight clustering algorithms are supported, they are: ward.D, ward.D2, single, complete, average(UPGMA), mcquitty(WPGMA), median(WPGMC) and centroid(UPGMC).\nIn the code chunk below, D.Ward method is performed.The hierarchical clustering output is stored in an object of class hclust which describes the tree produced by the clustering process.\n\nhclust_ward <- hclust(proxmat, method = 'ward.D')\n\nPlot the tree by using plot() of R Graphics as shown in the code chunk below.\n\nplot(hclust_ward, cex = 0.6)"
  },
  {
    "objectID": "Hand-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#selecting-the-optimal-clustering-algorithm",
    "href": "Hand-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#selecting-the-optimal-clustering-algorithm",
    "title": "Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "Selecting the optimal clustering algorithm",
    "text": "Selecting the optimal clustering algorithm\nThe issue of identifying stronger clustering structure can be resolved using agnes() function of clusterpackage. It functions like hclus(), however, with the agnes() function you can also get the agglomerative coefficient, which measures the amount of clustering structure found (values closer to 1 suggest strong clustering structure).\nThe code chunk below will be used to compute the agglomerative coefficients of all hierarchical clustering algorithms.\n\nm <- c( \"average\", \"single\", \"complete\", \"ward\")\nnames(m) <- c( \"average\", \"single\", \"complete\", \"ward\")\n\nac <- function(x) {\n  agnes(shan_ict, method = x)$ac\n}\n\nmap_dbl(m, ac)\n\n  average    single  complete      ward \n0.8131144 0.6628705 0.8950702 0.9427730 \n\n\nWith reference to the output above, we can see that Ward’s method provides the strongest clustering structure among the four methods assessed. Hence, in the subsequent analysis, only Ward’s method will be used."
  },
  {
    "objectID": "Hand-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#determining-optimal-clusters",
    "href": "Hand-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#determining-optimal-clusters",
    "title": "Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "Determining Optimal Clusters",
    "text": "Determining Optimal Clusters\nAnother technical challenge face by data analyst in performing clustering analysis is to determine the optimal clusters to retain.\nThere are three commonly used methods to determine the optimal clusters, they are:\n\nElbow Method\nAverage Silhouette Method\nGap Statistics Method\n\n\nGap Statistic Method\nThis method compares the total within intra-cluster variation for different values of k with their expected values under null reference distribution of the data. The estimate of the optimal clusters will be value that maximize the gap statistic (i.e., that yields the largest gap statistic). This means that the clustering structure is far away from the random uniform distribution of points.\nTo compute the gap statistic, clusGap() of cluster package will be used.\n\nset.seed(12345)\ngap_stat <- clusGap(shan_ict, \n                    FUN = hcut, \n                    nstart = 25, \n                    K.max = 10, \n                    B = 50)\n# Print the result\nprint(gap_stat, method = \"firstmax\")\n\nClustering Gap statistic [\"clusGap\"] from call:\nclusGap(x = shan_ict, FUNcluster = hcut, K.max = 10, B = 50, nstart = 25)\nB=50 simulated reference sets, k = 1..10; spaceH0=\"scaledPCA\"\n --> Number of clusters (method 'firstmax'): 1\n          logW   E.logW       gap     SE.sim\n [1,] 8.407129 8.680794 0.2736651 0.04460994\n [2,] 8.130029 8.350712 0.2206824 0.03880130\n [3,] 7.992265 8.202550 0.2102844 0.03362652\n [4,] 7.862224 8.080655 0.2184311 0.03784781\n [5,] 7.756461 7.978022 0.2215615 0.03897071\n [6,] 7.665594 7.887777 0.2221833 0.03973087\n [7,] 7.590919 7.806333 0.2154145 0.04054939\n [8,] 7.526680 7.731619 0.2049390 0.04198644\n [9,] 7.458024 7.660795 0.2027705 0.04421874\n[10,] 7.377412 7.593858 0.2164465 0.04540947\n\n\nAlso note that the hcut function used is from factoextra package.\nNext, we can visualise the plot by using fviz_gap_stat() of factoextra package.\n\nfviz_gap_stat(gap_stat)\n\n\n\n\nOBSERVATIONS:With reference to the gap statistic graph above, the recommended number of cluster to retain is 1. However, it is not logical to retain only one cluster. By examine the gap statistic graph, the 6-cluster gives the largest gap statistic and should be the next best cluster to pick."
  },
  {
    "objectID": "Hand-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#interpreting-the-dendrograms",
    "href": "Hand-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#interpreting-the-dendrograms",
    "title": "Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "Interpreting the dendrograms",
    "text": "Interpreting the dendrograms\nIn the dendrogram displayed above, each leaf corresponds to one observation. As we move up the tree, observations that are similar to each other are combined into branches, which are themselves fused at a higher height.\nThe height of the fusion, provided on the vertical axis, indicates the (dis)similarity between two observations. The higher the height of the fusion, the less similar the observations are. Note that, conclusions about the proximity of two observations can be drawn only based on the height where branches containing those two observations first are fused. We cannot use the proximity of two observations along the horizontal axis as a criteria of their similarity.\nIt’s also possible to draw the dendrogram with a border around the selected clusters by using rect.hclust() of R stats. The argument border is used to specify the border colors for the rectangles.\n\nplot(hclust_ward, cex = 0.6)\nrect.hclust(hclust_ward, \n            k = 6, \n            border = 2:5)"
  },
  {
    "objectID": "Hand-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#visually-driven-hierarchical-clustering-analysis",
    "href": "Hand-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#visually-driven-hierarchical-clustering-analysis",
    "title": "Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "Visually-driven hierarchical clustering analysis",
    "text": "Visually-driven hierarchical clustering analysis\nUsing heatmaply() package, visually driven hierarchical clustering analysis is performed. With heatmaply, we are able to build both highly interactive cluster heatmap or static cluster heatmap.\n\nTransforming the data frame into a matrix\nTo make heatmap data should me in matrix format.The code chunk below will be used to transform shan_ict data frame into a data matrix.\n\nshan_ict_mat <- data.matrix(shan_ict)\n\n\n\nPlotting interactive cluster heatmap using heatmaply()\nIn the code chunk below, the heatmaply() of heatmaply package is used to build an interactive cluster heatmap.\n\nheatmaply(normalize(shan_ict_mat),\n          Colv=NA,\n          dist_method = \"euclidean\",\n          hclust_method = \"ward.D\",\n          seriate = \"OLO\",\n          colors = Blues,\n          k_row = 6,\n          margins = c(NA,200,60,NA),\n          fontsize_row = 4,\n          fontsize_col = 5,\n          main=\"Geographic Segmentation of Shan State by ICT indicators\",\n          xlab = \"ICT Indicators\",\n          ylab = \"Townships of Shan State\"\n          )"
  },
  {
    "objectID": "Hand-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#section",
    "href": "Hand-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#section",
    "title": "Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "",
    "text": "Mapping the cluster formed\nFrom dendrogram , we decided to retain only 6 clusters\ncutree() of R Base will be used in the code chunk below to derive a 6-cluster model.\n\ngroups <- as.factor(cutree(hclust_ward, k=6))\n\nIn order to visualize the clusters, the groups object need to be appended onto shan_sf simple feature object.\nThe code chunk below form the join in three steps:\n\nthe groups list object will be converted into a matrix;\ncbind() is used to append groups matrix onto shan_sf to produce an output simple feature object called shan_sf_cluster; and\nrename of dplyr package is used to rename as.matrix.groups field as CLUSTER.\n\n\nshan_sf_cluster <- cbind(shan_sf, as.matrix(groups)) %>%\n  rename(`CLUSTER`=`as.matrix.groups.`)\n\nUsing the below code chunk, choropleth map is plotted\n\nqtm(shan_sf_cluster, \"CLUSTER\")\n\n\n\n\nThe choropleth map above reveals the clusters are very fragmented. The is one of the major limitation when non-spatial clustering algorithm such as hierarchical cluster analysis method is used."
  },
  {
    "objectID": "Hand-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#converting-into-spatial-polygon-data-frames",
    "href": "Hand-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#converting-into-spatial-polygon-data-frames",
    "title": "Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "Converting into Spatial Polygon Data frames",
    "text": "Converting into Spatial Polygon Data frames\nFirst, we need to convert “shan_sf” into spatial data frame. This is because SKATER function only support sp objects such as SpatialPolygonDataFrame.\nThe code chunk below is process to covert the data set into spatial data frame\n\nshan_sp <- as_Spatial(shan_sf)\nshan_sp\n\nclass       : SpatialPolygonsDataFrame \nfeatures    : 55 \nextent      : 96.15107, 101.1699, 19.29932, 24.15907  (xmin, xmax, ymin, ymax)\ncrs         : +proj=longlat +datum=WGS84 +no_defs \nvariables   : 30\nnames       : OBJECTID,           ST, ST_PCODE,     DT.x, DT_PCODE.x,    TS.x,  TS_PCODE,               ST_2,         LABEL2, SELF_ADMIN, ST_RG, T_NAME_WIN,  T_NAME_M3,          AREA, DT_PCODE.y, ... \nmin values  :        0,  Shan (East),   MMR014,   Hopang, MMR014D001,  Hopang, MMR014001,  Shan State (East),  Hopang\n24637,       Danu, State,      &GmiH,      ကျိုင်းတုံ, 629.024962737, MMR014D001, ... \nmax values  :      268, Shan (South),   MMR016, Taunggyi, MMR016D003, Ywangan, MMR016011, Shan State (South), Ywangan\n76933,         Wa, State,     z,fcHk,        ဟိုပုံး, 6027.67295439, MMR016D004, ..."
  },
  {
    "objectID": "Hand-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#computing-neighbor-list",
    "href": "Hand-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#computing-neighbor-list",
    "title": "Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "Computing Neighbor List",
    "text": "Computing Neighbor List\nUsing, “ply2nd()” of spdep  package of R, we will compute neighbor list from polygon list.\n\nshan.nb <- poly2nb(shan_sp)\nsummary(shan.nb)\n\nNeighbour list object:\nNumber of regions: 55 \nNumber of nonzero links: 264 \nPercentage nonzero weights: 8.727273 \nAverage number of links: 4.8 \nLink number distribution:\n\n 2  3  4  5  6  7  8  9 \n 5  9  7 21  4  3  5  1 \n5 least connected regions:\n3 5 7 9 47 with 2 links\n1 most connected region:\n8 with 9 links\n\n\nFrom the summary report above, it can be observed there are total of 55 regions. There are 5 regions with least number of neighbors, 2 links and 1 most connected region with 9 neighbors.\nWe can plot the neighbours list on shan_sp by using the code chunk below. Since we now can plot the community area boundaries as well, we plot this graph on top of the map.\n\nplot(shan_sp, \n     border=grey(.5))   #gives the boundaries \nplot(shan.nb, \n     coordinates(shan_sp), #coordinates are used to extract centroid \n     col=\"blue\", \n     add=TRUE)          #Plot of neighbor list object \n\n\n\n\nNote that if you plot the network first and then the boundaries, some of the areas will be clipped. This is because the plotting area is determined by the characteristics of the first plot. In this example, because the boundary map extends further than the graph, we plot it first."
  },
  {
    "objectID": "Hand-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#computing-minimum-spanning-trees",
    "href": "Hand-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#computing-minimum-spanning-trees",
    "title": "Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "Computing minimum spanning trees",
    "text": "Computing minimum spanning trees\n\nCalculating the edge costs\nCost of each edge is computed using “nbcosts()” of spdep package.It is the distance between it nodes. This function compute this distance using a data.frame with observations vector in each node.\nThe code chunk below is used to compute the cost of each edge.\n\nlcosts <- nbcosts(shan.nb, shan_ict)\n\nFor each observation, it is the notion of a generalised weight for a spatial weights matrix.\nNext, we will convert the neighbour list to a list weights object by specifying the just computed lcosts as the weights.\nIn order to achieve this, nb2listw() of spdep package is used as shown in the code chunk below.\nNote that we specify the style as B to make sure the cost values are not row-standardised.\n\nshan.w <- nb2listw(shan.nb, \n                   lcosts, \n                   style=\"B\")\nsummary(shan.w)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 55 \nNumber of nonzero links: 264 \nPercentage nonzero weights: 8.727273 \nAverage number of links: 4.8 \nLink number distribution:\n\n 2  3  4  5  6  7  8  9 \n 5  9  7 21  4  3  5  1 \n5 least connected regions:\n3 5 7 9 47 with 2 links\n1 most connected region:\n8 with 9 links\n\nWeights style: B \nWeights constants summary:\n   n   nn       S0       S1        S2\nB 55 3025 76267.65 58260785 522016004\n\n\nFrom the above summary report, it can be observed that for each region there on a average of 5 neighbors."
  },
  {
    "objectID": "Hand-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#computing-minimum-spanning-tree",
    "href": "Hand-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#computing-minimum-spanning-tree",
    "title": "Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "Computing Minimum spanning tree",
    "text": "Computing Minimum spanning tree\nUsing, “mstree()” of spdep package the minimum spanning tree is computed.\n\nshan.mst <- mstree(shan.w)\n\nAfter computing the MST, we can check its class and dimension by using the code chunk below.\n\nclass(shan.mst)\n\n[1] \"mst\"    \"matrix\"\n\n\n\ndim(shan.mst)\n\n[1] 54  3\n\n\nNote that the dimension is 54 and not 55. This is because the minimum spanning tree consists on n-1 edges (links) in order to traverse all the nodes.\nWe can display the content of shan.mst by using head() as shown in the code chunk below.\n\nhead(shan.mst)\n\n     [,1] [,2]      [,3]\n[1,]   31   25 229.44658\n[2,]   25   10 163.95741\n[3,]   10    1 144.02475\n[4,]   10    9 157.04230\n[5,]    9    8  90.82891\n[6,]    8    6 140.01101\n\n\nTo observe numbers of the nodes in addition to the edge, plot method is used.\nUsing the code chunk below, we can see how the initial neighbor list is simplified to just one edge connecting each of the nodes, while passing through all the nodes.\n\nplot(shan_sp, border=gray(.5))\nplot.mst(shan.mst, \n         coordinates(shan_sp), \n         col=\"red\", \n         cex.lab=0.7, \n         cex.circles=0.005, \n         add=TRUE)"
  },
  {
    "objectID": "Hand-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#computing-spatially-constrained-clustering-using-skater-method",
    "href": "Hand-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#computing-spatially-constrained-clustering-using-skater-method",
    "title": "Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "Computing spatially constrained clustering using SKATER method",
    "text": "Computing spatially constrained clustering using SKATER method\nThe code chunk below compute the spatially constrained cluster using skater() of spdep package.\n\nclust6 <- skater(edges = shan.mst[,1:2], \n                 data = shan_ict, \n                 method = \"euclidean\", \n                 ncuts = 5)\n\nThe skater() takes three mandatory arguments: -\n1. Two columns of the MST matrix (i.e. not the cost),\n2. the data matrix (to update the costs as units are being grouped),\n3. the number of cuts.\nNote: It is set to one less than the number of clusters. So, the value specified is not the number of clusters, but the number of cuts in the graph, one less than the number of clusters.\nThe code chunk below, gives the result of the skater() is an object of class skater.\n\nstr(clust6)\n\nList of 8\n $ groups      : num [1:55] 3 3 6 3 3 3 3 3 3 3 ...\n $ edges.groups:List of 6\n  ..$ :List of 3\n  .. ..$ node: num [1:22] 13 48 54 55 45 37 34 16 25 31 ...\n  .. ..$ edge: num [1:21, 1:3] 48 55 54 37 34 16 45 31 13 13 ...\n  .. ..$ ssw : num 3423\n  ..$ :List of 3\n  .. ..$ node: num [1:18] 47 27 53 38 42 15 41 51 43 32 ...\n  .. ..$ edge: num [1:17, 1:3] 53 15 42 38 41 51 15 27 15 43 ...\n  .. ..$ ssw : num 3759\n  ..$ :List of 3\n  .. ..$ node: num [1:11] 2 6 8 1 36 4 10 9 46 5 ...\n  .. ..$ edge: num [1:10, 1:3] 6 1 8 36 4 6 8 10 10 9 ...\n  .. ..$ ssw : num 1458\n  ..$ :List of 3\n  .. ..$ node: num [1:2] 44 20\n  .. ..$ edge: num [1, 1:3] 44 20 95\n  .. ..$ ssw : num 95\n  ..$ :List of 3\n  .. ..$ node: num 23\n  .. ..$ edge: num[0 , 1:3] \n  .. ..$ ssw : num 0\n  ..$ :List of 3\n  .. ..$ node: num 3\n  .. ..$ edge: num[0 , 1:3] \n  .. ..$ ssw : num 0\n $ not.prune   : NULL\n $ candidates  : int [1:6] 1 2 3 4 5 6\n $ ssto        : num 12613\n $ ssw         : num [1:6] 12613 10977 9962 9540 9123 ...\n $ crit        : num [1:2] 1 Inf\n $ vec.crit    : num [1:55] 1 1 1 1 1 1 1 1 1 1 ...\n - attr(*, \"class\")= chr \"skater\"\n\n\nThe most interesting component of this list structure is the groups vector containing the labels of the cluster to which each observation belongs (as before, the label itself is arbitary). This is followed by a detailed summary for each of the clusters in the edges.groups list. Sum of squares measures are given as ssto for the total and ssw to show the effect of each of the cuts on the overall criterion.\nCluster assignment can be checked using the following code chunk.\n\nccs6 <- clust6$groups\nccs6\n\n [1] 3 3 6 3 3 3 3 3 3 3 2 1 1 1 2 1 1 1 2 4 1 2 5 1 1 1 2 1 2 2 1 2 2 1 1 3 1 2\n[39] 2 2 2 2 2 4 1 3 2 1 1 1 2 1 2 1 1\n\n\nWe can find out how many observations are in each cluster by means of the table command. Parenthetially, we can also find this as the dimension of each vector in the lists contained in edges.groups. For example, the first list has node with dimension 12, which is also the number of observations in the first cluster.\n\ntable(ccs6)\n\nccs6\n 1  2  3  4  5  6 \n22 18 11  2  1  1 \n\n\nPruned tree that shows the five clusters on top of the township area can be plotted using the code chunk below.\n\nplot(shan_sp, border=gray(.5))\nplot(clust6, \n     coordinates(shan_sp), \n     cex.lab=.7,\n     groups.colors=c(\"red\",\"green\",\"blue\", \"brown\", \"pink\"),\n     cex.circles=0.005, \n     add=TRUE)\n\nWarning in segments(coords[id1, 1], coords[id1, 2], coords[id2, 1],\ncoords[id2, : \"add\" is not a graphical parameter\n\nWarning in segments(coords[id1, 1], coords[id1, 2], coords[id2, 1],\ncoords[id2, : \"add\" is not a graphical parameter\n\nWarning in segments(coords[id1, 1], coords[id1, 2], coords[id2, 1],\ncoords[id2, : \"add\" is not a graphical parameter\n\nWarning in segments(coords[id1, 1], coords[id1, 2], coords[id2, 1],\ncoords[id2, : \"add\" is not a graphical parameter"
  },
  {
    "objectID": "Hand-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#a-short-note-about-clustgeo-package",
    "href": "Hand-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#a-short-note-about-clustgeo-package",
    "title": "Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "A short note about ClustGeo package",
    "text": "A short note about ClustGeo package\nClustGeo packages, provides a Ward-like hierarchical clustering algorithm called hclustgeo() including spatial/geographical constraints and is designed to support the need of performing spatially constrained cluster analysis.\nIn the nutshell, the algorithm uses two dissimilarity matrices D0 and D1 along with a mixing parameter alpha, whereby the value of alpha must be a real number between [0, 1]. D0 can be non-Euclidean and the weights of the observations can be non-uniform. It gives the dissimilarities in the attribute/clustering variable space. D1, on the other hand, gives the dissimilarities in the constraint space. The criterion minimised at each stage is a convex combination of the homogeneity criterion calculated with D0 and the homogeneity criterion calculated with D1.\nThe idea is then to determine a value of alpha which increases the spatial contiguity without deteriorating too much the quality of the solution based on the variables of interest. This need is supported by a function called choicealpha()."
  },
  {
    "objectID": "Hand-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#ward-like-hierarchical-clustering-clustgeo",
    "href": "Hand-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#ward-like-hierarchical-clustering-clustgeo",
    "title": "Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "Ward-like hierarchical clustering: ClustGeo",
    "text": "Ward-like hierarchical clustering: ClustGeo\nhclustgeo() is used to perform a typical Ward-like hierarchical clustering.\nThe code chunk below shows the non-spatially constrained hierarchical clustering.\n\nnongeo_cluster <- hclustgeo(proxmat)\nplot(nongeo_cluster, cex = 0.5)\nrect.hclust(nongeo_cluster, \n            k = 6, \n            border = 2:5)\n\n\n\n\n\n\nMapping the clusters formed\nUsing the code chunk below, clusters are mapped\n\ngroups <- as.factor(cutree(nongeo_cluster, k=6))\n\n\nshan_sf_ngeo_cluster <- cbind(shan_sf, as.matrix(groups)) %>%\n  rename(`CLUSTER` = `as.matrix.groups.`)\n\n\nqtm(shan_sf_ngeo_cluster, \"CLUSTER\")"
  },
  {
    "objectID": "Hand-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#spatially-constrained-hierarchical-clustering",
    "href": "Hand-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#spatially-constrained-hierarchical-clustering",
    "title": "Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "Spatially Constrained Hierarchical Clustering",
    "text": "Spatially Constrained Hierarchical Clustering\nSpatial distance matrix will be derived by using st_distance() of sf package before performing spatially constrained hierarchical clustering.\n\ndist <- st_distance(shan_sf, shan_sf)\ndistmat <- as.dist(dist)  #convert the data frame into matrix\n\nNext, choicealpha() will be used to determine a suitable value for the mixing parameter alpha as shown in the code chunk below.\n\ncr <- choicealpha(proxmat, distmat, range.alpha = seq(0, 1, 0.1), K=6, graph = TRUE)\n\n\n\n\n\n\n\nWith reference to the graphs above, alpha = 0.3 will be used as shown in the code chunk below.\n\nclustG <- hclustgeo(proxmat, distmat, alpha = 0.3)\n\n\ngroups <- as.factor(cutree(clustG, k=6)) #derive cluster object \n\n\nshan_sf_Gcluster <- cbind(shan_sf, as.matrix(groups)) %>%\n  rename(`CLUSTER` = `as.matrix.groups.`)\n\n\nqtm(shan_sf_Gcluster, \"CLUSTER\")"
  },
  {
    "objectID": "Hand-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html",
    "href": "Hand-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html",
    "title": "Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "",
    "text": "Geographically weighted regression (GWR) is a spatial statistical technique that takes non-stationary variables into consideration (e.g., climate; demographic factors; physical environment characteristics) and models the local relationships between these independent variables and an outcome of interest (also known as dependent variable).\nIn this hands on exercise, we will learn how to build hedonic pricing model by using the GWR method. The dependent variable is the resale prices of condominium in 2015. The independent variables are divided into either structural and locational."
  },
  {
    "objectID": "Hand-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html#importing-geospatial-data",
    "href": "Hand-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html#importing-geospatial-data",
    "title": "Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "Importing geospatial data",
    "text": "Importing geospatial data\nThe code chunk below is used to import MP_SUBZONE_WEB_PL shapefile by using st_read() of sf packages.\n\nmpsz = st_read(dsn = \"data/geospatial\", layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\Ridh27\\ISSS624\\Hand-on_Ex\\Hands-on_Ex4\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nLearning from above code chunk:\nmpsz is the imported shapefile and it is simple feature object."
  },
  {
    "objectID": "Hand-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html#updating-crs-information",
    "href": "Hand-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html#updating-crs-information",
    "title": "Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "Updating CRS Information",
    "text": "Updating CRS Information\nThe code chunk below updates the newly imported mpsz with the correct ESPG code (i.e. 3414)\n\nmpsz_svy21 <- st_transform(mpsz, 3414)\n\nUsing st_crs() of sf package, we can verify the projection of the newly transformed mpsz_svy21\nThe code chunk below will be used to varify the newly transformed mpsz_svy21.\n\nst_crs(mpsz_svy21)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\nNext, we will reveal the extent of mpsz_svy21 by using st_bbox() of sf package.\n\nst_bbox(mpsz_svy21) #view extent\n\n     xmin      ymin      xmax      ymax \n 2667.538 15748.721 56396.440 50256.334"
  },
  {
    "objectID": "Hand-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html#converting-aspatial-data-frame-into-a-sf-object",
    "href": "Hand-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html#converting-aspatial-data-frame-into-a-sf-object",
    "title": "Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "Converting aspatial data frame into a sf object",
    "text": "Converting aspatial data frame into a sf object\nThe code chunk below converts condo_resale data frame into a simple feature data frame by using st_as_sf() of sf packages.\n\ncondo_resale.sf <- st_as_sf(condo_resale,\n                            coords = c(\"LONGITUDE\", \"LATITUDE\"),\n                            crs=4326) %>%\n  st_transform(crs=3414)\n\n\nhead(condo_resale.sf)  #list contents \n\nSimple feature collection with 6 features and 21 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 22085.12 ymin: 29951.54 xmax: 41042.56 ymax: 34546.2\nProjected CRS: SVY21 / Singapore TM\n# A tibble: 6 × 22\n  POSTCODE SELLI…¹ AREA_…²   AGE PROX_…³ PROX_…⁴ PROX_…⁵ PROX_…⁶ PROX_…⁷ PROX_…⁸\n     <dbl>   <dbl>   <dbl> <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n1   118635 3000000     309    30    7.94   0.166   2.52     6.62   1.77   0.0584\n2   288420 3880000     290    32    6.61   0.280   1.93     7.51   0.545  0.616 \n3   267833 3325000     248    33    6.90   0.429   0.502    6.46   0.378  0.141 \n4   258380 4250000     127     7    4.04   0.395   1.99     4.91   1.68   0.382 \n5   467169 1400000     145    28   11.8    0.119   1.12     6.41   0.565  0.461 \n6   466472 1320000     139    22   10.3    0.125   0.789    5.09   0.781  0.0994\n# … with 12 more variables: PROX_MRT <dbl>, PROX_PARK <dbl>,\n#   PROX_PRIMARY_SCH <dbl>, PROX_TOP_PRIMARY_SCH <dbl>,\n#   PROX_SHOPPING_MALL <dbl>, PROX_SUPERMARKET <dbl>, PROX_BUS_STOP <dbl>,\n#   NO_Of_UNITS <dbl>, FAMILY_FRIENDLY <dbl>, FREEHOLD <dbl>,\n#   LEASEHOLD_99YR <dbl>, geometry <POINT [m]>, and abbreviated variable names\n#   ¹​SELLING_PRICE, ²​AREA_SQM, ³​PROX_CBD, ⁴​PROX_CHILDCARE, ⁵​PROX_ELDERLYCARE,\n#   ⁶​PROX_URA_GROWTH_AREA, ⁷​PROX_HAWKER_MARKET, ⁸​PROX_KINDERGARTEN\n\n\nNote: The ouput is in point feature data frame."
  },
  {
    "objectID": "Hand-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html#stattistical-graphs",
    "href": "Hand-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html#stattistical-graphs",
    "title": "Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "Stattistical Graphs",
    "text": "Stattistical Graphs\nUsing the code chunk below, we will plot the distribution of Selling_Price\n\nggplot(data=condo_resale.sf, aes(x=`SELLING_PRICE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\n\n\n\nThe figure above reveals a right skewed distribution. This means that more condominium units were transacted at relative lower prices.\nThe code chunk below is used to derive a new variable called LOG_SELLING_PRICE by using a log transformation on the variable SELLING_PRICE. It is performed using mutate() of dplyr package.\n\ncondo_resale.sf <- condo_resale.sf %>%\n  mutate(`LOG_SELLING_PRICE` = log(SELLING_PRICE))\n\nUsing the code chunk below, Log_selling_Price is plotted\n\nggplot(data=condo_resale.sf, aes(x=`LOG_SELLING_PRICE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\n\n\n\nNotice that the distribution is relatively less skewed after the transformation."
  },
  {
    "objectID": "Hand-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html#multiple-histogram-plots-distribution-of-variables",
    "href": "Hand-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html#multiple-histogram-plots-distribution-of-variables",
    "title": "Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "Multiple Histogram Plots distribution of variables",
    "text": "Multiple Histogram Plots distribution of variables\nUsing ggarrange() of ggpubr package, multiple histograms will be plotted. The code chunk below is used to create 12 histograms. Then, ggarrange() is used to organised these histogram into a 3 columns by 4 rows small multiple plot.\n\nAREA_SQM <- ggplot(data=condo_resale.sf, aes(x= `AREA_SQM`)) + \n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nAGE <- ggplot(data=condo_resale.sf, aes(x= `AGE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_CBD <- ggplot(data=condo_resale.sf, aes(x= `PROX_CBD`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_CHILDCARE <- ggplot(data=condo_resale.sf, aes(x= `PROX_CHILDCARE`)) + \n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_ELDERLYCARE <- ggplot(data=condo_resale.sf, aes(x= `PROX_ELDERLYCARE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_URA_GROWTH_AREA <- ggplot(data=condo_resale.sf, \n                               aes(x= `PROX_URA_GROWTH_AREA`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_HAWKER_MARKET <- ggplot(data=condo_resale.sf, aes(x= `PROX_HAWKER_MARKET`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_KINDERGARTEN <- ggplot(data=condo_resale.sf, aes(x= `PROX_KINDERGARTEN`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_MRT <- ggplot(data=condo_resale.sf, aes(x= `PROX_MRT`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_PARK <- ggplot(data=condo_resale.sf, aes(x= `PROX_PARK`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_PRIMARY_SCH <- ggplot(data=condo_resale.sf, aes(x= `PROX_PRIMARY_SCH`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_TOP_PRIMARY_SCH <- ggplot(data=condo_resale.sf, \n                               aes(x= `PROX_TOP_PRIMARY_SCH`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nggarrange(AREA_SQM, AGE, PROX_CBD, PROX_CHILDCARE, PROX_ELDERLYCARE, \n          PROX_URA_GROWTH_AREA, PROX_HAWKER_MARKET, PROX_KINDERGARTEN, PROX_MRT,\n          PROX_PARK, PROX_PRIMARY_SCH, PROX_TOP_PRIMARY_SCH,  \n          ncol = 3, nrow = 4)"
  },
  {
    "objectID": "Hand-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html#drawing-statistical-point-map",
    "href": "Hand-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html#drawing-statistical-point-map",
    "title": "Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "Drawing Statistical Point Map",
    "text": "Drawing Statistical Point Map\nIn this section, using tmap, we will reveal the geospatial distribution condominium resale prices in Singapore.\n\ntmap_mode(\"view\")  #interactive mode\n\ntmap mode set to interactive viewing\n\ntmap_options(check.and.fix = TRUE)\ntm_shape(mpsz_svy21)+\n  tm_polygons() +\ntm_shape(condo_resale.sf) +  \n  tm_dots(col = \"SELLING_PRICE\",\n          alpha = 0.6,\n          style=\"quantile\") +\n  tm_view(set.zoom.limits = c(11,14))\n\nWarning: The shape mpsz_svy21 is invalid (after reprojection). See\nsf::st_is_valid\n\n\n\n\n\n\n\nset.zoom.limits argument of tm_view() sets the minimum and maximum zoom level to 11 and 14 respectively.\nBefore moving on to the next section, the code below will be used to turn R display into plot mode.\n\ntmap_mode(\"plot\")  #static mode\n\ntmap mode set to plotting\n\ntmap_options(check.and.fix = TRUE)\ntm_shape(mpsz_svy21)+\n  tm_polygons() +\ntm_shape(condo_resale.sf) +  \n  tm_dots(col = \"SELLING_PRICE\",\n          alpha = 0.6,\n          style=\"quantile\") +\n  tm_view(set.zoom.limits = c(11,14))\n\nWarning: The shape mpsz_svy21 is invalid. See sf::st_is_valid\n\n\n\n\n\nNOTE: “set.zoom.limit” is used to set the limit of zoom in and zoom out of interactive map."
  },
  {
    "objectID": "In-class_Ex/In-Class_Ex1/In-Class_Ex1.html",
    "href": "In-class_Ex/In-Class_Ex1/In-Class_Ex1.html",
    "title": "Spatial Weights and Applications",
    "section": "",
    "text": "In this In-Class Ex1 , we will learn how to compute spatial weights using R. Following will be the learning at the end of this module:\n\nImporting spatial and csv file data: sf and readr package\nRelational join : dplyr package\nSpatial weight computation: spdep package\nCalculation of spatially lagged variables: spdep package"
  },
  {
    "objectID": "In-class_Ex/In-Class_Ex1/In-Class_Ex1.html#importing-hunan-data",
    "href": "In-class_Ex/In-Class_Ex1/In-Class_Ex1.html#importing-hunan-data",
    "title": "Spatial Weights and Applications",
    "section": "Importing Hunan Data",
    "text": "Importing Hunan Data\n\nhunan = st_read(dsn=\"data/geospatial/\", \n                layer=\"Hunan\")\n\nReading layer `Hunan' from data source \n  `C:\\Ridh27\\ISSS624\\In-class_Ex\\In-Class_Ex1\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84"
  },
  {
    "objectID": "In-class_Ex/In-Class_Ex1/In-Class_Ex1.html#importing-data-attribute-in-csv",
    "href": "In-class_Ex/In-Class_Ex1/In-Class_Ex1.html#importing-data-attribute-in-csv",
    "title": "Spatial Weights and Applications",
    "section": "Importing data attribute in csv",
    "text": "Importing data attribute in csv\n\nhunan2012= read_csv(\"data/aspatial/Hunan_2012.csv\")\n\nRows: 88 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): County, City\ndbl (27): avg_wage, deposite, FAI, Gov_Rev, Gov_Exp, GDP, GDPPC, GIO, Loan, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "In-class_Ex/In-Class_Ex1/In-Class_Ex1.html#perform-relational-join",
    "href": "In-class_Ex/In-Class_Ex1/In-Class_Ex1.html#perform-relational-join",
    "title": "Spatial Weights and Applications",
    "section": "Perform relational join",
    "text": "Perform relational join\nUpdate the attribute table of hunan’s SpatialPolygonsDataFrame with the attribute fields of hunan2012 dataframe\n\nhunan <- left_join(hunan,hunan2012)\n\nJoining, by = \"County\""
  },
  {
    "objectID": "In-class_Ex/In-Class_Ex1/In-Class_Ex1.html#computing-queen-contiguity-based-neighbours",
    "href": "In-class_Ex/In-Class_Ex1/In-Class_Ex1.html#computing-queen-contiguity-based-neighbours",
    "title": "Spatial Weights and Applications",
    "section": "Computing (QUEEN) contiguity based neighbours",
    "text": "Computing (QUEEN) contiguity based neighbours\nQueen contiguity weight matrix:\n\nwm_q <- poly2nb(hunan, queen=TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\nThe summary report is as follow:\n\nNumber of regions: 88 area units\nThere is only 1 region with maximum number neighbors, 11 links\nThere are 2 regions with minimum number of neighbors, 1 link.\n\nFor each polygon in our polygon object, wm_q lists all neighboring polygons:\n\nwm_q[[1]]\n\n[1]  2  3  4 57 85\n\n\nAbove code chunk indicates polygon 1 has 5 neighbors. TO get the name of country that depicts polygon 1 following code chunk is used:\n\nhunan$County[1]\n\n[1] \"Anxiang\"\n\n\nTo reveal the neighbors of “Anxiang”, following code chunk is used:\n\nhunan$NAME_3[c(2,3,4,57,85)]\n\n[1] \"Hanshou\" \"Jinshi\"  \"Li\"      \"Nan\"     \"Taoyuan\"\n\n\nGDPPC for the above 5 countries can be retrieved using following code chunk:\n\nnb1 <- wm_q[[1]]\nnb1 <- hunan$GDPPC[nb1]\nnb1\n\n[1] 20981 34592 24473 21311 22879\n\n\nTo get the complete weight matrix, str() function is used:\n\nstr(wm_q,11)\n\nList of 88\n $ : int [1:5] 2 3 4 57 85\n $ : int [1:5] 1 57 58 78 85\n $ : int [1:4] 1 4 5 85\n $ : int [1:4] 1 3 5 6\n $ : int [1:4] 3 4 6 85\n $ : int [1:5] 4 5 69 75 85\n $ : int [1:4] 67 71 74 84\n $ : int [1:7] 9 46 47 56 78 80 86\n $ : int [1:6] 8 66 68 78 84 86\n $ : int [1:8] 16 17 19 20 22 70 72 73\n $ : int [1:3] 14 17 72\n $ : int [1:5] 13 60 61 63 83\n $ : int [1:4] 12 15 60 83\n $ : int [1:3] 11 15 17\n $ : int [1:4] 13 14 17 83\n $ : int [1:5] 10 17 22 72 83\n $ : int [1:7] 10 11 14 15 16 72 83\n $ : int [1:5] 20 22 23 77 83\n $ : int [1:6] 10 20 21 73 74 86\n $ : int [1:7] 10 18 19 21 22 23 82\n $ : int [1:5] 19 20 35 82 86\n $ : int [1:5] 10 16 18 20 83\n $ : int [1:7] 18 20 38 41 77 79 82\n $ : int [1:5] 25 28 31 32 54\n $ : int [1:5] 24 28 31 33 81\n $ : int [1:4] 27 33 42 81\n $ : int [1:3] 26 29 42\n $ : int [1:5] 24 25 33 49 54\n $ : int [1:3] 27 37 42\n $ : int 33\n $ : int [1:8] 24 25 32 36 39 40 56 81\n $ : int [1:8] 24 31 50 54 55 56 75 85\n $ : int [1:5] 25 26 28 30 81\n $ : int [1:3] 36 45 80\n $ : int [1:6] 21 41 47 80 82 86\n $ : int [1:6] 31 34 40 45 56 80\n $ : int [1:4] 29 42 43 44\n $ : int [1:4] 23 44 77 79\n $ : int [1:5] 31 40 42 43 81\n $ : int [1:6] 31 36 39 43 45 79\n $ : int [1:6] 23 35 45 79 80 82\n $ : int [1:7] 26 27 29 37 39 43 81\n $ : int [1:6] 37 39 40 42 44 79\n $ : int [1:4] 37 38 43 79\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:3] 8 47 86\n $ : int [1:5] 8 35 46 80 86\n $ : int [1:5] 50 51 52 53 55\n $ : int [1:4] 28 51 52 54\n $ : int [1:5] 32 48 52 54 55\n $ : int [1:3] 48 49 52\n $ : int [1:5] 48 49 50 51 54\n $ : int [1:3] 48 55 75\n $ : int [1:6] 24 28 32 49 50 52\n $ : int [1:5] 32 48 50 53 75\n $ : int [1:7] 8 31 32 36 78 80 85\n $ : int [1:6] 1 2 58 64 76 85\n $ : int [1:5] 2 57 68 76 78\n $ : int [1:4] 60 61 87 88\n $ : int [1:4] 12 13 59 61\n $ : int [1:7] 12 59 60 62 63 77 87\n $ : int [1:3] 61 77 87\n $ : int [1:4] 12 61 77 83\n $ : int [1:2] 57 76\n $ : int 76\n $ : int [1:5] 9 67 68 76 84\n $ : int [1:4] 7 66 76 84\n $ : int [1:5] 9 58 66 76 78\n $ : int [1:3] 6 75 85\n $ : int [1:3] 10 72 73\n $ : int [1:3] 7 73 74\n $ : int [1:5] 10 11 16 17 70\n $ : int [1:5] 10 19 70 71 74\n $ : int [1:6] 7 19 71 73 84 86\n $ : int [1:6] 6 32 53 55 69 85\n $ : int [1:7] 57 58 64 65 66 67 68\n $ : int [1:7] 18 23 38 61 62 63 83\n $ : int [1:7] 2 8 9 56 58 68 85\n $ : int [1:7] 23 38 40 41 43 44 45\n $ : int [1:8] 8 34 35 36 41 45 47 56\n $ : int [1:6] 25 26 31 33 39 42\n $ : int [1:5] 20 21 23 35 41\n $ : int [1:9] 12 13 15 16 17 18 22 63 77\n $ : int [1:6] 7 9 66 67 74 86\n $ : int [1:11] 1 2 3 5 6 32 56 57 69 75 ...\n $ : int [1:9] 8 9 19 21 35 46 47 74 84\n $ : int [1:4] 59 61 62 88\n $ : int [1:2] 59 87\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language poly2nb(pl = hunan, queen = TRUE)\n - attr(*, \"type\")= chr \"queen\"\n - attr(*, \"sym\")= logi TRUE"
  },
  {
    "objectID": "In-class_Ex/In-Class_Ex1/In-Class_Ex1.html#computing-rook-contiguity-based-neighbors",
    "href": "In-class_Ex/In-Class_Ex1/In-Class_Ex1.html#computing-rook-contiguity-based-neighbors",
    "title": "Spatial Weights and Applications",
    "section": "Computing (ROOK) contiguity based neighbors",
    "text": "Computing (ROOK) contiguity based neighbors\nRook contiguity weight matrix:\n\nwm_r <- poly2nb(hunan, queen=FALSE)\nsummary(wm_r)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 440 \nPercentage nonzero weights: 5.681818 \nAverage number of links: 5 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 10 \n 2  2 12 20 21 14 11  3  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 10 links\n\n\nSummary of the above Report:\nTotal 88 area units in Hunan. The most connected unit has 10 neighbors and the least connected units,2 units, have 1 neighbor."
  },
  {
    "objectID": "In-class_Ex/In-Class_Ex1/In-Class_Ex1.html#visualizing-contiguity-weights",
    "href": "In-class_Ex/In-Class_Ex1/In-Class_Ex1.html#visualizing-contiguity-weights",
    "title": "Spatial Weights and Applications",
    "section": "Visualizing Contiguity Weights",
    "text": "Visualizing Contiguity Weights\nA connectivity graph takes a point and displays a line to each neighboring point. As we are working with the polygons , therefore we need points to plot the connectivity graph. The most typical method to compute points are by taking polygon centroid.\nWe will calculate these in the sf package before moving onto the graphs. Getting Latitude and Longitude of Polygon Centroids.\nst_centroid on the sf object is little more complicated, therefore, mapping funtion will be used. The mapping function applies a given function to each element of a vector and returns a vector of the same length. Longitude value can be accessed through double bracket notation [[]] and 1. This allows us to get only the longitude, which is the first value in each centroid.\n\nlongitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])\n\nFor latitude, only difference is that we access the second value per each centroid with [[2]].\n\nlatitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\n\nPutting latitude and longitude in the same object:\n\ncoords <- cbind(longitude, latitude)\n\nWe can check first few observations using head():\n\nhead(coords)\n\n     longitude latitude\n[1,]  112.1531 29.44362\n[2,]  112.0372 28.86489\n[3,]  111.8917 29.47107\n[4,]  111.7031 29.74499\n[5,]  111.6138 29.49258\n[6,]  111.0341 29.79863\n\n\n\nPlotting Queen contiguity based neighbors map\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= \"red\")\n\n\n\n\n\n\nPlotting Rook contiguity based neighbors map\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")\n\n\n\n\n\n\nPlotting both Rook and Queen contiguity based neighbor map together:\n\npar(mfrow=c(1,2))\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= \"red\", main=\"Queen Contiguity\")\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\", main=\"Rook Contiguity\")"
  },
  {
    "objectID": "In-class_Ex/In-Class_Ex1/In-Class_Ex1.html#computing-distance-based-neighbors",
    "href": "In-class_Ex/In-Class_Ex1/In-Class_Ex1.html#computing-distance-based-neighbors",
    "title": "Spatial Weights and Applications",
    "section": "Computing distance based neighbors",
    "text": "Computing distance based neighbors\nIn this section, distance weight matrix is computed using dnearneigh() of spdep package of R.\nThe function identifies neighbours of region points by Euclidean distance with a distance band with lower d1= and upper d2= bounds controlled by the bounds= argument. If unprojected coordinates are used and either specified in the coordinates object x or with x as a two column matrix and longlat=TRUE, great circle distances in km will be calculated assuming the WGS84 reference ellipsoid.\n\nDetermine the cut-off distance\nUpper limit of distance is calculated using the following steps:\n\nUsing knearneigh() of spdep, matrix is returned by indices of points belonging to the set of the k nearest neighbours of each other.\nThe returned objected is converted into a neighbours list of class nb with a list of integer vectors containing neighbour region number ids by using knn2nb().\nReturn the length of neighbour relationship edges by using nbdists() of spdep. The function returns in the units of the coordinates if the coordinates are projected, in km otherwise.\nRemove the list structure of the returned object by using unlist().\n\n\n#coords <- coordinates(hunan)\nk1 <- knn2nb(knearneigh(coords))\nk1dists <- unlist(nbdists(k1, coords, longlat = TRUE))\nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n\n\nAccording to summary report, maximum first neighbor distance is 61.79Km, therefore this is used as upper threshold giving certainty that all the units will have at least on neighbor.\n\n\nComputing fixed distance weight matrix\nFixed distance weight matrix is used using dnearneigh().\n\nwm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)\nwm_d62\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \n\n\nAccording to summary report, on an average each region has ~3.6 neighbors. As neighbors cant be in decimal place. Therefore, it can be concluded that neighbors are between 3 and 4 for each unit.\nNext, we will use str() to display the content of wm_d62 weight matrix.\n\nstr(wm_d62)\n\nList of 88\n $ : int [1:5] 3 4 5 57 64\n $ : int [1:4] 57 58 78 85\n $ : int [1:4] 1 4 5 57\n $ : int [1:3] 1 3 5\n $ : int [1:4] 1 3 4 85\n $ : int 69\n $ : int [1:2] 67 84\n $ : int [1:4] 9 46 47 78\n $ : int [1:4] 8 46 68 84\n $ : int [1:4] 16 22 70 72\n $ : int [1:3] 14 17 72\n $ : int [1:5] 13 60 61 63 83\n $ : int [1:4] 12 15 60 83\n $ : int [1:2] 11 17\n $ : int 13\n $ : int [1:4] 10 17 22 83\n $ : int [1:3] 11 14 16\n $ : int [1:3] 20 22 63\n $ : int [1:5] 20 21 73 74 82\n $ : int [1:5] 18 19 21 22 82\n $ : int [1:6] 19 20 35 74 82 86\n $ : int [1:4] 10 16 18 20\n $ : int [1:3] 41 77 82\n $ : int [1:4] 25 28 31 54\n $ : int [1:4] 24 28 33 81\n $ : int [1:4] 27 33 42 81\n $ : int [1:2] 26 29\n $ : int [1:6] 24 25 33 49 52 54\n $ : int [1:2] 27 37\n $ : int 33\n $ : int [1:2] 24 36\n $ : int 50\n $ : int [1:5] 25 26 28 30 81\n $ : int [1:3] 36 45 80\n $ : int [1:6] 21 41 46 47 80 82\n $ : int [1:5] 31 34 45 56 80\n $ : int [1:2] 29 42\n $ : int [1:3] 44 77 79\n $ : int [1:4] 40 42 43 81\n $ : int [1:3] 39 45 79\n $ : int [1:5] 23 35 45 79 82\n $ : int [1:5] 26 37 39 43 81\n $ : int [1:3] 39 42 44\n $ : int [1:2] 38 43\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:5] 8 9 35 47 86\n $ : int [1:5] 8 35 46 80 86\n $ : int [1:5] 50 51 52 53 55\n $ : int [1:4] 28 51 52 54\n $ : int [1:6] 32 48 51 52 54 55\n $ : int [1:4] 48 49 50 52\n $ : int [1:6] 28 48 49 50 51 54\n $ : int [1:2] 48 55\n $ : int [1:5] 24 28 49 50 52\n $ : int [1:4] 48 50 53 75\n $ : int 36\n $ : int [1:5] 1 2 3 58 64\n $ : int [1:5] 2 57 64 66 68\n $ : int [1:3] 60 87 88\n $ : int [1:4] 12 13 59 61\n $ : int [1:5] 12 60 62 63 87\n $ : int [1:4] 61 63 77 87\n $ : int [1:5] 12 18 61 62 83\n $ : int [1:4] 1 57 58 76\n $ : int 76\n $ : int [1:5] 58 67 68 76 84\n $ : int [1:2] 7 66\n $ : int [1:4] 9 58 66 84\n $ : int [1:2] 6 75\n $ : int [1:3] 10 72 73\n $ : int [1:2] 73 74\n $ : int [1:3] 10 11 70\n $ : int [1:4] 19 70 71 74\n $ : int [1:5] 19 21 71 73 86\n $ : int [1:2] 55 69\n $ : int [1:3] 64 65 66\n $ : int [1:3] 23 38 62\n $ : int [1:2] 2 8\n $ : int [1:4] 38 40 41 45\n $ : int [1:5] 34 35 36 45 47\n $ : int [1:5] 25 26 33 39 42\n $ : int [1:6] 19 20 21 23 35 41\n $ : int [1:4] 12 13 16 63\n $ : int [1:4] 7 9 66 68\n $ : int [1:2] 2 5\n $ : int [1:4] 21 46 47 74\n $ : int [1:4] 59 61 62 88\n $ : int [1:2] 59 87\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language dnearneigh(x = coords, d1 = 0, d2 = 62, longlat = TRUE)\n - attr(*, \"dnn\")= num [1:2] 0 62\n - attr(*, \"bounds\")= chr [1:2] \"GE\" \"LE\"\n - attr(*, \"nbtype\")= chr \"distance\"\n - attr(*, \"sym\")= logi TRUE\n\n\nAnother way to display the structure of the weight matrix is to combine table(). and card() of spdep.\n\ntable(hunan$County, card(wm_d62))\n\n               \n                1 2 3 4 5 6\n  Anhua         1 0 0 0 0 0\n  Anren         0 0 0 1 0 0\n  Anxiang       0 0 0 0 1 0\n  Baojing       0 0 0 0 1 0\n  Chaling       0 0 1 0 0 0\n  Changning     0 0 1 0 0 0\n  Changsha      0 0 0 1 0 0\n  Chengbu       0 1 0 0 0 0\n  Chenxi        0 0 0 1 0 0\n  Cili          0 1 0 0 0 0\n  Dao           0 0 0 1 0 0\n  Dongan        0 0 1 0 0 0\n  Dongkou       0 0 0 1 0 0\n  Fenghuang     0 0 0 1 0 0\n  Guidong       0 0 1 0 0 0\n  Guiyang       0 0 0 1 0 0\n  Guzhang       0 0 0 0 0 1\n  Hanshou       0 0 0 1 0 0\n  Hengdong      0 0 0 0 1 0\n  Hengnan       0 0 0 0 1 0\n  Hengshan      0 0 0 0 0 1\n  Hengyang      0 0 0 0 0 1\n  Hongjiang     0 0 0 0 1 0\n  Huarong       0 0 0 1 0 0\n  Huayuan       0 0 0 1 0 0\n  Huitong       0 0 0 1 0 0\n  Jiahe         0 0 0 0 1 0\n  Jianghua      0 0 1 0 0 0\n  Jiangyong     0 1 0 0 0 0\n  Jingzhou      0 1 0 0 0 0\n  Jinshi        0 0 0 1 0 0\n  Jishou        0 0 0 0 0 1\n  Lanshan       0 0 0 1 0 0\n  Leiyang       0 0 0 1 0 0\n  Lengshuijiang 0 0 1 0 0 0\n  Li            0 0 1 0 0 0\n  Lianyuan      0 0 0 0 1 0\n  Liling        0 1 0 0 0 0\n  Linli         0 0 0 1 0 0\n  Linwu         0 0 0 1 0 0\n  Linxiang      1 0 0 0 0 0\n  Liuyang       0 1 0 0 0 0\n  Longhui       0 0 1 0 0 0\n  Longshan      0 1 0 0 0 0\n  Luxi          0 0 0 0 1 0\n  Mayang        0 0 0 0 0 1\n  Miluo         0 0 0 0 1 0\n  Nan           0 0 0 0 1 0\n  Ningxiang     0 0 0 1 0 0\n  Ningyuan      0 0 0 0 1 0\n  Pingjiang     0 1 0 0 0 0\n  Qidong        0 0 1 0 0 0\n  Qiyang        0 0 1 0 0 0\n  Rucheng       0 1 0 0 0 0\n  Sangzhi       0 1 0 0 0 0\n  Shaodong      0 0 0 0 1 0\n  Shaoshan      0 0 0 0 1 0\n  Shaoyang      0 0 0 1 0 0\n  Shimen        1 0 0 0 0 0\n  Shuangfeng    0 0 0 0 0 1\n  Shuangpai     0 0 0 1 0 0\n  Suining       0 0 0 0 1 0\n  Taojiang      0 1 0 0 0 0\n  Taoyuan       0 1 0 0 0 0\n  Tongdao       0 1 0 0 0 0\n  Wangcheng     0 0 0 1 0 0\n  Wugang        0 0 1 0 0 0\n  Xiangtan      0 0 0 1 0 0\n  Xiangxiang    0 0 0 0 1 0\n  Xiangyin      0 0 0 1 0 0\n  Xinhua        0 0 0 0 1 0\n  Xinhuang      1 0 0 0 0 0\n  Xinning       0 1 0 0 0 0\n  Xinshao       0 0 0 0 0 1\n  Xintian       0 0 0 0 1 0\n  Xupu          0 1 0 0 0 0\n  Yanling       0 0 1 0 0 0\n  Yizhang       1 0 0 0 0 0\n  Yongshun      0 0 0 1 0 0\n  Yongxing      0 0 0 1 0 0\n  You           0 0 0 1 0 0\n  Yuanjiang     0 0 0 0 1 0\n  Yuanling      1 0 0 0 0 0\n  Yueyang       0 0 1 0 0 0\n  Zhijiang      0 0 0 0 1 0\n  Zhongfang     0 0 0 1 0 0\n  Zhuzhou       0 0 0 0 1 0\n  Zixing        0 0 1 0 0 0\n\n\n\nn_comp <- n.comp.nb(wm_d62)\nn_comp$nc\n\n[1] 1\n\n\n\ntable(n_comp$comp.id)\n\n\n 1 \n88 \n\n\n\nPlotting fixed distance weight matrix\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_d62, coords, add=TRUE)\nplot(k1, coords, add=TRUE, col=\"red\", length=0.08)\n\n\n\n\nThe red lines show the links of 1st nearest neighbours and the black lines show the links of neighbours within the cut-off distance of 62km.\nAlternatively,\n\npar(mfrow=c(1,2))\nplot(hunan$geometry, border=\"lightgrey\")\nplot(k1, coords, add=TRUE, col=\"red\", length=0.08, main=\"1st nearest neighbours\")\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_d62, coords, add=TRUE, pch = 19, cex = 0.6, main=\"Distance link\")\n\n\n\n\n\n\n\nComputing adaptive distance weight matrix\nAccording to distance weight matrix, urban areas(densely populated) have more neighbors as compared to rural areas(less populated areas) of the country. Having many neighbours smoothes the neighbour relationship across more neighbours.\nOne of the ways to control neighbors is by using k-nearest neighbours, either accepting asymmetric neighbours or imposing symmetry as shown in the code chunk below.\n\nknn6 <- knn2nb(knearneigh(coords, k=6))\nknn6\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 528 \nPercentage nonzero weights: 6.818182 \nAverage number of links: 6 \nNon-symmetric neighbours list\n\n\nSimilarly, we can display the content of the matrix by using str().\n\nstr(knn6)\n\nList of 88\n $ : int [1:6] 2 3 4 5 57 64\n $ : int [1:6] 1 3 57 58 78 85\n $ : int [1:6] 1 2 4 5 57 85\n $ : int [1:6] 1 3 5 6 69 85\n $ : int [1:6] 1 3 4 6 69 85\n $ : int [1:6] 3 4 5 69 75 85\n $ : int [1:6] 9 66 67 71 74 84\n $ : int [1:6] 9 46 47 78 80 86\n $ : int [1:6] 8 46 66 68 84 86\n $ : int [1:6] 16 19 22 70 72 73\n $ : int [1:6] 10 14 16 17 70 72\n $ : int [1:6] 13 15 60 61 63 83\n $ : int [1:6] 12 15 60 61 63 83\n $ : int [1:6] 11 15 16 17 72 83\n $ : int [1:6] 12 13 14 17 60 83\n $ : int [1:6] 10 11 17 22 72 83\n $ : int [1:6] 10 11 14 16 72 83\n $ : int [1:6] 20 22 23 63 77 83\n $ : int [1:6] 10 20 21 73 74 82\n $ : int [1:6] 18 19 21 22 23 82\n $ : int [1:6] 19 20 35 74 82 86\n $ : int [1:6] 10 16 18 19 20 83\n $ : int [1:6] 18 20 41 77 79 82\n $ : int [1:6] 25 28 31 52 54 81\n $ : int [1:6] 24 28 31 33 54 81\n $ : int [1:6] 25 27 29 33 42 81\n $ : int [1:6] 26 29 30 37 42 81\n $ : int [1:6] 24 25 33 49 52 54\n $ : int [1:6] 26 27 37 42 43 81\n $ : int [1:6] 26 27 28 33 49 81\n $ : int [1:6] 24 25 36 39 40 54\n $ : int [1:6] 24 31 50 54 55 56\n $ : int [1:6] 25 26 28 30 49 81\n $ : int [1:6] 36 40 41 45 56 80\n $ : int [1:6] 21 41 46 47 80 82\n $ : int [1:6] 31 34 40 45 56 80\n $ : int [1:6] 26 27 29 42 43 44\n $ : int [1:6] 23 43 44 62 77 79\n $ : int [1:6] 25 40 42 43 44 81\n $ : int [1:6] 31 36 39 43 45 79\n $ : int [1:6] 23 35 45 79 80 82\n $ : int [1:6] 26 27 37 39 43 81\n $ : int [1:6] 37 39 40 42 44 79\n $ : int [1:6] 37 38 39 42 43 79\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:6] 8 9 35 47 78 86\n $ : int [1:6] 8 21 35 46 80 86\n $ : int [1:6] 49 50 51 52 53 55\n $ : int [1:6] 28 33 48 51 52 54\n $ : int [1:6] 32 48 51 52 54 55\n $ : int [1:6] 28 48 49 50 52 54\n $ : int [1:6] 28 48 49 50 51 54\n $ : int [1:6] 48 50 51 52 55 75\n $ : int [1:6] 24 28 49 50 51 52\n $ : int [1:6] 32 48 50 52 53 75\n $ : int [1:6] 32 34 36 78 80 85\n $ : int [1:6] 1 2 3 58 64 68\n $ : int [1:6] 2 57 64 66 68 78\n $ : int [1:6] 12 13 60 61 87 88\n $ : int [1:6] 12 13 59 61 63 87\n $ : int [1:6] 12 13 60 62 63 87\n $ : int [1:6] 12 38 61 63 77 87\n $ : int [1:6] 12 18 60 61 62 83\n $ : int [1:6] 1 3 57 58 68 76\n $ : int [1:6] 58 64 66 67 68 76\n $ : int [1:6] 9 58 67 68 76 84\n $ : int [1:6] 7 65 66 68 76 84\n $ : int [1:6] 9 57 58 66 78 84\n $ : int [1:6] 4 5 6 32 75 85\n $ : int [1:6] 10 16 19 22 72 73\n $ : int [1:6] 7 19 73 74 84 86\n $ : int [1:6] 10 11 14 16 17 70\n $ : int [1:6] 10 19 21 70 71 74\n $ : int [1:6] 19 21 71 73 84 86\n $ : int [1:6] 6 32 50 53 55 69\n $ : int [1:6] 58 64 65 66 67 68\n $ : int [1:6] 18 23 38 61 62 63\n $ : int [1:6] 2 8 9 46 58 68\n $ : int [1:6] 38 40 41 43 44 45\n $ : int [1:6] 34 35 36 41 45 47\n $ : int [1:6] 25 26 28 33 39 42\n $ : int [1:6] 19 20 21 23 35 41\n $ : int [1:6] 12 13 15 16 22 63\n $ : int [1:6] 7 9 66 68 71 74\n $ : int [1:6] 2 3 4 5 56 69\n $ : int [1:6] 8 9 21 46 47 74\n $ : int [1:6] 59 60 61 62 63 88\n $ : int [1:6] 59 60 61 62 63 87\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language knearneigh(x = coords, k = 6)\n - attr(*, \"sym\")= logi FALSE\n - attr(*, \"type\")= chr \"knn\"\n - attr(*, \"knn-k\")= num 6\n - attr(*, \"class\")= chr \"nb\"\n\n\nNotice that each county has six neighbours, no less no more!\n\nPlotting the distance based neighbors\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(knn6, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")"
  },
  {
    "objectID": "In-class_Ex/In-Class_Ex1/In-Class_Ex1.html#weight-based-on-idw",
    "href": "In-class_Ex/In-Class_Ex1/In-Class_Ex1.html#weight-based-on-idw",
    "title": "Spatial Weights and Applications",
    "section": "Weight based on IDW",
    "text": "Weight based on IDW\nIn this section, spatial weight matrix is derived using Inverse distance method.\nDistance between the areas will be computed using nbdists() of spdep.\n\ndist <- nbdists(wm_q, coords, longlat = TRUE)\nids <- lapply(dist, function(x) 1/(x))\nids\n\n[[1]]\n[1] 0.01535405 0.03916350 0.01820896 0.02807922 0.01145113\n\n[[2]]\n[1] 0.01535405 0.01764308 0.01925924 0.02323898 0.01719350\n\n[[3]]\n[1] 0.03916350 0.02822040 0.03695795 0.01395765\n\n[[4]]\n[1] 0.01820896 0.02822040 0.03414741 0.01539065\n\n[[5]]\n[1] 0.03695795 0.03414741 0.01524598 0.01618354\n\n[[6]]\n[1] 0.015390649 0.015245977 0.021748129 0.011883901 0.009810297\n\n[[7]]\n[1] 0.01708612 0.01473997 0.01150924 0.01872915\n\n[[8]]\n[1] 0.02022144 0.03453056 0.02529256 0.01036340 0.02284457 0.01500600 0.01515314\n\n[[9]]\n[1] 0.02022144 0.01574888 0.02109502 0.01508028 0.02902705 0.01502980\n\n[[10]]\n[1] 0.02281552 0.01387777 0.01538326 0.01346650 0.02100510 0.02631658 0.01874863\n[8] 0.01500046\n\n[[11]]\n[1] 0.01882869 0.02243492 0.02247473\n\n[[12]]\n[1] 0.02779227 0.02419652 0.02333385 0.02986130 0.02335429\n\n[[13]]\n[1] 0.02779227 0.02650020 0.02670323 0.01714243\n\n[[14]]\n[1] 0.01882869 0.01233868 0.02098555\n\n[[15]]\n[1] 0.02650020 0.01233868 0.01096284 0.01562226\n\n[[16]]\n[1] 0.02281552 0.02466962 0.02765018 0.01476814 0.01671430\n\n[[17]]\n[1] 0.01387777 0.02243492 0.02098555 0.01096284 0.02466962 0.01593341 0.01437996\n\n[[18]]\n[1] 0.02039779 0.02032767 0.01481665 0.01473691 0.01459380\n\n[[19]]\n[1] 0.01538326 0.01926323 0.02668415 0.02140253 0.01613589 0.01412874\n\n[[20]]\n[1] 0.01346650 0.02039779 0.01926323 0.01723025 0.02153130 0.01469240 0.02327034\n\n[[21]]\n[1] 0.02668415 0.01723025 0.01766299 0.02644986 0.02163800\n\n[[22]]\n[1] 0.02100510 0.02765018 0.02032767 0.02153130 0.01489296\n\n[[23]]\n[1] 0.01481665 0.01469240 0.01401432 0.02246233 0.01880425 0.01530458 0.01849605\n\n[[24]]\n[1] 0.02354598 0.01837201 0.02607264 0.01220154 0.02514180\n\n[[25]]\n[1] 0.02354598 0.02188032 0.01577283 0.01949232 0.02947957\n\n[[26]]\n[1] 0.02155798 0.01745522 0.02212108 0.02220532\n\n[[27]]\n[1] 0.02155798 0.02490625 0.01562326\n\n[[28]]\n[1] 0.01837201 0.02188032 0.02229549 0.03076171 0.02039506\n\n[[29]]\n[1] 0.02490625 0.01686587 0.01395022\n\n[[30]]\n[1] 0.02090587\n\n[[31]]\n[1] 0.02607264 0.01577283 0.01219005 0.01724850 0.01229012 0.01609781 0.01139438\n[8] 0.01150130\n\n[[32]]\n[1] 0.01220154 0.01219005 0.01712515 0.01340413 0.01280928 0.01198216 0.01053374\n[8] 0.01065655\n\n[[33]]\n[1] 0.01949232 0.01745522 0.02229549 0.02090587 0.01979045\n\n[[34]]\n[1] 0.03113041 0.03589551 0.02882915\n\n[[35]]\n[1] 0.01766299 0.02185795 0.02616766 0.02111721 0.02108253 0.01509020\n\n[[36]]\n[1] 0.01724850 0.03113041 0.01571707 0.01860991 0.02073549 0.01680129\n\n[[37]]\n[1] 0.01686587 0.02234793 0.01510990 0.01550676\n\n[[38]]\n[1] 0.01401432 0.02407426 0.02276151 0.01719415\n\n[[39]]\n[1] 0.01229012 0.02172543 0.01711924 0.02629732 0.01896385\n\n[[40]]\n[1] 0.01609781 0.01571707 0.02172543 0.01506473 0.01987922 0.01894207\n\n[[41]]\n[1] 0.02246233 0.02185795 0.02205991 0.01912542 0.01601083 0.01742892\n\n[[42]]\n[1] 0.02212108 0.01562326 0.01395022 0.02234793 0.01711924 0.01836831 0.01683518\n\n[[43]]\n[1] 0.01510990 0.02629732 0.01506473 0.01836831 0.03112027 0.01530782\n\n[[44]]\n[1] 0.01550676 0.02407426 0.03112027 0.01486508\n\n[[45]]\n[1] 0.03589551 0.01860991 0.01987922 0.02205991 0.02107101 0.01982700\n\n[[46]]\n[1] 0.03453056 0.04033752 0.02689769\n\n[[47]]\n[1] 0.02529256 0.02616766 0.04033752 0.01949145 0.02181458\n\n[[48]]\n[1] 0.02313819 0.03370576 0.02289485 0.01630057 0.01818085\n\n[[49]]\n[1] 0.03076171 0.02138091 0.02394529 0.01990000\n\n[[50]]\n[1] 0.01712515 0.02313819 0.02551427 0.02051530 0.02187179\n\n[[51]]\n[1] 0.03370576 0.02138091 0.02873854\n\n[[52]]\n[1] 0.02289485 0.02394529 0.02551427 0.02873854 0.03516672\n\n[[53]]\n[1] 0.01630057 0.01979945 0.01253977\n\n[[54]]\n[1] 0.02514180 0.02039506 0.01340413 0.01990000 0.02051530 0.03516672\n\n[[55]]\n[1] 0.01280928 0.01818085 0.02187179 0.01979945 0.01882298\n\n[[56]]\n[1] 0.01036340 0.01139438 0.01198216 0.02073549 0.01214479 0.01362855 0.01341697\n\n[[57]]\n[1] 0.028079221 0.017643082 0.031423501 0.029114131 0.013520292 0.009903702\n\n[[58]]\n[1] 0.01925924 0.03142350 0.02722997 0.01434859 0.01567192\n\n[[59]]\n[1] 0.01696711 0.01265572 0.01667105 0.01785036\n\n[[60]]\n[1] 0.02419652 0.02670323 0.01696711 0.02343040\n\n[[61]]\n[1] 0.02333385 0.01265572 0.02343040 0.02514093 0.02790764 0.01219751 0.02362452\n\n[[62]]\n[1] 0.02514093 0.02002219 0.02110260\n\n[[63]]\n[1] 0.02986130 0.02790764 0.01407043 0.01805987\n\n[[64]]\n[1] 0.02911413 0.01689892\n\n[[65]]\n[1] 0.02471705\n\n[[66]]\n[1] 0.01574888 0.01726461 0.03068853 0.01954805 0.01810569\n\n[[67]]\n[1] 0.01708612 0.01726461 0.01349843 0.01361172\n\n[[68]]\n[1] 0.02109502 0.02722997 0.03068853 0.01406357 0.01546511\n\n[[69]]\n[1] 0.02174813 0.01645838 0.01419926\n\n[[70]]\n[1] 0.02631658 0.01963168 0.02278487\n\n[[71]]\n[1] 0.01473997 0.01838483 0.03197403\n\n[[72]]\n[1] 0.01874863 0.02247473 0.01476814 0.01593341 0.01963168\n\n[[73]]\n[1] 0.01500046 0.02140253 0.02278487 0.01838483 0.01652709\n\n[[74]]\n[1] 0.01150924 0.01613589 0.03197403 0.01652709 0.01342099 0.02864567\n\n[[75]]\n[1] 0.011883901 0.010533736 0.012539774 0.018822977 0.016458383 0.008217581\n\n[[76]]\n[1] 0.01352029 0.01434859 0.01689892 0.02471705 0.01954805 0.01349843 0.01406357\n\n[[77]]\n[1] 0.014736909 0.018804247 0.022761507 0.012197506 0.020022195 0.014070428\n[7] 0.008440896\n\n[[78]]\n[1] 0.02323898 0.02284457 0.01508028 0.01214479 0.01567192 0.01546511 0.01140779\n\n[[79]]\n[1] 0.01530458 0.01719415 0.01894207 0.01912542 0.01530782 0.01486508 0.02107101\n\n[[80]]\n[1] 0.01500600 0.02882915 0.02111721 0.01680129 0.01601083 0.01982700 0.01949145\n[8] 0.01362855\n\n[[81]]\n[1] 0.02947957 0.02220532 0.01150130 0.01979045 0.01896385 0.01683518\n\n[[82]]\n[1] 0.02327034 0.02644986 0.01849605 0.02108253 0.01742892\n\n[[83]]\n[1] 0.023354289 0.017142433 0.015622258 0.016714303 0.014379961 0.014593799\n[7] 0.014892965 0.018059871 0.008440896\n\n[[84]]\n[1] 0.01872915 0.02902705 0.01810569 0.01361172 0.01342099 0.01297994\n\n[[85]]\n [1] 0.011451133 0.017193502 0.013957649 0.016183544 0.009810297 0.010656545\n [7] 0.013416965 0.009903702 0.014199260 0.008217581 0.011407794\n\n[[86]]\n[1] 0.01515314 0.01502980 0.01412874 0.02163800 0.01509020 0.02689769 0.02181458\n[8] 0.02864567 0.01297994\n\n[[87]]\n[1] 0.01667105 0.02362452 0.02110260 0.02058034\n\n[[88]]\n[1] 0.01785036 0.02058034\n\n\n\nRow-Standardized wight matrix\nEach neighboring polygon will assigned equal weights(style=“W”). This is accomplished by assigning the fraction 1/(#ofneighbors) to each neighboring county then summing the weighted income values.\nDrawback: Polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data.More robust style options are available, notably style=“B”.\n\nrswm_q <- nb2listw(wm_q, style=\"W\", zero.policy = TRUE)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\nThe zero.policy=TRUE option allows for lists of non-neighbors.\n\nrswm_q$weights[10]\n\n[[1]]\n[1] 0.125 0.125 0.125 0.125 0.125 0.125 0.125 0.125\n\n\nEach neighbor is assigned a 0.2 of the total weight. This means that when R computes the average neighboring income values, each neighbor’s income will be multiplied by 0.2 before being tallied.\nRow standardised distance weight matrix :\n\nrswm_ids <- nb2listw(wm_q, glist=ids, style=\"B\", zero.policy=TRUE)\nrswm_ids\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn       S0        S1     S2\nB 88 7744 8.786867 0.3776535 3.8137\n\n\n\nrswm_ids$weights[1]\n\n[[1]]\n[1] 0.01535405 0.03916350 0.01820896 0.02807922 0.01145113\n\n\n\nsummary(unlist(rswm_ids$weights))\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n0.008218 0.015088 0.018739 0.019614 0.022823 0.040338"
  },
  {
    "objectID": "In-class_Ex/In-Class_Ex1/In-Class_Ex1.html#application-of-spatial-weight-matrix.",
    "href": "In-class_Ex/In-Class_Ex1/In-Class_Ex1.html#application-of-spatial-weight-matrix.",
    "title": "Spatial Weights and Applications",
    "section": "Application of Spatial Weight Matrix.",
    "text": "Application of Spatial Weight Matrix.\nDifferent types of spatial lagged variables are as follows:\n\nspatial lag with row-standardized weights,\nspatial lag as a sum of neighbouring values,\nspatial window average, and spatial window sum.\n\n\nSpatial lag with row-standardized weights\nCalculation of average neighbor GDPPC value, spatially lagged values, for each polygon.\n\nGDPPC.lag <- lag.listw(rswm_q, hunan$GDPPC)\nGDPPC.lag\n\n [1] 24847.20 22724.80 24143.25 27737.50 27270.25 21248.80 43747.00 33582.71\n [9] 45651.17 32027.62 32671.00 20810.00 25711.50 30672.33 33457.75 31689.20\n[17] 20269.00 23901.60 25126.17 21903.43 22718.60 25918.80 20307.00 20023.80\n[25] 16576.80 18667.00 14394.67 19848.80 15516.33 20518.00 17572.00 15200.12\n[33] 18413.80 14419.33 24094.50 22019.83 12923.50 14756.00 13869.80 12296.67\n[41] 15775.17 14382.86 11566.33 13199.50 23412.00 39541.00 36186.60 16559.60\n[49] 20772.50 19471.20 19827.33 15466.80 12925.67 18577.17 14943.00 24913.00\n[57] 25093.00 24428.80 17003.00 21143.75 20435.00 17131.33 24569.75 23835.50\n[65] 26360.00 47383.40 55157.75 37058.00 21546.67 23348.67 42323.67 28938.60\n[73] 25880.80 47345.67 18711.33 29087.29 20748.29 35933.71 15439.71 29787.50\n[81] 18145.00 21617.00 29203.89 41363.67 22259.09 44939.56 16902.00 16930.00\n\n\nGDPPC of the five countries :\n\nnb1 <- wm_q[[1]]\nnb1 <- hunan$GDPPC[nb1]\nnb1\n\n[1] 20981 34592 24473 21311 22879\n\n\nAppending the spatially lag GDPPC values onto hunan sf data frame:\n\nlag.list <- list(hunan$NAME_3, lag.listw(rswm_q, hunan$GDPPC))\nlag.res <- as.data.frame(lag.list)\ncolnames(lag.res) <- c(\"NAME_3\", \"lag GDPPC\")\nhunan <- left_join(hunan,lag.res)\n\nJoining, by = \"NAME_3\"\n\n\nThe following table shows the average neighboring income values (stored in the Inc.lag object) for each county.\n\nhead(hunan)\n\nSimple feature collection with 6 features and 36 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 110.4922 ymin: 28.61762 xmax: 112.3013 ymax: 30.12812\nGeodetic CRS:  WGS 84\n   NAME_2  ID_3  NAME_3   ENGTYPE_3 Shape_Leng Shape_Area  County    City\n1 Changde 21098 Anxiang      County   1.869074 0.10056190 Anxiang Changde\n2 Changde 21100 Hanshou      County   2.360691 0.19978745 Hanshou Changde\n3 Changde 21101  Jinshi County City   1.425620 0.05302413  Jinshi Changde\n4 Changde 21102      Li      County   3.474325 0.18908121      Li Changde\n5 Changde 21103   Linli      County   2.289506 0.11450357   Linli Changde\n6 Changde 21104  Shimen      County   4.171918 0.37194707  Shimen Changde\n  avg_wage deposite     FAI Gov_Rev Gov_Exp     GDP GDPPC     GIO   Loan  NIPCR\n1    31935   5517.2  3541.0  243.64  1779.5 12482.0 23667  5108.9 2806.9 7693.7\n2    32265   7979.0  8665.0  386.13  2062.4 15788.0 20981 13491.0 4550.0 8269.9\n3    28692   4581.7  4777.0  373.31  1148.4  8706.9 34592 10935.0 2242.0 8169.9\n4    32541  13487.0 16066.0  709.61  2459.5 20322.0 24473 18402.0 6748.0 8377.0\n5    32667    564.1  7781.2  336.86  1538.7 10355.0 25554  8214.0  358.0 8143.1\n6    33261   8334.4 10531.0  548.33  2178.8 16293.0 27137 17795.0 6026.5 6156.0\n   Bed    Emp  EmpR EmpRT Pri_Stu Sec_Stu Household Household_R NOIP Pop_R\n1 1931 336.39 270.5 205.9  19.584  17.819     148.1       135.4   53 346.0\n2 2560 456.78 388.8 246.7  42.097  33.029     240.2       208.7   95 553.2\n3  848 122.78  82.1  61.7   8.723   7.592      81.9        43.7   77  92.4\n4 2038 513.44 426.8 227.1  38.975  33.938     268.5       256.0   96 539.7\n5 1440 307.36 272.2 100.8  23.286  18.943     129.1       157.2   99 246.6\n6 2502 392.05 329.6 193.8  29.245  26.104     190.6       184.7  122 399.2\n    RSCG Pop_T    Agri Service Disp_Inc      RORP    ROREmp lag GDPPC\n1 3957.9 528.3 4524.41   14100    16610 0.6549309 0.8041262  24847.20\n2 4460.5 804.6 6545.35   17727    18925 0.6875466 0.8511756  22724.80\n3 3683.0 251.8 2562.46    7525    19498 0.3669579 0.6686757  24143.25\n4 7110.2 832.5 7562.34   53160    18985 0.6482883 0.8312558  27737.50\n5 3604.9 409.3 3583.91    7031    18604 0.6024921 0.8856065  27270.25\n6 6490.7 600.5 5266.51    6981    19275 0.6647794 0.8407091  21248.80\n                        geometry\n1 POLYGON ((112.0625 29.75523...\n2 POLYGON ((112.2288 29.11684...\n3 POLYGON ((111.8927 29.6013,...\n4 POLYGON ((111.3731 29.94649...\n5 POLYGON ((111.6324 29.76288...\n6 POLYGON ((110.8825 30.11675...\n\n\nPlotting both the GDPPC and spatial lag GDPPC for comparison:\n\ngdppc <- qtm(hunan, \"GDPPC\")\nlag_gdppc <- qtm(hunan, \"lag GDPPC\")\ntmap_arrange(gdppc, lag_gdppc, asp=1, ncol=2)\n\n\n\n\nWe can observe the shift of region of maximum GDPPC using lag with row-standardized weights.\n\n\nSpatial lag as a sum of neighboring values\nBy assigning binary weights we can calculate sum of neighboring values. Following steps are followed:\n\nGo back to the neighbor list\nApply a function that will assign binary weights\nUse glist = in the nb2listw function to explicitly assign these weights\nThis is done with lapply, which we have been using to manipulate the neighbors structure throughout the past notebooks. Basically it applies a function across each value in the neighbors structure.\n\n\nb_weights <- lapply(wm_q, function(x) 0*x + 1)\nb_weights2 <- nb2listw(wm_q, \n                       glist = b_weights, \n                       style = \"B\")\nb_weights2\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1    S2\nB 88 7744 448 896 10224\n\n\nWith the proper weights assigned, we can use lag.listw to compute a lag variable from our weight and GDPPC.\n\nlag_sum <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))\nlag.res <- as.data.frame(lag_sum)\ncolnames(lag.res) <- c(\"NAME_3\", \"lag_sum GDPPC\")\n\nlag_sum\n\n[[1]]\n [1] \"Anxiang\"       \"Hanshou\"       \"Jinshi\"        \"Li\"           \n [5] \"Linli\"         \"Shimen\"        \"Liuyang\"       \"Ningxiang\"    \n [9] \"Wangcheng\"     \"Anren\"         \"Guidong\"       \"Jiahe\"        \n[13] \"Linwu\"         \"Rucheng\"       \"Yizhang\"       \"Yongxing\"     \n[17] \"Zixing\"        \"Changning\"     \"Hengdong\"      \"Hengnan\"      \n[21] \"Hengshan\"      \"Leiyang\"       \"Qidong\"        \"Chenxi\"       \n[25] \"Zhongfang\"     \"Huitong\"       \"Jingzhou\"      \"Mayang\"       \n[29] \"Tongdao\"       \"Xinhuang\"      \"Xupu\"          \"Yuanling\"     \n[33] \"Zhijiang\"      \"Lengshuijiang\" \"Shuangfeng\"    \"Xinhua\"       \n[37] \"Chengbu\"       \"Dongan\"        \"Dongkou\"       \"Longhui\"      \n[41] \"Shaodong\"      \"Suining\"       \"Wugang\"        \"Xinning\"      \n[45] \"Xinshao\"       \"Shaoshan\"      \"Xiangxiang\"    \"Baojing\"      \n[49] \"Fenghuang\"     \"Guzhang\"       \"Huayuan\"       \"Jishou\"       \n[53] \"Longshan\"      \"Luxi\"          \"Yongshun\"      \"Anhua\"        \n[57] \"Nan\"           \"Yuanjiang\"     \"Jianghua\"      \"Lanshan\"      \n[61] \"Ningyuan\"      \"Shuangpai\"     \"Xintian\"       \"Huarong\"      \n[65] \"Linxiang\"      \"Miluo\"         \"Pingjiang\"     \"Xiangyin\"     \n[69] \"Cili\"          \"Chaling\"       \"Liling\"        \"Yanling\"      \n[73] \"You\"           \"Zhuzhou\"       \"Sangzhi\"       \"Yueyang\"      \n[77] \"Qiyang\"        \"Taojiang\"      \"Shaoyang\"      \"Lianyuan\"     \n[81] \"Hongjiang\"     \"Hengyang\"      \"Guiyang\"       \"Changsha\"     \n[85] \"Taoyuan\"       \"Xiangtan\"      \"Dao\"           \"Jiangyong\"    \n\n[[2]]\n [1] 124236 113624  96573 110950 109081 106244 174988 235079 273907 256221\n[11]  98013 104050 102846  92017 133831 158446 141883 119508 150757 153324\n[21] 113593 129594 142149 100119  82884  74668  43184  99244  46549  20518\n[31] 140576 121601  92069  43258 144567 132119  51694  59024  69349  73780\n[41]  94651 100680  69398  52798 140472 118623 180933  82798  83090  97356\n[51]  59482  77334  38777 111463  74715 174391 150558 122144  68012  84575\n[61] 143045  51394  98279  47671  26360 236917 220631 185290  64640  70046\n[71] 126971 144693 129404 284074 112268 203611 145238 251536 108078 238300\n[81] 108870 108085 262835 248182 244850 404456  67608  33860\n\n\nAppending the lag_sum GDPPC field into hunan sf data frame:\n\nhunan <- left_join(hunan, lag.res)\n\nJoining, by = \"NAME_3\"\n\n\nPlotting both the GDPPC and Spatial Lag Sum GDPPC for comparison:\n\ngdppc <- qtm(hunan, \"GDPPC\")\nlag_sum_gdppc <- qtm(hunan, \"lag_sum GDPPC\")\ntmap_arrange(gdppc, lag_sum_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\nSpatial window average\nIn this method row standardized weights are used including the diagonal elements. In this first we have to add diagonal elements before assigning weights.\n\nwm_q1 <- wm_q\n\nDiagonal elements are included using include.self() from spdep package.\n\ninclude.self(wm_q1)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\n\nWeights are obtained using nb2listw()\n\nwm_q1 <- nb2listw(wm_q1)\nwm_q1\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\nCreating the lag variable from our weight structure and GDPPC variable:\n\nlag_w_avg_gpdpc <- lag.listw(wm_q1, \n                             hunan$GDPPC)\nlag_w_avg_gpdpc\n\n [1] 24847.20 22724.80 24143.25 27737.50 27270.25 21248.80 43747.00 33582.71\n [9] 45651.17 32027.62 32671.00 20810.00 25711.50 30672.33 33457.75 31689.20\n[17] 20269.00 23901.60 25126.17 21903.43 22718.60 25918.80 20307.00 20023.80\n[25] 16576.80 18667.00 14394.67 19848.80 15516.33 20518.00 17572.00 15200.12\n[33] 18413.80 14419.33 24094.50 22019.83 12923.50 14756.00 13869.80 12296.67\n[41] 15775.17 14382.86 11566.33 13199.50 23412.00 39541.00 36186.60 16559.60\n[49] 20772.50 19471.20 19827.33 15466.80 12925.67 18577.17 14943.00 24913.00\n[57] 25093.00 24428.80 17003.00 21143.75 20435.00 17131.33 24569.75 23835.50\n[65] 26360.00 47383.40 55157.75 37058.00 21546.67 23348.67 42323.67 28938.60\n[73] 25880.80 47345.67 18711.33 29087.29 20748.29 35933.71 15439.71 29787.50\n[81] 18145.00 21617.00 29203.89 41363.67 22259.09 44939.56 16902.00 16930.00\n\n\nConverting the lag variable listw object into a data.frame by using as.data.frame().\n\nlag.list.knn6a <- list(hunan$NAME_3, lag.listw(wm_q1, hunan$GDPPC))\nlag_knn6a.res <- as.data.frame(lag.list.knn6a)\ncolnames(lag_knn6a.res) <- c(\"NAME_3\", \"lag_window_avg GDPPC\")\n\n\n\nSpatial Window Sum\nThis method is the counterpart of the window average, but without using row standardized weights. To do this we assign binary weights to the neighbor structure that includes the diagonal element.\n\nwm_q1 <- wm_q\n\nAdding diagonal elements to the neighbor list:\n\ninclude.self(wm_q1)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\n\n\nwm_q1\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\n\nAssigning binary weights to the neighbour structure that includes the diagonal element:\n\nb_weights <- lapply(wm_q1, function(x) 0*x + 1)\nb_weights[1]\n\n[[1]]\n[1] 1 1 1 1 1\n\n\nAgain, we use nb2listw() and glist() to explicitly assign weight values.\n\nb_weights2 <- nb2listw(wm_q1, \n                       glist = b_weights, \n                       style = \"B\")\nb_weights2\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1    S2\nB 88 7744 448 896 10224\n\n\nUsing new structure, lag variable is computed using lag.listw():\n\nw_sum_gdppc <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))\nw_sum_gdppc\n\n[[1]]\n [1] \"Anxiang\"       \"Hanshou\"       \"Jinshi\"        \"Li\"           \n [5] \"Linli\"         \"Shimen\"        \"Liuyang\"       \"Ningxiang\"    \n [9] \"Wangcheng\"     \"Anren\"         \"Guidong\"       \"Jiahe\"        \n[13] \"Linwu\"         \"Rucheng\"       \"Yizhang\"       \"Yongxing\"     \n[17] \"Zixing\"        \"Changning\"     \"Hengdong\"      \"Hengnan\"      \n[21] \"Hengshan\"      \"Leiyang\"       \"Qidong\"        \"Chenxi\"       \n[25] \"Zhongfang\"     \"Huitong\"       \"Jingzhou\"      \"Mayang\"       \n[29] \"Tongdao\"       \"Xinhuang\"      \"Xupu\"          \"Yuanling\"     \n[33] \"Zhijiang\"      \"Lengshuijiang\" \"Shuangfeng\"    \"Xinhua\"       \n[37] \"Chengbu\"       \"Dongan\"        \"Dongkou\"       \"Longhui\"      \n[41] \"Shaodong\"      \"Suining\"       \"Wugang\"        \"Xinning\"      \n[45] \"Xinshao\"       \"Shaoshan\"      \"Xiangxiang\"    \"Baojing\"      \n[49] \"Fenghuang\"     \"Guzhang\"       \"Huayuan\"       \"Jishou\"       \n[53] \"Longshan\"      \"Luxi\"          \"Yongshun\"      \"Anhua\"        \n[57] \"Nan\"           \"Yuanjiang\"     \"Jianghua\"      \"Lanshan\"      \n[61] \"Ningyuan\"      \"Shuangpai\"     \"Xintian\"       \"Huarong\"      \n[65] \"Linxiang\"      \"Miluo\"         \"Pingjiang\"     \"Xiangyin\"     \n[69] \"Cili\"          \"Chaling\"       \"Liling\"        \"Yanling\"      \n[73] \"You\"           \"Zhuzhou\"       \"Sangzhi\"       \"Yueyang\"      \n[77] \"Qiyang\"        \"Taojiang\"      \"Shaoyang\"      \"Lianyuan\"     \n[81] \"Hongjiang\"     \"Hengyang\"      \"Guiyang\"       \"Changsha\"     \n[85] \"Taoyuan\"       \"Xiangtan\"      \"Dao\"           \"Jiangyong\"    \n\n[[2]]\n [1] 124236 113624  96573 110950 109081 106244 174988 235079 273907 256221\n[11]  98013 104050 102846  92017 133831 158446 141883 119508 150757 153324\n[21] 113593 129594 142149 100119  82884  74668  43184  99244  46549  20518\n[31] 140576 121601  92069  43258 144567 132119  51694  59024  69349  73780\n[41]  94651 100680  69398  52798 140472 118623 180933  82798  83090  97356\n[51]  59482  77334  38777 111463  74715 174391 150558 122144  68012  84575\n[61] 143045  51394  98279  47671  26360 236917 220631 185290  64640  70046\n[71] 126971 144693 129404 284074 112268 203611 145238 251536 108078 238300\n[81] 108870 108085 262835 248182 244850 404456  67608  33860\n\n\nConverting the lag variable listw object into a data.frame by using as.data.frame():\n\nw_sum_gdppc.res <- as.data.frame(w_sum_gdppc)\ncolnames(w_sum_gdppc.res) <- c(\"NAME_3\", \"w_sum GDPPC\")\n\nIn the above command, second line renames the fieldnames. Appending w_sum GDPPC values onto hunan sf data.frame by using left_join() of dplyr package.\n\nhunan <- left_join(hunan, w_sum_gdppc.res)\n\nJoining, by = \"NAME_3\"\n\n\nPlottting the GDPPC and lag_sum GDPPC map next to each other for quick comparison:\n\ngdppc <- qtm(hunan, \"GDPPC\")\nw_sum_gdppc <- qtm(hunan, \"w_sum GDPPC\")\ntmap_arrange(gdppc, w_sum_gdppc, asp=1, ncol=2)"
  },
  {
    "objectID": "In-class_Ex/In-Class_Ex2/In-Class_Ex2.html",
    "href": "In-class_Ex/In-Class_Ex2/In-Class_Ex2.html",
    "title": "Birds of a feather flock together: Do functionally similar water points positively co-occur in Nigeria?",
    "section": "",
    "text": "In this exercise, we will analyse whether the functional and non functional water points positively co-occur in Nigeria?"
  },
  {
    "objectID": "In-class_Ex/In-Class_Ex2/In-Class_Ex2.html#importing-water-point-geospatial",
    "href": "In-class_Ex/In-Class_Ex2/In-Class_Ex2.html#importing-water-point-geospatial",
    "title": "Birds of a feather flock together: Do functionally similar water points positively co-occur in Nigeria?",
    "section": "Importing water point geospatial",
    "text": "Importing water point geospatial\n\nwp <- st_read(dsn = \"Geodata\",\n              layer = \"geo_export\",\n              crs = 4326) %>%\n  filter(clean_coun == \"Nigeria\")\n\nThings to learn from the code chunk above:\nst_read() of sf package is used to import geo_export shapefile into R environment and save the imported geospatial data into simple feature data table.\nfilter() of dplyr package is used to extract water point records of Nigeria. In the code chunk below, “write_rds()” of reader package is used to save the extracted sf table …..\nNext, write_rds() of readr package is used to save the extracted sf data table (i.e. wp) into an output file in rds data format. The output file is called wp_nga.rds and it is saved in geodata sub-folder.\n\nwrite_rds(wp, \"Geodata/wp_nga.rds\")"
  },
  {
    "objectID": "In-class_Ex/In-Class_Ex2/In-Class_Ex2.html#recoding-the-na-values-into-string",
    "href": "In-class_Ex/In-Class_Ex2/In-Class_Ex2.html#recoding-the-na-values-into-string",
    "title": "Birds of a feather flock together: Do functionally similar water points positively co-occur in Nigeria?",
    "section": "Recoding the NA values into string",
    "text": "Recoding the NA values into string\nIn the code chunk below, replace_na() is used to recode all the NA values in status_cle field into Unknown.\n\nwp_nga <- read_rds(\"geodata/wp_nga.rds\") %>%\n  mutate(status_cle = replace_na(status_cle, \"Unknown\"))"
  },
  {
    "objectID": "In-class_Ex/In-Class_Ex2/In-Class_Ex2.html#exploratory-data-analysis",
    "href": "In-class_Ex/In-Class_Ex2/In-Class_Ex2.html#exploratory-data-analysis",
    "title": "Birds of a feather flock together: Do functionally similar water points positively co-occur in Nigeria?",
    "section": "Exploratory Data Analysis",
    "text": "Exploratory Data Analysis\nIn the code chunk below, freq() of funModeling package is used to display the distribution of status_cle field in wp_nga.\n\nfreq(data=wp_nga, \n     input = 'status_cle')"
  },
  {
    "objectID": "In-class_Ex/In-Class_Ex2/In-Class_Ex2.html#extracting-functional-water-point",
    "href": "In-class_Ex/In-Class_Ex2/In-Class_Ex2.html#extracting-functional-water-point",
    "title": "Birds of a feather flock together: Do functionally similar water points positively co-occur in Nigeria?",
    "section": "Extracting functional water point",
    "text": "Extracting functional water point\nUsing, filter() of dplyr is used to select functional water points.\n\nwpt_functional <- wp_nga %>%\n  filter(status_cle %in%\n           c(\"Functional\", \n             \"Functional but not in use\",\n             \"Functional but needs repair\"))\n\n\nfreq(data=wpt_functional, \n     input = 'status_cle')"
  },
  {
    "objectID": "In-class_Ex/In-Class_Ex2/In-Class_Ex2.html#extracting-non-functional-water-points",
    "href": "In-class_Ex/In-Class_Ex2/In-Class_Ex2.html#extracting-non-functional-water-points",
    "title": "Birds of a feather flock together: Do functionally similar water points positively co-occur in Nigeria?",
    "section": "Extracting non-functional water points",
    "text": "Extracting non-functional water points\nUsing, filter() of dplyr is used to select non-functional water points.\n\nwpt_nonfunctional <- wp_nga %>%\n  filter(status_cle %in%\n           c(\"Abandoned/Decommissioned\", \n             \"Abandoned\",\n             \"Non-Functional\",\n             \"Non functional due to dry season\",\n             \"Non-Functional due to dry season\"))\n\n\nfreq(data=wpt_nonfunctional, \n     input = 'status_cle')"
  },
  {
    "objectID": "In-class_Ex/In-Class_Ex2/In-Class_Ex2.html#extracting-water-point-with-unknown-class",
    "href": "In-class_Ex/In-Class_Ex2/In-Class_Ex2.html#extracting-water-point-with-unknown-class",
    "title": "Birds of a feather flock together: Do functionally similar water points positively co-occur in Nigeria?",
    "section": "Extracting water point with unknown class",
    "text": "Extracting water point with unknown class\nUsing, filter() of dplyr is used to select water points with unknown status.\n\nwpt_unknown <- wp_nga %>%\n  filter(status_cle == \"Unknown\")"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS624-Geospatial Analytics",
    "section": "",
    "text": "Welcome to ISSS624 Geospatial Analytics Applications\nIn this webpage, I am going to share with you my learning of Geospatial analytics.\n\nCONTENTS\n\n\n\n\n\n\n\n\nChapter Number\nChapter Name\nExplanation Tab\n\n\n\n\n1\nGeospatial Data Wrangling with R\nHands-On Exercise 1\n\n\n2\nChoropleth Mapping with R\nHands-On Exercise 1\n\n\n3\nSpatial Weights and Applications\nIn-Class Exercise 1\n\n\n4\nGlobal and Local measures of Spatial Autocorrelation\nHands-On Exercise 2\n\n\n5\nGeographical Segmentation with Spatially Constrained Clustering Techniques\nHands-On Exercise 3\n\n\n6\nCalibrating Hedonic Pricing Model For Private Highrise Property with GWR method\nHands-On Exercise 4\n\n\n\n\n\nTake Home Exercise\n\n\n\n\n\n\n\n\nTake Home Ex Number\nTopic\nDate\n\n\n\n\n1\nGeospatial Analytics for Social Good: Spatial Distribution of Water Points in Nigeria\nNovember 29,2022\n\n\n2\nRegionalisation of Multivariate Water Point Attributes with Non-spatially Constrained and Spatially Constrained Clustering Methods\nDecember 10,2022"
  },
  {
    "objectID": "Take_Home_Ex/Take_Home_Ex1/Take_Home_Ex1.html",
    "href": "Take_Home_Ex/Take_Home_Ex1/Take_Home_Ex1.html",
    "title": "Geospatial Analytics for Social Good: Spatial Distribution of Water Points in Nigeria",
    "section": "",
    "text": "Water is an essential resource, providing healthy environment, a sustainable economy, reducing poverty and also ensuring peace and security. Importance of accessible and clear water is very critical, already 40% of the population doesn’t have access to safe drinkable water. The scarcity of water leads to imbalance in the ecosystem. There will be food scarcity as agricultural department is dependent on world’s accessible freshwater.\nScarcity of fresh water is so adverse that 80% of illness in developing countries are because of lack of sanitation and clean water. Providing clean water in rural communities of the developing countries is still a major issue in many countries globally, especially countries in Africa continent.\nTo address this issue a projected has been initiated with aim to collect water point related data from rural areas at the water point or small water scheme level and share the data via WPdx Data Repository, a cloud-based data library."
  },
  {
    "objectID": "Take_Home_Ex/Take_Home_Ex1/Take_Home_Ex1.html#aspatial-data",
    "href": "Take_Home_Ex/Take_Home_Ex1/Take_Home_Ex1.html#aspatial-data",
    "title": "Geospatial Analytics for Social Good: Spatial Distribution of Water Points in Nigeria",
    "section": "Aspatial Data",
    "text": "Aspatial Data\nThe data from WPdx Global Data Repositories will be used, WPdx+ data set."
  },
  {
    "objectID": "Take_Home_Ex/Take_Home_Ex1/Take_Home_Ex1.html#geospatial-data",
    "href": "Take_Home_Ex/Take_Home_Ex1/Take_Home_Ex1.html#geospatial-data",
    "title": "Geospatial Analytics for Social Good: Spatial Distribution of Water Points in Nigeria",
    "section": "Geospatial Data",
    "text": "Geospatial Data\nNigeria Level-2 Administrative Boundary (also known as Local Government Area) polygon features GIS data will be used downloaded from geoBoundaries."
  },
  {
    "objectID": "Take_Home_Ex/Take_Home_Ex1/Take_Home_Ex1.html#data-wrangling",
    "href": "Take_Home_Ex/Take_Home_Ex1/Take_Home_Ex1.html#data-wrangling",
    "title": "Geospatial Analytics for Social Good: Spatial Distribution of Water Points in Nigeria",
    "section": "Data Wrangling",
    "text": "Data Wrangling\nFollowing tasks will be performed in geospatial analysis:\n\nUsing appropriate sf method, importing the shapefile into R and save it in a simple feature data frame format.\nUsing appropriate tidyr and dplyr methods, proportion of functional and non-functional water point at LGA level is derived.\nCombining the geospatial and aspatial data frame into simple feature data frame.\nPerforming outliers/clusters analysis by using appropriate local measures of spatial association methods.\nPerforming hotspot areas analysis by using appropriate local measures of spatial association methods."
  },
  {
    "objectID": "Take_Home_Ex/Take_Home_Ex1/Take_Home_Ex1.html#thematic-mapping",
    "href": "Take_Home_Ex/Take_Home_Ex1/Take_Home_Ex1.html#thematic-mapping",
    "title": "Geospatial Analytics for Social Good: Spatial Distribution of Water Points in Nigeria",
    "section": "Thematic Mapping",
    "text": "Thematic Mapping\n\nMaps are plotted to show the spatial distribution of functional and non-functional water point rate at LGA level by using appropriate thematic mapping technique provided by tmap package."
  },
  {
    "objectID": "Take_Home_Ex/Take_Home_Ex1/Take_Home_Ex1.html#analytical-mapping",
    "href": "Take_Home_Ex/Take_Home_Ex1/Take_Home_Ex1.html#analytical-mapping",
    "title": "Geospatial Analytics for Social Good: Spatial Distribution of Water Points in Nigeria",
    "section": "Analytical Mapping",
    "text": "Analytical Mapping\n\nHotspot areas and outliers/clusters maps of functional and non0functional water point rate at LGA level by using appropriate thematic mapping technique provided by tmap package."
  },
  {
    "objectID": "Take_Home_Ex/Take_Home_Ex1/Take_Home_Ex1.html#setting-the-analytical-tools",
    "href": "Take_Home_Ex/Take_Home_Ex1/Take_Home_Ex1.html#setting-the-analytical-tools",
    "title": "Geospatial Analytics for Social Good: Spatial Distribution of Water Points in Nigeria",
    "section": "Setting the Analytical Tools",
    "text": "Setting the Analytical Tools\nInstalling and launching R packages into R environment\n\npacman::p_load(sf, spdep, tmap, tidyverse,funModeling)\n\nExplanation of the following packages:\n\nsf: used for importing, managing, and processing geospatial data\ntidyverse: a collection of packages for data science tasks\ntmap: used for creating thematic maps, such as choropleth and bubble maps\nspdep: used for following computations:\n\nGlobal Spatial Autocorrelation (GSA) statistics\n\nLocal Indicator of Spatial Association (LISA) statistics for detecting clusters and outliers\n\nGetis-Ord’s Gi-statistics for detecting hot spot or/and cold spot area\n\nfunModeling: used for Exploratory data analysis, data preparation and model performance"
  },
  {
    "objectID": "Take_Home_Ex/Take_Home_Ex1/Take_Home_Ex1.html#import-shapefile-into-r-environment",
    "href": "Take_Home_Ex/Take_Home_Ex1/Take_Home_Ex1.html#import-shapefile-into-r-environment",
    "title": "Geospatial Analytics for Social Good: Spatial Distribution of Water Points in Nigeria",
    "section": "Import shapefile into R environment",
    "text": "Import shapefile into R environment\n\nImporting water point geospatial\nUsing, st_read() of sf package, Nigeria Level-2 Administrative Boundary shapefile is imported into R environment.\n\nwp <- st_read(dsn = \"Geodata\",\n              layer = \"geo_export\",\n              crs = 4326) %>%\n  filter(clean_coun == \"Nigeria\")\n\nThings to learn from the code chunk above:\n**st_read()** of sf package is used to import geo_export shapefile into R environment and save the imported geospatial data into simple feature data table.\n**filter()** of dplyr package is used to extract water point records of Nigeria. In the code chunk below, “write_rds()” of reader package is used to save the extracted sf table …..\nNext, `write_rds()` of readr package is used to save the extracted sf data table (i.e. wp) into an output file in rds data format. The output file is called *wp_nga.rds* and it is saved in *geodata* sub-folder.\n\nwrite_rds(wp, \"Geodata/wp_nga.rds\")\n\n\n\nImporting Nigeria LGA boundary data\nNow, we are going to import the LGA boundary data into R environment by using the code chunk below.\n\nnga <- st_read(dsn = \"Geodata\",\n               layer= \"geoBoundaries-NGA-ADM2\",\n               crs = 4326)\n\nThing to learn from the code chunk above.\n- `st_read()` of **sf** package is used to import *geoBoundaries-NGA-ADM2* shapefile into R environment and save the imported geospatial data into simple feature data table."
  },
  {
    "objectID": "Take_Home_Ex/Take_Home_Ex1/Take_Home_Ex1.html#recoding-the-na-values-into-string",
    "href": "Take_Home_Ex/Take_Home_Ex1/Take_Home_Ex1.html#recoding-the-na-values-into-string",
    "title": "Geospatial Analytics for Social Good: Spatial Distribution of Water Points in Nigeria",
    "section": "Recoding the NA values into string",
    "text": "Recoding the NA values into string\nIn the code chunk below, `replace_na()` is used to recode all the *NA* values in *status_cle* field into *Unknown*.\n\nwp_nga <- read_rds(\"geodata/wp_nga.rds\") %>%\n  mutate(status_cle = replace_na(status_cle, \"Unknown\"))"
  },
  {
    "objectID": "Take_Home_Ex/Take_Home_Ex1/Take_Home_Ex1.html#exploratory-data-analysis",
    "href": "Take_Home_Ex/Take_Home_Ex1/Take_Home_Ex1.html#exploratory-data-analysis",
    "title": "Geospatial Analytics for Social Good: Spatial Distribution of Water Points in Nigeria",
    "section": "Exploratory Data Analysis",
    "text": "Exploratory Data Analysis\nIn the code chunk below, freq() of funModeling package is used to display the distribution of status_cle field in wp_nga.\n\nfreq(data=wp_nga, \n     input = 'status_cle')"
  },
  {
    "objectID": "Take_Home_Ex/Take_Home_Ex1/Take_Home_Ex1.html#extracting-functional-water-point",
    "href": "Take_Home_Ex/Take_Home_Ex1/Take_Home_Ex1.html#extracting-functional-water-point",
    "title": "Geospatial Analytics for Social Good: Spatial Distribution of Water Points in Nigeria",
    "section": "Extracting functional water point",
    "text": "Extracting functional water point\nUsing, filter() of dplyr is used to select functional water points.\n\nwpt_functional <- wp_nga %>%\n  filter(status_cle %in%\n           c(\"Functional\", \n             \"Functional but not in use\",\n             \"Functional but needs repair\"))\n\n\nfreq(data=wpt_functional, \n     input = 'status_cle')"
  },
  {
    "objectID": "Take_Home_Ex/Take_Home_Ex1/Take_Home_Ex1.html#extracting-non-functional-water-points",
    "href": "Take_Home_Ex/Take_Home_Ex1/Take_Home_Ex1.html#extracting-non-functional-water-points",
    "title": "Geospatial Analytics for Social Good: Spatial Distribution of Water Points in Nigeria",
    "section": "Extracting non-functional water points",
    "text": "Extracting non-functional water points\nUsing, filter() of dplyr is used to select non-functional water points.\n\nwpt_nonfunctional <- wp_nga %>%\n  filter(status_cle %in%\n           c(\"Abandoned/Decommissioned\", \n             \"Abandoned\",\n             \"Non-Functional\",\n             \"Non functional due to dry season\",\n             \"Non-Functional due to dry season\"))\n\n\nfreq(data=wpt_nonfunctional, \n     input = 'status_cle')"
  },
  {
    "objectID": "Take_Home_Ex/Take_Home_Ex1/Take_Home_Ex1.html#extracting-water-point-with-unknown-class",
    "href": "Take_Home_Ex/Take_Home_Ex1/Take_Home_Ex1.html#extracting-water-point-with-unknown-class",
    "title": "Geospatial Analytics for Social Good: Spatial Distribution of Water Points in Nigeria",
    "section": "Extracting water point with unknown class",
    "text": "Extracting water point with unknown class\nUsing, filter() of dplyr is used to select water points with unknown status.\n\nwpt_unknown <- wp_nga %>%\n  filter(status_cle == \"Unknown\")"
  },
  {
    "objectID": "Take_Home_Ex/Take_Home_Ex1/Take_Home_Ex1.html#observations",
    "href": "Take_Home_Ex/Take_Home_Ex1/Take_Home_Ex1.html#observations",
    "title": "Geospatial Analytics for Social Good: Spatial Distribution of Water Points in Nigeria",
    "section": "Observations",
    "text": "Observations\nAbove visualization shows the spatial distribution of water points in functional, non functional and unknown classes. The darker blue shade shows that proportion of water points in the particular region is highest among all the neighboring regions.\nIt can be observed that cluster of Wukari, Gassol, Ardo Kola, Zing, Bali has high proportion of functional, non functional and unknown class water points."
  },
  {
    "objectID": "Take_Home_Ex/Take_Home_Ex1/Take_Home_Ex1.html#row--standardized-weight-matrix",
    "href": "Take_Home_Ex/Take_Home_Ex1/Take_Home_Ex1.html#row--standardized-weight-matrix",
    "title": "Geospatial Analytics for Social Good: Spatial Distribution of Water Points in Nigeria",
    "section": "Row- Standardized weight matrix",
    "text": "Row- Standardized weight matrix\nIn this method, each neighboring polygon will assigned with equal weights (style=“W”). W means sum over all links to n. It is done by assigning the fraction 1/(#ofneighbors) to each neighboring county then summing the weighted income values.\nThere are 2 major arguments of function nb2listw():\n\nstyles can take values “W”, “B”, “C”, “U”, “minmax” and “S”.\nIf zero policy is set to TRUE, weights vectors of zero length are inserted for regions without neighbor in the neighbours list. These will in turn generate lag values of zero, equivalent to the sum of products of the zero row t(rep(0, length=length(neighbours))) %*% x, for arbitrary numerical vector x of length length(neighbours). The spatially lagged value of x for the zero-neighbour region will then be zero, which may (or may not) be a sensible choice.\n\n\nrswm_q <- nb2listw(wm_q, \n                   style=\"W\", \n                   zero.policy = TRUE)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 774 \nNumber of nonzero links: 4440 \nPercentage nonzero weights: 0.7411414 \nAverage number of links: 5.736434 \n1 region with no links:\n86\n\nWeights style: W \nWeights constants summary:\n    n     nn  S0       S1       S2\nW 773 597529 773 285.0658 3198.414\n\n\nThe above summary report shows that there are 774 total number of regions. Using, row standardized weight matrix there are on an average 5 neighbors per region."
  },
  {
    "objectID": "Take_Home_Ex/Take_Home_Ex1/Take_Home_Ex1.html#observation",
    "href": "Take_Home_Ex/Take_Home_Ex1/Take_Home_Ex1.html#observation",
    "title": "Geospatial Analytics for Social Good: Spatial Distribution of Water Points in Nigeria",
    "section": "Observation",
    "text": "Observation\nIt can be observed that Z value, 0.433, is greater than zero. Therefore, it can be concluded non functional spatial distribution of water points are clusters and observations tend to be similar. But before making final conclusion on statistical test, we will perform Monte Carlo Moran’s I simulation."
  },
  {
    "objectID": "Take_Home_Ex/Take_Home_Ex1/Take_Home_Ex1.html#computing-monte-carlos-morans-i",
    "href": "Take_Home_Ex/Take_Home_Ex1/Take_Home_Ex1.html#computing-monte-carlos-morans-i",
    "title": "Geospatial Analytics for Social Good: Spatial Distribution of Water Points in Nigeria",
    "section": "Computing Monte Carlo’s Moran’s I",
    "text": "Computing Monte Carlo’s Moran’s I\nMonte Carlo simulation is performed when there is a doubt that the assumptions of Moran’s I are true (normality and randomization).\nThe code chunk below performs permutation test for Moran’s I statistic by using moran.mc() of spdep. A total of 1000 simulation will be performed.\nnsim is set as 999 for 1000 simulations as 0 is also included.\n\nset.seed(1234)\nbperm= moran.mc(nga_wp$`wpt non-functional`, \n                listw=rswm_q, \n                nsim=999, \n                zero.policy = TRUE, \n                na.action=na.omit)\nbperm\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  nga_wp$`wpt non-functional` \nweights: rswm_q  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.43393, observed rank = 1000, p-value = 0.001\nalternative hypothesis: greater\n\n\n\nObservations\nNull Hyposthesis: The distribution of non functional water points are random phenomenon.\nAlternative Hypothesis: that the distribution non functional water points is spatially dependent through calculating the Moran’s I statistic and Geary’s C ratio for the data set\nFrom the above results, we can observe p value is less than significant level of 0.05. Therefore, we can reject the null hypothesis. It can be concluded that distribution of non functional water points are spatially dependent through calculating the Moran’s I statistics ratio for the data set."
  },
  {
    "objectID": "Take_Home_Ex/Take_Home_Ex1/Take_Home_Ex1.html#visualizing-monte-carlo-morans-i",
    "href": "Take_Home_Ex/Take_Home_Ex1/Take_Home_Ex1.html#visualizing-monte-carlo-morans-i",
    "title": "Geospatial Analytics for Social Good: Spatial Distribution of Water Points in Nigeria",
    "section": "Visualizing Monte Carlo Moran’s I",
    "text": "Visualizing Monte Carlo Moran’s I\nMonte Carlo Moran’s I statistics testing will be visualized by plotting the distribution of the statistical values as a histogram by using the code chunk below:\nIn the code chunk below hist() and abline() of R Graphics are used.\n\nmean(bperm$res[1:999])\n\n[1] -0.0005316305\n\n\n\nvar(bperm$res[1:999])\n\n[1] 0.0004973974\n\n\n\nsummary(bperm$res[1:999])\n\n      Min.    1st Qu.     Median       Mean    3rd Qu.       Max. \n-0.0651127 -0.0150421 -0.0020783 -0.0005316  0.0143726  0.0798599 \n\n\n\nhist(bperm$res, \n     freq=TRUE, \n     breaks=20, \n     xlab=\"Simulated Moran's I\")\nabline(v=0, \n       col=\"red\") \n\n\n\n\nLearnings from above code chunk :\nhist() -computes a histogram of the given data values.\nabline()- This function adds one or more straight lines through the current plot\nFrom the above histogram, it can interpreted that at Simulated Moran’s I value 0 then frequency of non functional spatial water distribution points are maximum."
  },
  {
    "objectID": "Take_Home_Ex/Take_Home_Ex1/Take_Home_Ex1.html#compute-morans-i-correlogram",
    "href": "Take_Home_Ex/Take_Home_Ex1/Take_Home_Ex1.html#compute-morans-i-correlogram",
    "title": "Geospatial Analytics for Social Good: Spatial Distribution of Water Points in Nigeria",
    "section": "Compute Moran’s I Correlogram",
    "text": "Compute Moran’s I Correlogram\nComputation of 6-lag spatial correlogram of non functional water points. The global spatial autocorrelation used in Moran’s I. The plot() of base Graph is then used to plot the output.\n\nMI_corr <- sp.correlogram(wm_q, \n                          nga_wp$`wpt non-functional`, \n                          order=6, \n                          method=\"I\", \n                          style=\"W\")\nplot(MI_corr)\n\n\n\n\nAbove plot might not provide complete interpretation as not all autocorrelation values are statistically significant. Therefore, full analysis report is printed using the below code chunk.\n\nprint(MI_corr)\n\nSpatial correlogram for nga_wp$`wpt non-functional` \nmethod: Moran's I\n           estimate expectation    variance standard deviate Pr(I) two sided\n1 (773)  4.3393e-01 -1.2953e-03  4.7152e-04          20.0433       < 2.2e-16\n2 (773)  2.6647e-01 -1.2953e-03  2.0206e-04          18.8374       < 2.2e-16\n3 (773)  1.9507e-01 -1.2953e-03  1.2189e-04          17.7863       < 2.2e-16\n4 (773)  1.4019e-01 -1.2953e-03  8.7589e-05          15.1181       < 2.2e-16\n5 (773)  6.3735e-02 -1.2953e-03  6.8779e-05           7.8413       4.459e-15\n6 (773)  2.1698e-02 -1.2953e-03  5.7380e-05           3.0354        0.002402\n           \n1 (773) ***\n2 (773) ***\n3 (773) ***\n4 (773) ***\n5 (773) ***\n6 (773) ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\n\nObservations\nFrom the above output, it can be observed that all the 6 lag spatial correlogram, p value is less than the significant value of 0.05. Therefore null hypothesis, the non functional water points location of values may be altered without affecting the information content of the data, is rejected."
  },
  {
    "objectID": "Take_Home_Ex/Take_Home_Ex1/Take_Home_Ex1.html#computing-local-morans-i",
    "href": "Take_Home_Ex/Take_Home_Ex1/Take_Home_Ex1.html#computing-local-morans-i",
    "title": "Geospatial Analytics for Social Good: Spatial Distribution of Water Points in Nigeria",
    "section": "Computing local Moran’s I",
    "text": "Computing local Moran’s I\nComputing local Moran’s I of non functional water points at the county level using localmoran() function in spdep.\n\nfips <- order(nga_wp$shapeName)\nlocalMI <- localmoran(nga_wp$`wpt non-functional`, rswm_q)\nhead(localMI)\n\n           Ii          E.Ii       Var.Ii        Z.Ii Pr(z != E(Ii))\n1 -0.32365786 -9.995243e-04 1.924638e-01 -0.73547576     0.46204980\n2  0.07000542 -4.092463e-05 1.053077e-02  0.68258288     0.49487045\n3  1.25819985 -1.627684e-03 4.181728e-01  1.94819847     0.05139122\n4 -0.03537489 -5.427505e-05 5.954304e-03 -0.45773361     0.64714384\n5  0.01201533 -2.590965e-04 3.988998e-02  0.06145673     0.95099547\n6  0.00768085 -1.538445e-07 1.687859e-05  1.86960486     0.06153871\n\n\nlocalmoran() function returns a matrix of values whose columns are:\n\nIi: the local Moran’s I statistics\nE.Ii: the expectation of local moran statistic under the randomisation hypothesis\nVar.Ii: the variance of local moran statistic under the randomisation hypothesis\nZ.Ii:the standard deviate of local moran statistic\nPr(): the p-value of local moran statistic\n\nList the content of the local Moran matrix derived by using printCoefmat()"
  },
  {
    "objectID": "Take_Home_Ex/Take_Home_Ex1/Take_Home_Ex1.html#mapping-the-local-morans-i",
    "href": "Take_Home_Ex/Take_Home_Ex1/Take_Home_Ex1.html#mapping-the-local-morans-i",
    "title": "Geospatial Analytics for Social Good: Spatial Distribution of Water Points in Nigeria",
    "section": "Mapping the Local Moran’s I",
    "text": "Mapping the Local Moran’s I\nBefore mapping, append the local Moran’s I dataframe (i.e. localMI) onto nga_wp SpatialPolygonDataFrame\n\nnga_wp.localMI <- cbind(nga_wp,localMI) %>%\n  rename(Pr.Ii = Pr.z....E.Ii..)\n\n\ntm_shape(nga_wp.localMI) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\",\n          palette = \"RdBu\",\n          title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5)\n\nVariable(s) \"Ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette."
  },
  {
    "objectID": "Take_Home_Ex/Take_Home_Ex1/Take_Home_Ex1.html#mapping-local-morans-i-p-values",
    "href": "Take_Home_Ex/Take_Home_Ex1/Take_Home_Ex1.html#mapping-local-morans-i-p-values",
    "title": "Geospatial Analytics for Social Good: Spatial Distribution of Water Points in Nigeria",
    "section": "Mapping local Moran’s I p values",
    "text": "Mapping local Moran’s I p values\nAs li has both positive and negative values, therefore it is useful to consider p values for each of these values:\n\ntm_shape(nga_wp.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)"
  },
  {
    "objectID": "Take_Home_Ex/Take_Home_Ex1/Take_Home_Ex1.html#mapping-both-local-morans-i-values-and-p-values-non-functional",
    "href": "Take_Home_Ex/Take_Home_Ex1/Take_Home_Ex1.html#mapping-both-local-morans-i-values-and-p-values-non-functional",
    "title": "Geospatial Analytics for Social Good: Spatial Distribution of Water Points in Nigeria",
    "section": "Mapping both local Moran’s I values and p values (Non Functional)",
    "text": "Mapping both local Moran’s I values and p values (Non Functional)\nBoth the maps are plotted together for in depth comparison analysis for non functional water points in Nigeria.\n\nlocalMI.map <- tm_shape(nga_wp.localMI) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\", \n          title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5)\n  tm_layout(main.title= \"Local Moran's I Statistics\",\n            main.title.size = 0.7,\n            main.title.fontface = \"bold\")\n\n$tm_layout\n$tm_layout$main.title\n[1] \"Local Moran's I Statistics\"\n\n$tm_layout$main.title.size\n[1] 0.7\n\n$tm_layout$main.title.fontface\n[1] \"bold\"\n\n$tm_layout$style\n[1] NA\n\n\nattr(,\"class\")\n[1] \"tm\"\n\npvalue.map <- tm_shape(nga_wp.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n  tm_layout(main.title= \"Local Moran's p-values(Non Functional)\",\n            main.title.size = 0.7,\n            main.title.fontface = \"bold\")\n\n$tm_layout\n$tm_layout$main.title\n[1] \"Local Moran's p-values(Non Functional)\"\n\n$tm_layout$main.title.size\n[1] 0.7\n\n$tm_layout$main.title.fontface\n[1] \"bold\"\n\n$tm_layout$style\n[1] NA\n\n\nattr(,\"class\")\n[1] \"tm\"\n\ntmap_arrange(localMI.map, pvalue.map, asp=1, ncol=2)\n\nVariable(s) \"Ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\nObservation\n“Green” regions are outlier regions with with relatively low value in surrounding regions. When same locations are compared in “Local Moran’s I p value” map, their p value is less than significant value 0.05, therefore these outlier regions are statistically significant.\n“Light Orange” regions are clustered regions with relatively high value in surrounding regions. When these locations are compared with Local Moran’s p value map, their p values are more than significant value of 0.05, therefore, these clustered regions are not statistically significant."
  },
  {
    "objectID": "Take_Home_Ex/Take_Home_Ex1/Take_Home_Ex1.html#mapping-both-local-morans-i-values-and-p-values-functional",
    "href": "Take_Home_Ex/Take_Home_Ex1/Take_Home_Ex1.html#mapping-both-local-morans-i-values-and-p-values-functional",
    "title": "Geospatial Analytics for Social Good: Spatial Distribution of Water Points in Nigeria",
    "section": "Mapping both local Moran’s I values and p values (Functional)",
    "text": "Mapping both local Moran’s I values and p values (Functional)\nBoth the maps are plotted together for in depth comparison analysis for functional water points in Nigeria.\n\nfips <- order(nga_wp$shapeName)\nlocalMI_func <- localmoran(nga_wp$`wpt functional`, rswm_q)\nnga_wp.localMI_func <- cbind(nga_wp,localMI_func) %>%\n  rename(Pr.Ii = Pr.z....E.Ii..)\nlocalMI_func.map <- tm_shape(nga_wp.localMI_func) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\", \n          title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5)\n  tm_layout(main.title= \"Local Moran's I Statistics\",\n            main.title.size = 0.7,\n            main.title.fontface = \"bold\")\n\n$tm_layout\n$tm_layout$main.title\n[1] \"Local Moran's I Statistics\"\n\n$tm_layout$main.title.size\n[1] 0.7\n\n$tm_layout$main.title.fontface\n[1] \"bold\"\n\n$tm_layout$style\n[1] NA\n\n\nattr(,\"class\")\n[1] \"tm\"\n\nfunc_pvalue.map <- tm_shape(nga_wp.localMI_func) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n  tm_layout(main.title= \"Local Moran's p-values(Functional)\",\n            main.title.size = 0.7,\n            main.title.fontface = \"bold\")\n\n$tm_layout\n$tm_layout$main.title\n[1] \"Local Moran's p-values(Functional)\"\n\n$tm_layout$main.title.size\n[1] 0.7\n\n$tm_layout$main.title.fontface\n[1] \"bold\"\n\n$tm_layout$style\n[1] NA\n\n\nattr(,\"class\")\n[1] \"tm\"\n\ntmap_arrange(localMI.map, pvalue.map, asp=1, ncol=2)\n\nVariable(s) \"Ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\nObservation\n“Green” regions are outlier regions with with relatively low value in surrounding regions. When same locations are compared in “Local Moran’s I p value” map, their p value is less than significant value 0.05, therefore these outlier regions are statistically significant.\n“Light Orange” regions are clustered regions with relatively high value in surrounding regions. When these locations are compared with Local Moran’s p value map, their p values are more than significant value of 0.05, therefore, these clustered regions are not statistically significant. But some regions in the north side has p value less than significant value, therefore those clustered areas are statistically significant regions for functional distribution of spatial water points in Nigeria."
  },
  {
    "objectID": "Take_Home_Ex/Take_Home_Ex1/Take_Home_Ex1.html#plotting-moran-scatterplot-with-standardized-variables",
    "href": "Take_Home_Ex/Take_Home_Ex1/Take_Home_Ex1.html#plotting-moran-scatterplot-with-standardized-variables",
    "title": "Geospatial Analytics for Social Good: Spatial Distribution of Water Points in Nigeria",
    "section": "Plotting Moran scatterplot with standardized variables",
    "text": "Plotting Moran scatterplot with standardized variables\nFirst, using scale() to centers and scales the variable. Here centering is done by subtracting the mean (omitting NAs) the corresponding columns, and scaling is done by dividing the (centered) variable by their standard deviations.\nThe as.vector() added to the end is to make sure that the data type we get out of this is a vector, that map neatly into out dataframe.\n\nnga_wp$Z.nonfunc <- scale(nga_wp$`wpt non-functional`) %>% \n  as.vector \nnci2 <- moran.plot(nga_wp$Z.nonfunc, rswm_q,\n                   labels=as.character(nga_wp$shapeName),\n                   xlab=\"z-no functional points\", \n                   ylab=\"Spatially Lag non functional points\")\n\n\n\n\nNOTE: One of the drawback of Moran’s I scatterplot is that it does not indicate whether the above regions are significant or not."
  },
  {
    "objectID": "Take_Home_Ex/Take_Home_Ex1/Take_Home_Ex1.html#preparing-lisa-map-classes-non-functional",
    "href": "Take_Home_Ex/Take_Home_Ex1/Take_Home_Ex1.html#preparing-lisa-map-classes-non-functional",
    "title": "Geospatial Analytics for Social Good: Spatial Distribution of Water Points in Nigeria",
    "section": "Preparing LISA Map Classes (Non Functional)",
    "text": "Preparing LISA Map Classes (Non Functional)\n\nquadrant <- vector(mode=\"numeric\",length=nrow(localMI))\nnga_wp$lag_non_func_points <- lag.listw(rswm_q, nga_wp$`wpt non-functional`)\nDV <- nga_wp$lag_non_func_points - mean(nga_wp$lag_non_func_points)     \nC_mI <- localMI[,1] - mean(localMI[,1])    \nsignif <- 0.05       \nquadrant[DV <0 & C_mI>0] <- 1\nquadrant[DV >0 & C_mI<0] <- 2\nquadrant[DV <0 & C_mI<0] <- 3  \nquadrant[DV >0 & C_mI>0] <- 4      \nquadrant[localMI[,5]>signif] <- 0\n\nFor each country/administrative region, LISA classification of the scores are assigned as follows:\n\nIf DV > 0 & C_mI > 0; it is categorised as “High-High” [4]\nIf DV < 0 & C_mI < 0; it is categorised as “Low-Low” [3]\nIf DV < 0 & C_mI > 0; it is categorised as “Low-High” [1]\nIf DV > 0 & C_mI < 0; it is categorised as “High-Low” [2]"
  },
  {
    "objectID": "Take_Home_Ex/Take_Home_Ex1/Take_Home_Ex1.html#plotting-lisa-map-non-functional",
    "href": "Take_Home_Ex/Take_Home_Ex1/Take_Home_Ex1.html#plotting-lisa-map-non-functional",
    "title": "Geospatial Analytics for Social Good: Spatial Distribution of Water Points in Nigeria",
    "section": "Plotting LISA Map (Non Functional)",
    "text": "Plotting LISA Map (Non Functional)\n\nnga_wp.localMI$quadrant <- quadrant\ncolors <- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters <- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\ntm_shape(nga_wp.localMI) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n\n\n\n\nFor effective interpretation, it is better to plot both the wpt non functional map and its LISA classification map next to each other.\n\nnonfunc <- tm_shape(nga_wp)+\n      tm_fill(\"wpt non-functional\",\n              style= \"jenks\",\n              n=6,\n              title= \"wpt non functional\")+\n      tm_layout(main.title= \"NonFunctional WaterPoints\")+\n      tm_borders(alpha=0.5)\n\nnga_wp.localMI$quadrant <- quadrant\ncolors <- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters <- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\nLISAmap <- tm_shape(nga_wp.localMI) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars= c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)+\n  tm_layout(main.title= \"LISA map with classification\")\n\ntmap_arrange(nonfunc, LISAmap, \n             asp=1, ncol=2)\n\n\n\n\n\nObservation\nIt can be observed that regions with more than 100 non functional water points are clustered regions with relatively high values of the surrounding regions as observed from the LISA classification map. All the high-high values are the clusters where indicates high spatial correlation where non functional water points areas are clustered closely together. “Dark Blue”, low low regions are the clusters of low frequency of non functional spatial distribution of water points. That means north east region of Nigeria has high frequency of functional water points distribution."
  },
  {
    "objectID": "Take_Home_Ex/Take_Home_Ex1/Take_Home_Ex1.html#getis-and-ords-g-statistics",
    "href": "Take_Home_Ex/Take_Home_Ex1/Take_Home_Ex1.html#getis-and-ords-g-statistics",
    "title": "Geospatial Analytics for Social Good: Spatial Distribution of Water Points in Nigeria",
    "section": "Getis and Ord’s G-Statistics",
    "text": "Getis and Ord’s G-Statistics\nIt is an alternative spatial statistics to detect spatial anomalies, looking at neighbors within a defined proximity to identify where either high or low values clutser spatially. Statistically significant hot-spots are recognised as areas of high values where other areas within a neighbourhood range also share high values too. The analysis consists of three steps:\n\nDeriving spatial weight matrix\nComputing Gi statistics\nMapping Gi statistics"
  },
  {
    "objectID": "Take_Home_Ex/Take_Home_Ex1/Take_Home_Ex1.html#deriving-distance-based-weight-matrix",
    "href": "Take_Home_Ex/Take_Home_Ex1/Take_Home_Ex1.html#deriving-distance-based-weight-matrix",
    "title": "Geospatial Analytics for Social Good: Spatial Distribution of Water Points in Nigeria",
    "section": "Deriving Distance-based weight matrix",
    "text": "Deriving Distance-based weight matrix\nFirst, defining a new set of neighbors. Whist the spatial autocorrelation considered units which shared borders, for Getis-Ord we are defining neighbours based on distance.\nThere are two type of distance-based proximity matrix, they are:\n\nfixed distance weight matrix; and\nadaptive distance weight matrix.\n\nDeriving the centroid\nCoordinates in separate dataframe is required. The mapping function applies a given function to each element of a vector and returns a vector of the same length. Our input vector will be the geometry column of us.bound. Our function will be st_centroid(). We will be using map_dbl variation of map from the purrr package.\nCalculation longitude, first value in each centroid; latitude, second value in each centroid; and then combining both longitude and latitude using the code chunk below.\n\nlongitude <- map_dbl(nga_wp$geometry, ~st_centroid(.x)[[1]])\nlatitude <- map_dbl(nga_wp$geometry, ~st_centroid(.x)[[2]])\ncoords <- cbind(longitude, latitude)\n\n\nDetermine the cut-off distance\nUpper limit for the distance is calculated using the following steps:\n\nReturn a matrix with the indices of points belonging to the set of the k nearest neighbours of each other by using knearneigh() of spdep.\nConvert the knn object returned by knearneigh() into a neighbours list of class nb with a list of integer vectors containing neighbour region number ids by using knn2nb()\nReturn the length of neighbour relationship edges by using nbdists() of spdep. The function returns in the units of the coordinates if the coordinates are projected, in km otherwise.\nRemove the list structure of the returned object by using unlist()\n\n\nk1 <- knn2nb(knearneigh(coords))\nk1dists <- unlist(nbdists(k1, coords, longlat = TRUE))\nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  2.662  12.815  20.242  22.031  27.706  71.661 \n\n\nThe summary report shows that the largest first nearest neighbour distance is 71.66 km, so using this as the upper threshold gives certainty that all units will have at least one neighbour.\n\n\nComputing fixed distance weight matrix\nUsing dnearneigh(), distance weight matrix is computed as shown in the code chunk below.\nThe functions dnearneigh() identifies neighbours of region points by Euclidean distance in the metric of the points between lower (greater than or equal to (changed from version 1.1-7)) and upper (less than or equal to) bounds, or with longlat = TRUE, by Great Circle distance in kilometers.\n\nwm_d62 <- dnearneigh(coords, 0, 71, longlat = TRUE)\nwm_d62\n\nNeighbour list object:\nNumber of regions: 774 \nNumber of nonzero links: 17684 \nPercentage nonzero weights: 2.951879 \nAverage number of links: 22.84755 \n2 regions with no links:\n236 670\n\n\nNext, using nb2listw() nb objects are converted into spatial weight objects.\n\nwm62_lw <- nb2listw(wm_d62, style = 'B')\nsummary(wm62_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 774 \nNumber of nonzero links: 17684 \nPercentage nonzero weights: 2.951879 \nAverage number of links: 22.84755 \n2 regions with no links:\n236 670\nLink number distribution:\n\n 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 \n 2  5  8 11 22 34 35 38 34 28 33 31 20 16 24 13 14 11 19 12 18 14 14  8  9  9 \n26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 \n10 10 12 10 14 11 10  9  8  9 13 14 10 14 12  5  6  4  3  7  7 14  4  3  3  6 \n52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 \n 2  3  3  4  7  4  5  4  6  5  8  3  5  1  4 \n5 least connected regions:\n90 112 123 237 710 with 1 link\n4 most connected regions:\n25 366 585 728 with 66 links\n\nWeights style: B \nWeights constants summary:\n    n     nn    S0    S1      S2\nB 772 595984 17684 35368 2499640\n\n\nFrom the summary report it can be observed that there are on an average 22 neighbors of each regions under Binary Weight style. There are 2 regions with no neighbors. There are 5 regions which are least connected and 4 regions which has most number of links.\n\n\n** **Computing Adaptive distance based matrix\nMore densely settled areas (usually the urban areas) tend to have more neighbors and the less densely settled areas (usually the rural counties) tend to have lesser neighbors.\nIt is possible to control the numbers of neighbors directly using k-nearest neighbors, either accepting asymmetric neighbors or imposing symmetry as shown in the code chunk below.\n\nknn <- knn2nb(knearneigh(coords, k=8))\nknn\n\nNeighbour list object:\nNumber of regions: 774 \nNumber of nonzero links: 6192 \nPercentage nonzero weights: 1.033592 \nAverage number of links: 8 \nNon-symmetric neighbours list\n\n\nFrom the above summary report, the neighbor list is converted into non symmetric format with average of 8 neighbor links for each region.\nNext, nb2listw() is used to convert the nb object into spatial weights object.\n\nknn_lw <- nb2listw(knn, style = 'B')\nsummary(knn_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 774 \nNumber of nonzero links: 6192 \nPercentage nonzero weights: 1.033592 \nAverage number of links: 8 \nNon-symmetric neighbours list\nLink number distribution:\n\n  8 \n774 \n774 least connected regions:\nwith 8 links\n774 most connected regions:\nwith 8 links\n\nWeights style: B \nWeights constants summary:\n    n     nn   S0    S1     S2\nB 774 599076 6192 11152 201942\n\n\nStyle B is the basic binary code. Using this style there are average of 8 neighbor links to each region."
  },
  {
    "objectID": "Take_Home_Ex/Take_Home_Ex1/Take_Home_Ex1.html#gi-statistics-using-fixed-distance",
    "href": "Take_Home_Ex/Take_Home_Ex1/Take_Home_Ex1.html#gi-statistics-using-fixed-distance",
    "title": "Geospatial Analytics for Social Good: Spatial Distribution of Water Points in Nigeria",
    "section": "Gi statistics using fixed distance",
    "text": "Gi statistics using fixed distance\n\nfips <- order(nga_wp$shapeName)\ngi.fixed <- localG(nga_wp$`wpt non-functional`, wm62_lw)\ngi.fixed\n\n  [1] -3.348848510 -3.432532730 -1.589665473  0.113339395 -1.363966124\n  [6]  3.161221974 -1.017375687 -2.088159853  0.776431297 -4.020379175\n [11] -3.635820981  0.702832702  1.055764252 -1.264802044 -3.110010299\n [16]  4.281847224  0.725337035 -0.033171525 -0.823550896  0.141837847\n [21] -0.427268560 -2.578743915 -5.897926487  0.049022130 -4.652504229\n [26] -3.452647980 -3.056658617  2.555224986  3.153120642  3.901782770\n [31] -0.390117212 -2.070944294 -0.009557357  2.531532168  0.514284269\n [36]  2.815784731  2.430344350  2.342939538  1.951819309  1.923834580\n [41]  2.189732582 -0.364515733 -3.863991996  4.539963185  4.082258876\n [46]  2.960876658 -0.335187455  1.174606575 -2.818169461  3.031848803\n [51] -2.371523485 -5.796181772 -4.872262015 -6.068345564 -2.536132075\n [56] -2.756531849 -3.942237780 -4.258256176  0.143459725 -1.448055204\n [61] -0.366473663 -2.066023813  1.356005045  1.194172355  0.652025599\n [66] -0.550853484  5.492965282 -3.965407823 -2.874241897  4.460714253\n [71]  5.690656587  0.244005085 -0.071755731 -0.214651262  0.573340897\n [76]  1.808067651 -4.320991146 -6.186477996 -6.309180467 -5.207421240\n [81]  1.798135704 -3.013414825 -1.660576684  2.137290571 -2.018000155\n [86]  0.623793290  0.757892441 -0.099161719  0.020676566  1.684553728\n [91] -1.948198468  2.410678427 -0.117791221 -0.029421610  1.201458413\n [96]  0.548772454  0.454599507 -1.004942188  2.121274047  0.686010456\n[101] -0.688531205  3.393488507 -2.591524615  0.736186536 -1.344148341\n[106]  1.685790888  3.988182031  1.596128255 -0.664937603  0.104980894\n[111]  0.219549037 -0.229631259  1.592460693 -0.422030089 -2.484382151\n[116] -0.540345373  2.442512423  3.190195650  3.702620975  5.823394201\n[121] -2.934486265 -2.886768071  0.145084529  4.988881138  0.130046388\n[126] -1.464279511  0.106421444  0.201990516 -0.393312606 -1.068709248\n[131]  1.186268374 -1.289733031  2.077417838 -2.648946273  1.159591379\n[136]  0.059052987  0.067444402 -0.147902789  0.228622037 -1.806873979\n[141]  1.812887562 -1.846516566 -1.926334770 -0.121743530  0.156286236\n[146] -2.048369790 -0.172882360  1.120676922  2.147844783 -1.227513805\n[151]  2.639444438  0.714385478 -0.156958684  1.429477727 -1.423205842\n[156] -1.187844283 -3.778952419 -0.875769922 -1.762442687 -2.518386165\n[161]  0.258868184  0.539598351  2.458417754  1.781772129 -5.816337514\n[166]  0.561636368  1.575812815 -0.773752615 -1.860847074  1.280717580\n[171]  1.854611860  5.856192407  4.989957416  4.033724333  5.464823561\n[176] -0.676315303 -2.182024741  1.120109169  5.194612379 -1.099862851\n[181] -4.910243501  3.538775896 -2.388675189 -0.280131713  3.480406092\n[186]  3.593257230  3.681519078  5.222838213 -5.583540157 -2.997311574\n[191] -4.129242012  3.414654359 -2.316903150 -2.763461602 -3.238408422\n[196] -2.959996402 -2.057701738 -2.595830905 -3.564150708 -1.685033484\n[201]  0.378605524 -0.389314795 -1.799439539 -3.798640473 -2.784879290\n[206] -2.510289793 -2.024514855 -2.221656911 -1.004363420 -2.015126329\n[211] -0.829283259 -0.508656153  3.547021283 -2.423128826 -5.557090370\n[216] -4.010019660  0.515443851  0.292742614 -1.644311143  0.830222941\n[221] -0.506251570 -0.199632586 -2.252334448  1.008658912 -2.177038040\n[226]  2.610055204 -0.173859919  0.192028601  1.398393245 -1.170735692\n[231] -0.669138452 -1.291117026  1.534589407 -0.552932695 -1.545778111\n[236]          NaN  1.120046336 -0.062063707  0.424771303  2.005471868\n[241] -1.494246043 -1.152197413 -0.292155473 -2.495066563  3.597694901\n[246] -2.760845662  4.843404849 -2.514877095 -1.081449336 -2.224024251\n[251] -0.263021775 -2.197000488 -0.773014707  0.679853724  1.184903014\n[256] -0.688895340  0.835860320  1.665480432 -0.276183613 -0.543305101\n[261] -2.760551642 -0.870753720  0.094730230 -2.036858875  0.069630720\n[266] -0.620360494 -2.323791288  0.359809721  0.352694668  1.443057617\n[271] -1.870238256 -0.127289098 -2.296239740 -2.721982870  0.312432299\n[276]  0.179029577 -0.324605266 -0.216676592 -0.173844224 -3.201474138\n[281] -1.045121509 -1.112143270 -0.805478127 -3.016204930 -0.114147292\n[286] -0.267002247  1.586942640 -0.634976223 -1.884434418  2.772393205\n[291] -5.675407609 -5.417265121 -5.581997167 -5.645672324 -1.160420462\n[296]  5.308875113 -2.648751737  5.756947181  4.894804581  3.577758067\n[301]  4.343825807  6.579548445  3.543207636  4.384093078  4.679945236\n[306] -2.646203263  4.339778492 -2.264542353 -3.349198411 -2.512053022\n[311] -2.945054715 -2.447659681 -5.501999047 -4.272652135  1.557440322\n[316] -0.160873721 -0.328042277 -1.620924680  4.936525818  2.622911171\n[321] -2.455927169 -3.306403294 -2.709842509  1.784926039 -4.594865989\n[326] -2.160496305 -3.300485838  4.276102225  3.564297342  3.561672039\n[331] -1.318151071 -2.797994193 -1.813519982 -1.429409932 -2.015563459\n[336] -3.674260707  2.082058854 -2.445921673  6.614105137  1.382610743\n[341]  4.544347983  6.062954743  5.979126881  5.902900049 -1.047772072\n[346]  6.333300963  4.995323892  5.130215108  0.536815226  1.009304780\n[351] -0.828315314 -2.431134910  1.036084587  0.374572475  5.257123432\n[356]  5.585950190  5.267655199  1.906278244 -0.627554080  4.179256138\n[361] -0.119187198 -1.401581288 -2.196235656 -3.680068879 -3.668227541\n[366] -5.428322612  5.600859961 -4.320779563  1.408095747 -2.652284390\n[371] -2.847274011 -5.438182761  0.898056953  0.173805468 -0.101787364\n[376] -2.673713942 -0.348331945  2.196547231  2.514018343  2.804935219\n[381] -1.854248322  0.487942330  0.311991276  0.911325262 -1.063604619\n[386]  1.212812858  2.316697580 -2.440967637  1.251429070  1.236115660\n[391]  2.184891433  1.935654066  0.011466046 -2.194845616  1.598691171\n[396]  3.540574893  4.231596894  1.447800809  0.799794109 -2.457919866\n[401]  1.772914386 -0.268816132  1.405225831 -0.555898232  0.082418517\n[406] -1.948198468  1.847414820  2.021676815  0.637056192 -1.080148731\n[411]  1.884951977 -0.443922539 -2.162730147 -0.956823942 -2.120890625\n[416]  1.995959410  1.855048198  0.327505784  0.612479340  1.196635670\n[421]  2.341147456  1.521648327  2.860447453 -0.576599173  1.185681712\n[426]  0.868321123  0.918433123  1.024916241  1.315477808 -2.261052160\n[431] -0.711633145  1.693189476 -0.161546971 -1.180002734 -0.519957868\n[436]  0.480865257 -0.023525701  0.816547924 -2.986919842 -2.022562511\n[441]  2.945576975  0.236383234 -2.276826787  0.346622308  3.225510294\n[446]  0.141195231 -1.948198468 -2.166185926 -0.304732114 -1.678209879\n[451] -0.077784229  1.486820572 -0.350558950 -0.172688716  3.874598953\n[456]  2.734613662 -0.946553746 -0.893154811  1.405856198  1.651915853\n[461] -2.120238127 -2.250562638  0.299635475  2.403204055  2.355703735\n[466]  0.182681464  0.461268868  1.284473270 -0.876032736  1.775212915\n[471]  0.251618499  1.234240937 -2.075393553 -1.855805768 -2.564088057\n[476] -0.289549396 -2.022251358  1.473887228 -2.046130794  1.808919070\n[481] -2.101823984  2.221684318 -0.042952246  0.348434960  1.078730742\n[486] -0.840760920  2.426812838  1.397385472 -1.015314350  0.321474998\n[491]  2.082645441 -2.251048014 -0.977755253 -0.246290341  1.434639291\n[496] -0.901739116 -1.547674254 -5.156156049  0.054940274 -2.638122455\n[501]  1.268480668  3.094254765 -0.194529893 -0.313966594 -1.431240271\n[506]  6.041172167 -1.589665473  1.743803364 -2.760551642  3.153272216\n[511]  3.284232263 -2.550478322 -2.288447389 -1.274202922 -2.179477039\n[516] -0.707264676  0.922650813 -0.263031314 -1.921698231  0.102814669\n[521]  0.790347082 -4.381440553 -3.927509168 -2.892932956 -2.251048014\n[526] -2.543620049  0.557282662 -3.891566567  0.574393370  0.756177180\n[531] -5.471138786 -5.938446861 -1.709709591 -3.117949673 -5.492152859\n[536] -5.606522475 -5.618973848 -0.515820671 -0.571383221 -0.193869569\n[541] -3.123626957 -0.344958430 -5.600416519 -3.064747858  3.151085441\n[546]  0.811957111  1.536271171 -3.209648769 -3.730035613  5.872860082\n[551] -1.855553187 -4.021908221  2.744984024  3.591245065 -1.547156788\n[556]  1.154545972  4.810656906 -3.049961654 -0.153905834  5.434995377\n[561] -1.421598630 -3.955842591 -2.137278604 -5.405362922 -3.036948951\n[566]  3.218003229  3.116666538  2.999658554  3.183036481  2.350474047\n[571] -2.709627556  1.359957521 -5.372210862 -0.297402902 -4.619358330\n[576] -1.057027246 -0.238494621 -1.160752258 -5.645207375 -2.257655553\n[581]  1.797578622  4.824344951  1.430266528  1.473126655 -5.303652068\n[586]  1.424769791 -0.231830893 -2.654754579 -1.586384848 -3.128422351\n[591]  3.723846304 -1.904060280  5.431243750  0.470698168 -0.659045329\n[596]  0.556470660 -3.592970451  0.256010463  4.090246437  3.984939243\n[601] -0.754434140 -5.445672942 -5.315728141 -1.179495959 -2.165486874\n[606] -0.813164181 -0.304575308 -2.822590322  2.457114151  4.817377774\n[611] -5.737257784  5.412671025  0.146460905 -5.518407578 -5.352611061\n[616] -5.370972758 -2.035553998 -6.086892809 -5.555138500  1.416591734\n[621] -4.766409157 -5.358567655 -2.412300561 -3.741931123  5.570409188\n[626] -0.420763955  0.060487265  0.491342857  1.188273102  1.066922078\n[631] -4.200401688 -3.983920505 -4.122754002  2.824321938  4.211955620\n[636] -5.892336667 -2.736190204  1.272426169 -0.011164036  4.959834278\n[641] -0.881193792  3.269544728 -3.380476957  1.023310179 -3.379734872\n[646] -0.607049321  2.579605676 -1.178614030 -0.072709153 -0.850268093\n[651] -2.453779062  0.247008833  1.295040108 -1.948836534  1.016768780\n[656]  2.469639487  0.954197362  0.488566468  3.128772537 -0.949731974\n[661]  2.442589160 -0.210513696 -3.507089289  0.847606355 -0.495625472\n[666] -0.416884269  1.962603659  3.248003620 -2.213920752          NaN\n[671] -2.935737156 -0.325197316  0.581631336 -0.321670009 -1.973830206\n[676] -2.447752083  2.146268047 -0.700777696 -0.290156343 -0.629450771\n[681]  3.184822233 -2.262838173 -0.192825733  3.754325049 -0.689896348\n[686] -0.457936345 -2.826357481 -1.910711350  1.976773649  1.391165364\n[691] -0.199286257  2.155510713 -2.095570641  3.819605969  1.366715317\n[696]  1.560674795 -2.817696120  0.125836248  1.636225063 -1.175560679\n[701]  0.055608383 -0.625461203 -1.824555349  1.767369025 -1.709908224\n[706]  0.506105899 -1.761823571 -0.472091411  1.230288809 -0.988405790\n[711] -1.019453018 -1.477567358 -0.089605009 -1.180130024 -2.350956816\n[716] -4.433165223 -2.740732615 -0.002537007 -2.778273536 -3.116746157\n[721] -3.466201376 -1.474345630 -1.929333222  2.160767414 -2.831698150\n[726] -3.327557089 -3.511402549 -4.974851078 -3.664360457 -3.407917078\n[731] -1.681184212 -5.376490585 -0.012711517 -0.140079279  2.352847752\n[736]  1.816755695 -2.595829686 -0.335583156 -3.814253027  4.045492785\n[741] -0.849722211  3.901011070 -1.438326646 -1.108718218 -1.544513002\n[746] -2.611751385 -2.631979326  0.086781038  1.831604639 -1.318999747\n[751]  0.742005505 -0.834262076 -0.275555065 -0.131977456  3.832938265\n[756]  4.115994366  1.462908475  2.518137164  2.467186747  1.473797638\n[761]  1.061829381 -3.238581088 -2.727244998 -2.989164494  0.215063876\n[766] -1.246155527 -0.154782521  0.764496311  2.395691699  2.973143093\n[771]  3.452729251 -0.985401227 -1.050377924  0.191117063\nattr(,\"cluster\")\n  [1] Low  Low  Low  Low  Low  High Low  Low  High Low  Low  High Low  Low  High\n [16] High Low  High Low  High High Low  Low  High Low  Low  Low  High High High\n [31] Low  Low  Low  High High High Low  High High High High High Low  Low  Low \n [46] High High High High Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low \n [61] Low  Low  High Low  High Low  High Low  Low  High High Low  High Low  High\n [76] Low  Low  Low  Low  Low  High High High Low  High Low  Low  Low  High High\n [91] Low  High High High High High High Low  High Low  Low  High Low  High High\n[106] Low  High High High High Low  High Low  Low  Low  High Low  High High High\n[121] Low  Low  Low  High Low  Low  Low  Low  Low  Low  High Low  High Low  High\n[136] Low  High Low  High Low  Low  High Low  High High Low  Low  High High Low \n[151] Low  High Low  High High Low  Low  High Low  Low  High Low  High High Low \n[166] Low  Low  High Low  Low  High High Low  High Low  Low  Low  Low  High Low \n[181] Low  High Low  Low  High Low  High High Low  Low  Low  Low  Low  Low  Low \n[196] High Low  Low  Low  Low  High High Low  Low  Low  Low  Low  Low  Low  Low \n[211] Low  Low  High Low  Low  Low  High High Low  Low  High Low  Low  High Low \n[226] Low  Low  Low  Low  High Low  Low  High Low  High High High Low  High High\n[241] Low  High Low  Low  High Low  Low  Low  Low  Low  Low  Low  Low  High High\n[256] Low  Low  Low  Low  Low  Low  High High Low  High Low  Low  High Low  High\n[271] Low  High Low  Low  Low  High Low  Low  Low  Low  High Low  High High Low \n[286] Low  Low  Low  Low  High Low  Low  Low  Low  Low  Low  Low  High High High\n[301] High Low  High High High Low  High Low  Low  Low  Low  Low  Low  Low  Low \n[316] Low  Low  Low  High High Low  Low  Low  Low  Low  Low  Low  High High High\n[331] Low  High Low  Low  Low  Low  High High High Low  High Low  High High High\n[346] Low  Low  High Low  Low  Low  Low  High Low  High High Low  High Low  Low \n[361] Low  High High Low  Low  Low  High Low  High Low  Low  Low  Low  Low  High\n[376] Low  High High Low  High Low  Low  Low  High Low  High High Low  Low  High\n[391] Low  High Low  Low  High High Low  Low  Low  Low  High High High High Low \n[406] Low  High High High Low  High Low  High Low  High High High Low  Low  High\n[421] High Low  High Low  High High Low  Low  Low  Low  Low  Low  High High High\n[436] High High High Low  Low  High Low  Low  Low  High High Low  Low  Low  High\n[451] High High Low  High High High High Low  High High Low  Low  Low  High Low \n[466] Low  High Low  High High Low  Low  Low  Low  Low  High Low  High Low  High\n[481] Low  High Low  Low  Low  Low  High High Low  High Low  Low  High Low  High\n[496] High Low  Low  Low  Low  Low  High Low  Low  High Low  Low  High Low  High\n[511] High Low  Low  Low  Low  High High Low  High High High High Low  Low  Low \n[526] Low  High Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  High Low  High\n[541] Low  Low  Low  Low  High High High High High High High Low  High High Low \n[556] High High Low  High High Low  Low  Low  Low  Low  Low  High High High Low \n[571] Low  Low  High Low  High High High Low  Low  Low  Low  High High High Low \n[586] High High Low  Low  Low  Low  Low  High Low  Low  Low  Low  High High High\n[601] High Low  Low  Low  Low  Low  Low  High Low  High Low  High Low  Low  Low \n[616] Low  High Low  Low  High Low  Low  Low  Low  High Low  Low  Low  Low  Low \n[631] Low  Low  Low  High High Low  Low  Low  Low  High Low  High Low  High Low \n[646] Low  High Low  Low  Low  Low  High Low  Low  Low  High High High High High\n[661] Low  Low  High High Low  High High High Low  Low  High Low  High Low  Low \n[676] Low  High Low  High Low  High Low  Low  High Low  Low  Low  Low  High Low \n[691] High High Low  High Low  Low  Low  High High High High Low  Low  High Low \n[706] High Low  Low  High Low  High High High High Low  Low  Low  High Low  Low \n[721] High Low  Low  High High High Low  Low  Low  Low  Low  Low  Low  Low  High\n[736] High Low  High Low  High Low  High High Low  Low  Low  Low  High High Low \n[751] High Low  High High High High High High High Low  Low  Low  Low  Low  High\n[766] Low  Low  High Low  Low  High High High Low \nLevels: Low High\nattr(,\"gstari\")\n[1] FALSE\nattr(,\"call\")\nlocalG(x = nga_wp$`wpt non-functional`, listw = wm62_lw)\nattr(,\"class\")\n[1] \"localG\"\n\n\nThe output of localG() is a vector of G or Gstar values, with attributes “gstari” set to TRUE or FALSE, “call” set to the function call, and class “localG”.\nThe Gi statistics is represented as a Z-score. Greater values represent a greater intensity of clustering and the direction (positive or negative) indicates high or low clusters.\nJoining the Gi values to their corresponding nga_wp sf data frame:\n\nnga_wp.gi <- cbind(nga_wp, as.matrix(gi.fixed)) %>%\n  rename(gstat_fixed = as.matrix.gi.fixed.)\n\nFollowing steps were followed in the above code chunk:\n\nFirst, it convert the output vector (i.e. gi.fixed) into r matrix object by using as.matrix()\nNext, cbind() is used to join nga_wp@data and gi.fixed matrix to produce a new SpatialPolygonDataFrame called nga_wp.gi.\nLastly, the field name of the gi values is renamed to gstat_fixed by using rename()."
  },
  {
    "objectID": "Take_Home_Ex/Take_Home_Ex1/Take_Home_Ex1.html#mapping-gi-values-with-fixed-distance-weights",
    "href": "Take_Home_Ex/Take_Home_Ex1/Take_Home_Ex1.html#mapping-gi-values-with-fixed-distance-weights",
    "title": "Geospatial Analytics for Social Good: Spatial Distribution of Water Points in Nigeria",
    "section": "Mapping Gi values with fixed distance weights",
    "text": "Mapping Gi values with fixed distance weights\nThe code chunk below shows the functions used to map the Gi values derived using fixed distance weight matrix.\n\nnonfunc <- qtm(nga_wp, \"wpt non-functional\")\n\nGimap <-tm_shape(nga_wp.gi) +\n  tm_fill(col = \"gstat_fixed\", \n          style = \"pretty\",\n          palette=\"-RdBu\",\n          title = \"local Gi\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(nonfunc, Gimap, asp=1, ncol=2)\n\nVariable(s) \"gstat_fixed\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\nObservations\n It can be observed from wpt non functional map that city “Ifelodun” has the highest non functional spatial distribution of water points. According to local Gi map, when Gi statistics fixed distance weight method was used for calculation in which all the features should have atleast one neighbor, then hot spot region with maximum non functional water points is “Moba” as it is significant and positive with relatively high values of the surrounding locations."
  },
  {
    "objectID": "Take_Home_Ex/Take_Home_Ex1/Take_Home_Ex1.html#gi-statistics-using-adaptive-distance",
    "href": "Take_Home_Ex/Take_Home_Ex1/Take_Home_Ex1.html#gi-statistics-using-adaptive-distance",
    "title": "Geospatial Analytics for Social Good: Spatial Distribution of Water Points in Nigeria",
    "section": "Gi statistics using adaptive distance",
    "text": "Gi statistics using adaptive distance\nThe code chunk below are used to compute the Gi values for wpt non functional water point areas by using an adaptive distance weight matrix (i.e knb_lw).\n\nfips <- order(nga_wp$shapeName)\ngi.adaptive <- localG(nga_wp$`wpt non-functional`, knn_lw)\nnga_wp.gi <- cbind(nga_wp, as.matrix(gi.adaptive)) %>%\n  rename(gstat_adaptive = as.matrix.gi.adaptive.)"
  },
  {
    "objectID": "Take_Home_Ex/Take_Home_Ex1/Take_Home_Ex1.html#mapping-gi-values-with-the-adaptive-distance-weights",
    "href": "Take_Home_Ex/Take_Home_Ex1/Take_Home_Ex1.html#mapping-gi-values-with-the-adaptive-distance-weights",
    "title": "Geospatial Analytics for Social Good: Spatial Distribution of Water Points in Nigeria",
    "section": "Mapping Gi values with the adaptive distance weights",
    "text": "Mapping Gi values with the adaptive distance weights\nIn adaptive distance weights, weights adjusts itself according to the density of the data. Shorter bandwidths where data is dense and Longer bandwidths where data is sparse.\nUsing, choropleth mapping functions of tmap package location of hot spot and cold spot areas are visualized.\nThe code chunk below shows the functions used to map the Gi values derived using fixed distance weight matrix.\n\nnonfunc <- qtm(nga_wp, \"wpt non-functional\")\n\nGimap <- tm_shape(nga_wp.gi) + \n  tm_fill(col = \"gstat_adaptive\", \n          style = \"pretty\", \n          palette=\"-RdBu\", \n          title = \"local Gi\") + \n  tm_borders(alpha = 0.5)\n\ntmap_arrange(nonfunc, \n             Gimap, \n             asp=1, \n             ncol=2)\n\nVariable(s) \"gstat_adaptive\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\nObservations\nIt can be observed from wpt non functional map that city “Ifelodun” has the highest non functional spatial distribution of water points. According to local Gi map, when Gi statistics adaptive distance weight method was used for calculations, number of ‘dark red’ regions increased from 1. That means number of regions with hot spot non functional water points in Nigeria are more sparse."
  },
  {
    "objectID": "Take_Home_Ex/Take_Home_Ex1/Take_Home_Ex1.html#resources-used",
    "href": "Take_Home_Ex/Take_Home_Ex1/Take_Home_Ex1.html#resources-used",
    "title": "Geospatial Analytics for Social Good: Spatial Distribution of Water Points in Nigeria",
    "section": "Resources Used",
    "text": "Resources Used\nBelow are the resources used for the analysis for this Take Home Exercise . Special thanks to prof who recommended Senior Sample submissions.\n\nMegan Sim Tze Yen, Analysing and Visualising Spatio-temporal Patterns of COVID-19 in DKI Jakarta, Indonesia\nR Function List\nResearch Paper, Is there space for violence?: A data-driven approach to the exploration of spatial-temporal dimensions of conflict\nResearch Paper, Why Are So Many Water Points in Nigeria Non-Functional?"
  },
  {
    "objectID": "Take_Home_Ex/Take_Home_Ex2/Take_Home_Ex2.html",
    "href": "Take_Home_Ex/Take_Home_Ex2/Take_Home_Ex2.html",
    "title": "Regionalisation of Multivariate Water Point Attributes with Non-spatially Constrained and Spatially Constrained Clustering Methods",
    "section": "",
    "text": "Regionalization, creating regions, is a special kind of clustering where similar statistical attributes and spatial locations are grouped. There is a constrained that two regions can only be grouped if there exist a path between the regions that never leaves. These paths often model the spatial relationships in the data, such as contiguity or proximity."
  },
  {
    "objectID": "Take_Home_Ex/Take_Home_Ex2/Take_Home_Ex2.html#aspatial-data",
    "href": "Take_Home_Ex/Take_Home_Ex2/Take_Home_Ex2.html#aspatial-data",
    "title": "Regionalisation of Multivariate Water Point Attributes with Non-spatially Constrained and Spatially Constrained Clustering Methods",
    "section": "Aspatial Data",
    "text": "Aspatial Data\nThe data from WPdx Global Data Repositories will be used, WPdx+ data set."
  },
  {
    "objectID": "Take_Home_Ex/Take_Home_Ex2/Take_Home_Ex2.html#geospatial-data",
    "href": "Take_Home_Ex/Take_Home_Ex2/Take_Home_Ex2.html#geospatial-data",
    "title": "Regionalisation of Multivariate Water Point Attributes with Non-spatially Constrained and Spatially Constrained Clustering Methods",
    "section": "Geospatial Data",
    "text": "Geospatial Data\nNigeria Level-2 Administrative Boundary (also known as Local Government Area) polygon features GIS data will be used downloaded from geoBoundaries."
  },
  {
    "objectID": "Take_Home_Ex/Take_Home_Ex2/Take_Home_Ex2.html#data-wrangling",
    "href": "Take_Home_Ex/Take_Home_Ex2/Take_Home_Ex2.html#data-wrangling",
    "title": "Regionalisation of Multivariate Water Point Attributes with Non-spatially Constrained and Spatially Constrained Clustering Methods",
    "section": "Data Wrangling",
    "text": "Data Wrangling\nFollowing data wrangling tasks will be performed in this take home exercise:\n\nImporting shapefile into R environment using appropriate sf method\nProportion of funtional and non functional water points are derived using appropriate tidyr and dplyr methods\nGeospatial and Aspatial data is combined into single feature data frame\nDelineating water point measures functional regions by using conventional hierarchical clustering\nDelineating water point measures functional regions by using spatially constrained clustering algorithms."
  },
  {
    "objectID": "Take_Home_Ex/Take_Home_Ex2/Take_Home_Ex2.html#thematic-mapping",
    "href": "Take_Home_Ex/Take_Home_Ex2/Take_Home_Ex2.html#thematic-mapping",
    "title": "Regionalisation of Multivariate Water Point Attributes with Non-spatially Constrained and Spatially Constrained Clustering Methods",
    "section": "Thematic Mapping",
    "text": "Thematic Mapping\nWater points measures derived by using appropriate statistical graphics and choropleth mapping technique are plotted.\n\nAnalytical Mapping\nFunctional regions delineated by using both non-spatially constrained and spatially constrained clustering algorithms are plotted."
  },
  {
    "objectID": "Take_Home_Ex/Take_Home_Ex2/Take_Home_Ex2.html#importing-water-data-points",
    "href": "Take_Home_Ex/Take_Home_Ex2/Take_Home_Ex2.html#importing-water-data-points",
    "title": "Regionalisation of Multivariate Water Point Attributes with Non-spatially Constrained and Spatially Constrained Clustering Methods",
    "section": "Importing water data points",
    "text": "Importing water data points\nWater data points are imported into R environment.\nUsing, st_read() of sf package, Nigeria Level-2 Administrative Boundary shapefile is imported into R environment.\n\nwp_sf <- st_read(dsn = \"Data\",\n              layer = \"geo_export\",\n              crs = 4326) %>%\n  filter(clean_coun == \"Nigeria\")\n\nThings to learn from the code chunk above:\nst_read() of sf package is used to import geo_export shapefile into R environment and save the imported geospatial data into simple feature data table.\nfilter() of dplyr package is used to extract water point records of Nigeria. In the code chunk below, “write_rds()” of reader package is used to save the extracted sf table …..\nNext, `write_rds()` of readr package is used to save the extracted sf data table (i.e. wp) into an output file in rds data format. The output file is called *wp_nga.rds* and it is saved in *geodata* sub-folder.\n\nwrite_rds(wp_sf, \"data/wp_sf.rds\")"
  },
  {
    "objectID": "Take_Home_Ex/Take_Home_Ex2/Take_Home_Ex2.html#importing-nigeria-lga-level-boundary-data-level",
    "href": "Take_Home_Ex/Take_Home_Ex2/Take_Home_Ex2.html#importing-nigeria-lga-level-boundary-data-level",
    "title": "Regionalisation of Multivariate Water Point Attributes with Non-spatially Constrained and Spatially Constrained Clustering Methods",
    "section": "Importing Nigeria LGA level boundary data level",
    "text": "Importing Nigeria LGA level boundary data level\nFor this take home exercise, shapefile downloaded from “geoboundaries” portal will be used.\n\nnga <- st_read(dsn = \"data\",\n               layer = \"geoBoundaries-NGA-ADM2\",\n               crs = 4326)\n\nFrom the above code chunk, `st_read()` of **sf** package is used to import *geoBoundaries-NGA-ADM2* shapefile into R environment and save the imported geospatial data into simple feature data table."
  },
  {
    "objectID": "Take_Home_Ex/Take_Home_Ex2/Take_Home_Ex2.html#exploratory-data-analysis",
    "href": "Take_Home_Ex/Take_Home_Ex2/Take_Home_Ex2.html#exploratory-data-analysis",
    "title": "Regionalisation of Multivariate Water Point Attributes with Non-spatially Constrained and Spatially Constrained Clustering Methods",
    "section": "Exploratory Data Analysis",
    "text": "Exploratory Data Analysis\nIn the code chunk below, freq() of funModeling package is used to display the distribution of status_cle field in wp_sf.\n\nfreq(data=wp_ng, \n     input = 'status_cle')\n\nExtracting Water Points\nBy using classes in status_cle field, extracting water points records for Nigeria."
  },
  {
    "objectID": "Take_Home_Ex/Take_Home_Ex2/Take_Home_Ex2.html#extracting-functional-water-point",
    "href": "Take_Home_Ex/Take_Home_Ex2/Take_Home_Ex2.html#extracting-functional-water-point",
    "title": "Regionalisation of Multivariate Water Point Attributes with Non-spatially Constrained and Spatially Constrained Clustering Methods",
    "section": "Extracting functional water point",
    "text": "Extracting functional water point\nUsing, filter() of dplyr is used to select functional water points.\n\nwpt_functional <- wp_ng %>%\n  filter(status_cle %in%\n           c(\"Functional\", \n             \"Functional but not in use\",\n             \"Functional but needs repair\"))\n\n\nfreq(data=wpt_functional, \n     input = 'status_cle')"
  },
  {
    "objectID": "Take_Home_Ex/Take_Home_Ex2/Take_Home_Ex2.html#extracting-non-functional-water-points",
    "href": "Take_Home_Ex/Take_Home_Ex2/Take_Home_Ex2.html#extracting-non-functional-water-points",
    "title": "Regionalisation of Multivariate Water Point Attributes with Non-spatially Constrained and Spatially Constrained Clustering Methods",
    "section": "Extracting non-functional water points",
    "text": "Extracting non-functional water points\nUsing, filter() of dplyr is used to select non-functional water points.\n\nwpt_nonfunctional <- wp_ng %>%\n  filter(status_cle %in%\n           c(\"Abandoned/Decommissioned\", \n             \"Abandoned\",\n             \"Non-Functional\",\n             \"Non functional due to dry season\",\n             \"Non-Functional due to dry season\"))\n\n\nfreq(data=wpt_nonfunctional, \n     input = 'status_cle')"
  },
  {
    "objectID": "Take_Home_Ex/Take_Home_Ex2/Take_Home_Ex2.html#extracting-main-water-point-technology-hand-pump",
    "href": "Take_Home_Ex/Take_Home_Ex2/Take_Home_Ex2.html#extracting-main-water-point-technology-hand-pump",
    "title": "Regionalisation of Multivariate Water Point Attributes with Non-spatially Constrained and Spatially Constrained Clustering Methods",
    "section": "Extracting Main Water Point Technology (Hand Pump)",
    "text": "Extracting Main Water Point Technology (Hand Pump)\nfilter() of dplyr is used to select water points with hand pump as a technology used for extracting water points.\n\nwpt_handpump <- wp_ng %>%\n  filter(X_water_tec == \"Hand Pump\")\n\n\nfreq(data=wpt_handpump, \n     input = 'X_water_tec')"
  },
  {
    "objectID": "Take_Home_Ex/Take_Home_Ex2/Take_Home_Ex2.html#extracting-usage-capacity",
    "href": "Take_Home_Ex/Take_Home_Ex2/Take_Home_Ex2.html#extracting-usage-capacity",
    "title": "Regionalisation of Multivariate Water Point Attributes with Non-spatially Constrained and Spatially Constrained Clustering Methods",
    "section": "Extracting Usage capacity",
    "text": "Extracting Usage capacity\nUsing, “filter()” of dplyr usage capacity”<1000” is clubbed in one and “>= 1000” is clubbed as one.\n\nwp_ng$usage_cap <- as.integer(wp_ng$usage_cap)\nwpt_1000less <- wp_ng %>%\n  filter(usage_cap < 1000)\n\nIt can be observed there are 69364 observations having less than 1000 usage capacity.\n\nwp_ng$usage_cap <- as.integer(wp_ng$usage_cap)\nwpt_1000more <- wp_ng %>%\n  filter(usage_cap >= 1000)\n\nIt can be observed there are 25644 regions in Nigeria having more than or equal to 1000 usage capacity."
  },
  {
    "objectID": "Take_Home_Ex/Take_Home_Ex2/Take_Home_Ex2.html#extracting-rural-points",
    "href": "Take_Home_Ex/Take_Home_Ex2/Take_Home_Ex2.html#extracting-rural-points",
    "title": "Regionalisation of Multivariate Water Point Attributes with Non-spatially Constrained and Spatially Constrained Clustering Methods",
    "section": "Extracting Rural Points",
    "text": "Extracting Rural Points\nIt is a binary column, “is_urban”, therefore entries with yes are the urban areas and entries with no are the rural areas. For this exercise, we will only focus on rural areas.\n\nwpt_rural <- wp_ng %>%\n  filter(is_urban == \"False\")\n\nFrom the R environment, it can be observed that there are 75444 rural regions in the Nigeria data set."
  },
  {
    "objectID": "Take_Home_Ex/Take_Home_Ex2/Take_Home_Ex2.html#saving-the-analytical-data-table",
    "href": "Take_Home_Ex/Take_Home_Ex2/Take_Home_Ex2.html#saving-the-analytical-data-table",
    "title": "Regionalisation of Multivariate Water Point Attributes with Non-spatially Constrained and Spatially Constrained Clustering Methods",
    "section": "Saving the Analytical Data Table",
    "text": "Saving the Analytical Data Table\nNow, we will save the sf data table into rds format.\n\nwrite_rds(nga_sf, \"data/nga_sf.rds\")"
  },
  {
    "objectID": "Take_Home_Ex/Take_Home_Ex2/Take_Home_Ex2.html#recoding-the-na-values-into-0-and-saving-the-analytical-data-table",
    "href": "Take_Home_Ex/Take_Home_Ex2/Take_Home_Ex2.html#recoding-the-na-values-into-0-and-saving-the-analytical-data-table",
    "title": "Regionalisation of Multivariate Water Point Attributes with Non-spatially Constrained and Spatially Constrained Clustering Methods",
    "section": "Recoding the NA values into 0 and saving the Analytical Data Table",
    "text": "Recoding the NA values into 0 and saving the Analytical Data Table\nIn the code chunk below, `replace_na()` is used to recode all the *NA* values in pct field into 0 and then saving the sf data table into rds format.\n\nwp_nga <- read_rds(\"data/nga_sf.rds\") %>%\n  mutate(pct_functional = replace_na(pct_functional, 0))%>%\n  mutate(`pct_non_functional` = replace_na(`pct_non_functional`, 0))%>%\n  mutate(`pct_handpump` = replace_na(`pct_handpump`, 0))%>%\n  mutate(`pct_Usage_capless1000` = replace_na(`pct_Usage_capless1000`, 0))%>%\n  mutate(`pct_Usage_capmore1000` = replace_na(`pct_Usage_capmore1000`, 0))%>%\n  mutate(`pct_rural` = replace_na(`pct_rural`, 0))\n\n\nwrite_rds(wp_nga, \"data/wp_nga.rds\")"
  },
  {
    "objectID": "Take_Home_Ex/Take_Home_Ex2/Take_Home_Ex2.html#exploratory-data-analysis-eda-using-statistical-graphs",
    "href": "Take_Home_Ex/Take_Home_Ex2/Take_Home_Ex2.html#exploratory-data-analysis-eda-using-statistical-graphs",
    "title": "Regionalisation of Multivariate Water Point Attributes with Non-spatially Constrained and Spatially Constrained Clustering Methods",
    "section": "Exploratory Data Analysis (EDA) using statistical graphs",
    "text": "Exploratory Data Analysis (EDA) using statistical graphs\n\nFunctional and Non-Functional Water Points\nUsing the code chunk below, we will now plot the distribution of variables(ie number and percentage of functional water points in Nigeria).\nHistogram is useful to identify the overall distribution of the data values (i.e. left skew, right skew or normal distribution)\n\nwp_nga <- read_rds(\"data/wp_nga.rds\")\nFunc <- ggplot(data=wp_nga, \n       aes(x=`wpt_functional`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\npct_func <- ggplot(data=wp_nga, \n       aes(x=`pct_functional`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\nnonfunc <- ggplot(data=wp_nga, \n       aes(x=`wpt_non_functional`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light pink\")\npct_nonfunc <- ggplot(data=wp_nga, \n       aes(x=`pct_non_functional`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light pink\")\n\n\nggarrange(Func,pct_func,nonfunc,pct_nonfunc,\n          ncol = 2, \n          nrow = 2)\n\n\n\n\n\n\nObservations\nIt can be observed that representation of number of functional and non functional water points are left skewed whereas it can be observed that after calculating percentage respectively, data is approximately normal.\n\n\nUsage Capacity\nBoxplot is useful to identify if there are any outliers or not.\n\ncap_less <- ggplot(data= wp_nga, \n       aes(x=`wpt_usage1000less`)) +\n  geom_boxplot(color=\"black\", \n               fill=\"light green\")\npct_cap_less <- ggplot(data= wp_nga, \n       aes(x=`pct_Usage_capless1000`)) +\n  geom_boxplot(color=\"black\", \n               fill=\"light green\")\ncap_more <- ggplot(data=wp_nga, \n       aes(x=`wpt_usage1000more`)) +\n  geom_boxplot(color=\"black\", \n               fill=\" green\") \npct_cap_more <- ggplot(data= wp_nga, \n       aes(x=`pct_Usage_capmore1000`)) +\n  geom_boxplot(color=\"black\", \n               fill=\" green\")\n\nggarrange(cap_less,pct_cap_less,cap_more,pct_cap_more,\n          ncol = 2, \n          nrow = 2)\n\n\n\n\n\n\nObservations\nFrom the above boxplots, it can be observed that there are many outlier regions with usage capacity of less than 1000 and equal/more than 1000. But if the percentage of usage capacity is plotted on the boxplot, it can be observed from the second column that there are no outliers. Therefore, it is recommended to use percentage of usage capacity for further analysis.\n\n\nRural Areas\nUsing the code chunk below, we will now plot the distribution of variables(ie number and percentage of rural areas in Nigeria).\n\nRural <- ggplot(data=wp_nga, \n       aes(x=`wpt_rural`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\" blue\")\npct_rural <- ggplot(data=wp_nga, \n       aes(x=`pct_rural`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\" orange\")\nggarrange(Rural,pct_rural,\n          ncol = 2, \n          nrow = 1)\n\n\n\n\n\n\nObservations\nIt can be observed from the blue histogram, that number of rural areas are left skewed. But if percentage of rural areas are considered and plotted on the histogram, it can be observed except for the last bin, other bins are normal distributed (Orange histogram)."
  },
  {
    "objectID": "Take_Home_Ex/Take_Home_Ex2/Take_Home_Ex2.html#eda-using-choropleth-map",
    "href": "Take_Home_Ex/Take_Home_Ex2/Take_Home_Ex2.html#eda-using-choropleth-map",
    "title": "Regionalisation of Multivariate Water Point Attributes with Non-spatially Constrained and Spatially Constrained Clustering Methods",
    "section": "EDA using choropleth map",
    "text": "EDA using choropleth map\n\nHandpump Water point technology Areas in Nigeria\nTo have a quick look ate the distribution of percentage of Hand pumps in Nigeria region, a choropleth map will be plotted.\nThe code chunks below are used to prepare the choroplethby using the qtm() function of tmap package.\n\nqtm(wp_nga, \"pct_handpump\")\n\n\n\n\nIn order to reveal the distribution shown in the choropleth map above are bias to the underlying total number of water points in Nigeria, we will create two choropleth maps, one for the total number of water points and one for the total number of regions with Handpump as the technology for water point by using the code chunk below.\n\nTT_waterpoints.map <- tm_shape(wp_nga) + \n  tm_fill(col = \"total_wpt\",\n          n = 5,\n          style = \"jenks\", \n          title = \"Total Waterpoints\") + \n  tm_borders(alpha = 0.5) \n\nHandpump.map <- tm_shape(wp_nga) + \n  tm_fill(col = \"wpt_handpump\",\n          n = 5,\n          style = \"jenks\",\n          title = \"Numberof Handpump \") + \n  tm_borders(alpha = 0.5) \n\ntmap_arrange(TT_waterpoints.map, Handpump.map,\n             asp=NA, ncol=2)\n\n\n\n\n\n\nObservation\nThe choropleth maps above clearly show that townships with relatively larger number of water points are also showing relatively higher number of handpump technology ownership.\nNow, for more better comparison dsitribution of total number of water points and Handpump percentage rate are plotted on choropleth maps by using the code chunk below.\n\ntm_shape(wp_nga) +\n    tm_polygons(c(\"total_wpt\", \"pct_handpump\"),\n                style=\"jenks\") +\n    tm_facets(sync = TRUE, ncol = 2) +\n  tm_legend(legend.position = c(\"right\", \"bottom\"))+\n  tm_layout(outer.margins=0, asp=0)\n\n\n\n\n\n\nObservation\nFrom the above maps, it can be clearly observed the difference of regions with total water points and percentage of handpump in each region. It can be true to state that regions with high percentage of handpumps may be the regions with low number of water points,hence,some regions have only or high percentage of handpump as a water point technology as compared with other regions.\n\n\nRural Areas in Nigeria\nTo have a quick look and comparison at the distribution of number, percentage of rural areas in Nigeria region and total water points, a choropleth map will be plotted.\nThe code chunks below are used to prepare the choroplethby using the qtm() function of tmap package.\n\nTT_waterpoints.map <- tm_shape(wp_nga) + \n  tm_fill(col = \"total_wpt\",\n          n = 5,\n          style = \"jenks\", \n          title = \"Total Waterpoints\") + \n  tm_borders(alpha = 0.5) \n\nrural.map <- tm_shape(wp_nga) + \n  tm_fill(col = \"wpt_rural\",\n          n = 5,\n          style = \"jenks\",\n          title = \"Numberof Rural Areas \") + \n  tm_borders(alpha = 0.5) \n\ntmap_arrange(TT_waterpoints.map, rural.map,\n             asp=NA, ncol=2)\n\n\n\n\n\n\nObservations\nFrom the above choropleth maps, it cab be observed that regions with high number of rural areas are the regions with high number of water points. But we can’t rely on this, therefore, percentage of rural areas are plotted on choropleth map for better comaprison.\n\nTT_waterpoints.map <- tm_shape(wp_nga) + \n  tm_fill(col = \"total_wpt\",\n          n = 5,\n          style = \"jenks\", \n          title = \"Total Waterpoints\") + \n  tm_borders(alpha = 0.5) \npct_rural.map <- tm_shape(wp_nga) + \n  tm_fill(col = \"pct_rural\",\n          n = 5,\n          style = \"jenks\",\n          title = \"Percentage of Rural Areas \") + \n  tm_borders(alpha = 0.5) \n\ntmap_arrange(TT_waterpoints.map,pct_rural.map,\n             asp=NA, ncol=2)\n\n\n\n\n\n\nObservation\nAfter plotting the percentage of rural areas, it can be observed that the regions with high percentage of rural areas may have lower number of total water points in the respective region. It can be said that there are very high percentage of rural areas in the Nigeria as compared to the urban areas. This implies the country is poor country, struggling for basic necessities."
  },
  {
    "objectID": "Take_Home_Ex/Take_Home_Ex2/Take_Home_Ex2.html#dropping-duplicate-regions",
    "href": "Take_Home_Ex/Take_Home_Ex2/Take_Home_Ex2.html#dropping-duplicate-regions",
    "title": "Regionalisation of Multivariate Water Point Attributes with Non-spatially Constrained and Spatially Constrained Clustering Methods",
    "section": "Dropping Duplicate regions",
    "text": "Dropping Duplicate regions\nWe will drop the duplicate shapename regions by using the code chunk below.\n\nwp_nga <- (wp_nga[order(wp_nga$shapeName), ])\n\nwp_nga<- wp_nga %>%\n  mutate(shapeName = tolower(shapeName))\n\nduplicate_area <- wp_nga$shapeName[ wp_nga$shapeName %in% wp_nga$shapeName[duplicated(wp_nga$shapeName)] ]\n\nduplicate_area\n\n [1] \"bassa\"    \"bassa\"    \"ifelodun\" \"ifelodun\" \"irepodun\" \"irepodun\"\n [7] \"nasarawa\" \"nasarawa\" \"obi\"      \"obi\"      \"surulere\" \"surulere\"\n\n\nWe will now access the individual index of the nigeria data frame and change the value. Lastly, we use the length() function to ensure there is no more duplicated shapeName.\n\nwp_nga$shapeName[c(94,95,304,305,355,356,519,546,547,693,694)] <- c(\"bassa kogi\",\"bassa plateau\",\n                                                                               \"ifelodun kwara\",\"ifelodun osun\",\n                                                                               \"irepodun kwara\",\"irepodun osun\",\n                                                                               \"nassarawa\",\"obi benue\",\"obi nasarawa\",\n                                                                               \"surulere lagos\",\"surulere oyo\")\n\nlength((wp_nga$shapeName[ wp_nga$shapeName %in% wp_nga$shapeName[duplicated(wp_nga$shapeName)] ]))\n\n[1] 0"
  },
  {
    "objectID": "Take_Home_Ex/Take_Home_Ex2/Take_Home_Ex2.html#extracting-cluster-variable",
    "href": "Take_Home_Ex/Take_Home_Ex2/Take_Home_Ex2.html#extracting-cluster-variable",
    "title": "Regionalisation of Multivariate Water Point Attributes with Non-spatially Constrained and Spatially Constrained Clustering Methods",
    "section": "Extracting Cluster Variable",
    "text": "Extracting Cluster Variable\nThe code chunk below will be used to extract the clustering variables from the wp_nga simple feature object into data.frame.\n\ncluster_vars <- wp_nga %>%\n  st_set_geometry(NULL) %>%\n  select(\"shapeName\",\"wpt_functional\",\"wpt_non_functional\",\"pct_functional\",\"pct_non_functional\", \"pct_handpump\",\"pct_Usage_capmore1000\", \"pct_rural\")\nhead(cluster_vars,10)\n\n        shapeName wpt_functional wpt_non_functional pct_functional\n1       aba north              7                  9      0.4117647\n2       aba south             29                 35      0.4084507\n3          abadam              0                  0      0.0000000\n4           abaji             23                 34      0.4035088\n5            abak             23                 25      0.4791667\n6       abakaliki             82                 42      0.3519313\n7  abeokuta north             16                 15      0.4705882\n8  abeokuta south             72                 33      0.6050420\n9             abi             79                 62      0.5197368\n10    aboh-mbaise             18                 26      0.2727273\n   pct_non_functional pct_handpump pct_Usage_capmore1000  pct_rural\n1           0.5294118   0.11764706             0.8235294 0.00000000\n2           0.4929577   0.09859155             0.8732394 0.05633803\n3           0.0000000   0.00000000             0.0000000 0.00000000\n4           0.5964912   0.40350877             0.5964912 0.84210526\n5           0.5208333   0.08333333             0.9166667 0.83333333\n6           0.1802575   0.43776824             0.0944206 0.87553648\n7           0.4411765   0.14705882             0.7647059 0.20588235\n8           0.2773109   0.16806723             0.7058824 0.00000000\n9           0.4078947   0.59868421             0.3289474 0.95394737\n10          0.3939394   0.01515152             0.6515152 0.72727273\n\n\nNOTE: Variable pct_Usage_capless1000 is not included because it is highly correlated with two above mentioned variables. Next, we need to change the rows by township name instead of row number by using the code chunk below\n\nrow.names(cluster_vars) <- cluster_vars$\"shapeName\"\nhead(cluster_vars,10)\n\n                    shapeName wpt_functional wpt_non_functional pct_functional\naba north           aba north              7                  9      0.4117647\naba south           aba south             29                 35      0.4084507\nabadam                 abadam              0                  0      0.0000000\nabaji                   abaji             23                 34      0.4035088\nabak                     abak             23                 25      0.4791667\nabakaliki           abakaliki             82                 42      0.3519313\nabeokuta north abeokuta north             16                 15      0.4705882\nabeokuta south abeokuta south             72                 33      0.6050420\nabi                       abi             79                 62      0.5197368\naboh-mbaise       aboh-mbaise             18                 26      0.2727273\n               pct_non_functional pct_handpump pct_Usage_capmore1000  pct_rural\naba north               0.5294118   0.11764706             0.8235294 0.00000000\naba south               0.4929577   0.09859155             0.8732394 0.05633803\nabadam                  0.0000000   0.00000000             0.0000000 0.00000000\nabaji                   0.5964912   0.40350877             0.5964912 0.84210526\nabak                    0.5208333   0.08333333             0.9166667 0.83333333\nabakaliki               0.1802575   0.43776824             0.0944206 0.87553648\nabeokuta north          0.4411765   0.14705882             0.7647059 0.20588235\nabeokuta south          0.2773109   0.16806723             0.7058824 0.00000000\nabi                     0.4078947   0.59868421             0.3289474 0.95394737\naboh-mbaise             0.3939394   0.01515152             0.6515152 0.72727273\n\n\nNow, we will delete the shapeName field by using the code chunk below.\n\nnigeria_ict <- select(cluster_vars, c(2:8))\nhead(nigeria_ict, 10)\n\n               wpt_functional wpt_non_functional pct_functional\naba north                   7                  9      0.4117647\naba south                  29                 35      0.4084507\nabadam                      0                  0      0.0000000\nabaji                      23                 34      0.4035088\nabak                       23                 25      0.4791667\nabakaliki                  82                 42      0.3519313\nabeokuta north             16                 15      0.4705882\nabeokuta south             72                 33      0.6050420\nabi                        79                 62      0.5197368\naboh-mbaise                18                 26      0.2727273\n               pct_non_functional pct_handpump pct_Usage_capmore1000  pct_rural\naba north               0.5294118   0.11764706             0.8235294 0.00000000\naba south               0.4929577   0.09859155             0.8732394 0.05633803\nabadam                  0.0000000   0.00000000             0.0000000 0.00000000\nabaji                   0.5964912   0.40350877             0.5964912 0.84210526\nabak                    0.5208333   0.08333333             0.9166667 0.83333333\nabakaliki               0.1802575   0.43776824             0.0944206 0.87553648\nabeokuta north          0.4411765   0.14705882             0.7647059 0.20588235\nabeokuta south          0.2773109   0.16806723             0.7058824 0.00000000\nabi                     0.4078947   0.59868421             0.3289474 0.95394737\naboh-mbaise             0.3939394   0.01515152             0.6515152 0.72727273"
  },
  {
    "objectID": "Take_Home_Ex/Take_Home_Ex2/Take_Home_Ex2.html#computing-proximity-matrix",
    "href": "Take_Home_Ex/Take_Home_Ex2/Take_Home_Ex2.html#computing-proximity-matrix",
    "title": "Regionalisation of Multivariate Water Point Attributes with Non-spatially Constrained and Spatially Constrained Clustering Methods",
    "section": "Computing Proximity Matrix",
    "text": "Computing Proximity Matrix\nWe will compute proximity matrix using dist() in R.\ndist() supports six distance proximity calculations, they are: euclidean, maximum, manhattan, canberra, binary and minkowski. The default is euclidean proximity matrix.\nThe code chunk below is used to compute the proximity matrix using euclidean method.\n\nproxmat <- dist(nigeria_ict, method = 'euclidean')"
  },
  {
    "objectID": "Take_Home_Ex/Take_Home_Ex2/Take_Home_Ex2.html#computing-hierarchical-clustering",
    "href": "Take_Home_Ex/Take_Home_Ex2/Take_Home_Ex2.html#computing-hierarchical-clustering",
    "title": "Regionalisation of Multivariate Water Point Attributes with Non-spatially Constrained and Spatially Constrained Clustering Methods",
    "section": "Computing Hierarchical Clustering",
    "text": "Computing Hierarchical Clustering\nIn this exercise, hclust() will be used for hierarchical clustering.\nhclust() employed agglomeration method to compute the cluster. Eight clustering algorithms are supported, they are: ward.D, ward.D2, single, complete, average(UPGMA), mcquitty(WPGMA), median(WPGMC) and centroid(UPGMC).\nIn the code chunk below, D.Ward method is performed.The hierarchical clustering output is stored in an object of class hclust which describes the tree produced by the clustering process.\n\nhclust_ward <- hclust(proxmat, method = 'ward.D')\n\n\nplot(hclust_ward, cex = 0.6)"
  },
  {
    "objectID": "Take_Home_Ex/Take_Home_Ex2/Take_Home_Ex2.html#section",
    "href": "Take_Home_Ex/Take_Home_Ex2/Take_Home_Ex2.html#section",
    "title": "Regionalisation of Multivariate Water Point Attributes with Non-spatially Constrained and Spatially Constrained Clustering Methods",
    "section": "",
    "text": "Determining Optimal Clusters\nAnother technical challenge face by data analyst in performing clustering analysis is to determine the optimal clusters to retain.\nThere are three commonly used methods to determine the optimal clusters, they are:\n\nElbow Method\nAverage Silhouette Method\nGap Statistics Method"
  },
  {
    "objectID": "Take_Home_Ex/Take_Home_Ex2/Take_Home_Ex2.html#gap-statistics-method",
    "href": "Take_Home_Ex/Take_Home_Ex2/Take_Home_Ex2.html#gap-statistics-method",
    "title": "Regionalisation of Multivariate Water Point Attributes with Non-spatially Constrained and Spatially Constrained Clustering Methods",
    "section": "Gap Statistics Method",
    "text": "Gap Statistics Method\nIn this take home exercise, we will use Gap Statistics Method. This method compares the total within intra-cluster variation for different values of k with their expected values under null reference distribution of the data. The estimate of the optimal clusters will be value that maximize the gap statistic (i.e., that yields the largest gap statistic). This means that the clustering structure is far away from the random uniform distribution of points.\nTo compute the gap statistic, clusGap() of cluster package will be used.\n\nset.seed(12345)\ngap_stat <- clusGap(nigeria_ict, \n                    FUN = hcut, \n                    nstart = 25, \n                    K.max = 10, \n                    B = 50)\n# Print the result\nprint(gap_stat, method = \"firstmax\")\n\nClustering Gap statistic [\"clusGap\"] from call:\nclusGap(x = nigeria_ict, FUNcluster = hcut, K.max = 10, B = 50, nstart = 25)\nB=50 simulated reference sets, k = 1..10; spaceH0=\"scaledPCA\"\n --> Number of clusters (method 'firstmax'): 1\n          logW    E.logW       gap     SE.sim\n [1,] 9.759053 10.929018 1.1699647 0.01575131\n [2,] 9.530880 10.464408 0.9335275 0.03632047\n [3,] 9.233786 10.251556 1.0177708 0.02517793\n [4,] 9.174736 10.129729 0.9549933 0.01857290\n [5,] 8.979760 10.031055 1.0512947 0.01773757\n [6,] 8.904310  9.937855 1.0335447 0.01797876\n [7,] 8.874972  9.850697 0.9757256 0.01844868\n [8,] 8.818450  9.773178 0.9547276 0.02116854\n [9,] 8.731570  9.705220 0.9736497 0.01893452\n[10,] 8.675465  9.646105 0.9706394 0.01694845\n\n\nAlso note that the hcut function used is from factoextra package.\nNext, we can visualise the plot by using fviz_gap_stat() of factoextra package.\n\nfviz_gap_stat(gap_stat)\n\n\n\n\n\nObservation\nWith reference to the gap statistic graph above, the recommended number of cluster to retain is 1. However, it is not logical to retain only one cluster. By examine the gap statistic graph, the 5-cluster gives the largest gap statistic and should be the next best cluster to pick."
  },
  {
    "objectID": "Take_Home_Ex/Take_Home_Ex2/Take_Home_Ex2.html#interpreting-the-dendrograms",
    "href": "Take_Home_Ex/Take_Home_Ex2/Take_Home_Ex2.html#interpreting-the-dendrograms",
    "title": "Regionalisation of Multivariate Water Point Attributes with Non-spatially Constrained and Spatially Constrained Clustering Methods",
    "section": "Interpreting the dendrograms",
    "text": "Interpreting the dendrograms\nIn the dendrogram displayed above, each leaf corresponds to one observation. As we move up the tree, observations that are similar to each other are combined into branches, which are themselves fused at a higher height.\nIt's also possible to draw the dendrogram with a border around the selected clusters by using rect.hclust() of R stats. The argument border is used to specify the border colors for the rectangles.\n\nplot(hclust_ward, cex = 0.6)\nrect.hclust(hclust_ward, \n            k = 5, \n            border = 2:5)"
  },
  {
    "objectID": "Take_Home_Ex/Take_Home_Ex2/Take_Home_Ex2.html#visually-driven-hierarchical-clustering-analysis",
    "href": "Take_Home_Ex/Take_Home_Ex2/Take_Home_Ex2.html#visually-driven-hierarchical-clustering-analysis",
    "title": "Regionalisation of Multivariate Water Point Attributes with Non-spatially Constrained and Spatially Constrained Clustering Methods",
    "section": "Visually-driven hierarchical clustering analysis",
    "text": "Visually-driven hierarchical clustering analysis\nUsing heatmaply() package, visually driven hierarchical clustering analysis is performed. With heatmaply, we are able to build both highly interactive cluster heatmap or static cluster heatmap.\nThe code chunk below will be used to transform nigeria_ict data frame into a data matrix.\n\nnigeria_ict_mat <- data.matrix(nigeria_ict)"
  },
  {
    "objectID": "Take_Home_Ex/Take_Home_Ex2/Take_Home_Ex2.html#plotting-interactive-cluster-heatmap-using-heatmaply",
    "href": "Take_Home_Ex/Take_Home_Ex2/Take_Home_Ex2.html#plotting-interactive-cluster-heatmap-using-heatmaply",
    "title": "Regionalisation of Multivariate Water Point Attributes with Non-spatially Constrained and Spatially Constrained Clustering Methods",
    "section": "Plotting interactive cluster heatmap using heatmaply()",
    "text": "Plotting interactive cluster heatmap using heatmaply()\nIn the code chunk below, the heatmaply() of heatmaply package is used to build an interactive cluster heatmap.\n\nheatmaply(normalize(nigeria_ict_mat),\n          Colv=NA,\n          dist_method = \"euclidean\",\n          hclust_method = \"ward.D\",\n          seriate = \"OLO\",\n          colors = Blues,\n          k_row = 5,\n          margins = c(NA,200,60,NA),\n          fontsize_row = 4,\n          fontsize_col = 5,\n          main=\"Geographic Segmentation of Nigeria by water point indicators\",\n          xlab = \"Water point Indicators\",\n          ylab = \"Townships of Nigeria\"\n          )"
  },
  {
    "objectID": "Take_Home_Ex/Take_Home_Ex2/Take_Home_Ex2.html#mapping-the-clusters-formed",
    "href": "Take_Home_Ex/Take_Home_Ex2/Take_Home_Ex2.html#mapping-the-clusters-formed",
    "title": "Regionalisation of Multivariate Water Point Attributes with Non-spatially Constrained and Spatially Constrained Clustering Methods",
    "section": "Mapping the clusters formed",
    "text": "Mapping the clusters formed\nFrom dendrogram , we decided to retain only 5 clusters. cutree() of R Base will be used in the code chunk below to derive a 5-cluster model.\n\ngroups <- as.factor(cutree(hclust_ward, k=5))\n\nThe code chunk below form the join in three steps:\n\nthe groups list object will be converted into a matrix;\ncbind() is used to append groups matrix onto wp_nga to produce an output simple feature object called nigeria_sf_cluster; and\nrename of dplyr package is used to rename as.matrix.groups field as CLUSTER.\n\n\nnigeria_sf_cluster <- cbind(wp_nga, as.matrix(groups)) %>%\n  rename(`CLUSTER`=`as.matrix.groups.`)\n\nUsing the below code chunk, choropleth map is plotted\n\nqtm(nigeria_sf_cluster, \"CLUSTER\")"
  },
  {
    "objectID": "Take_Home_Ex/Take_Home_Ex2/Take_Home_Ex2.html#observations-from-hierarchical-clustering",
    "href": "Take_Home_Ex/Take_Home_Ex2/Take_Home_Ex2.html#observations-from-hierarchical-clustering",
    "title": "Regionalisation of Multivariate Water Point Attributes with Non-spatially Constrained and Spatially Constrained Clustering Methods",
    "section": "Observations from Hierarchical Clustering",
    "text": "Observations from Hierarchical Clustering\nBased on the heatmap plot, we can infer that area of concern with a higher average of pct_functional compare to pct_non_functional water points. The next area of concern could be high average of pct_rural areas. From the map, we can analyse Cluster 1 should be an area of concern subsequently followed by Cluster 3.\nThe choropleth map above reveals the clusters are very fragmented. The is one of the major limitation when non-spatial clustering algorithm such as hierarchical cluster analysis method is used.We will substantiate all the claims in the subsequent section."
  },
  {
    "objectID": "Take_Home_Ex/Take_Home_Ex2/Take_Home_Ex2.html#computing-optimal-k-means-clustering-values",
    "href": "Take_Home_Ex/Take_Home_Ex2/Take_Home_Ex2.html#computing-optimal-k-means-clustering-values",
    "title": "Regionalisation of Multivariate Water Point Attributes with Non-spatially Constrained and Spatially Constrained Clustering Methods",
    "section": "Computing optimal K-Means Clustering Values",
    "text": "Computing optimal K-Means Clustering Values\nBelow is the code chunk to obtain the optimal cluster value.\n\ngap_statK <- clusGap(nigeria_ict, FUN = kmeans, nstart = 25,\n                    K.max = 10, B = 50)\n\nfviz_gap_stat(gap_statK)"
  },
  {
    "objectID": "Take_Home_Ex/Take_Home_Ex2/Take_Home_Ex2.html#observations-4",
    "href": "Take_Home_Ex/Take_Home_Ex2/Take_Home_Ex2.html#observations-4",
    "title": "Regionalisation of Multivariate Water Point Attributes with Non-spatially Constrained and Spatially Constrained Clustering Methods",
    "section": "Observations",
    "text": "Observations\nWith reference to the gap statistic graph above, the recommended number of cluster to retain is 1. However, it is not logical to retain only one cluster. By examine the gap statistic graph, the 6-cluster gives the largest gap statistic and should be the next best cluster to pick."
  },
  {
    "objectID": "Take_Home_Ex/Take_Home_Ex2/Take_Home_Ex2.html#computing-of-k-means-clustering",
    "href": "Take_Home_Ex/Take_Home_Ex2/Take_Home_Ex2.html#computing-of-k-means-clustering",
    "title": "Regionalisation of Multivariate Water Point Attributes with Non-spatially Constrained and Spatially Constrained Clustering Methods",
    "section": "Computing of K-Means clustering",
    "text": "Computing of K-Means clustering\n\ncluster_Kvars <- wp_nga %>%\n  st_set_geometry(NULL) %>%\n  select(\"shapeName\",\"wpt_functional\",\"wpt_non_functional\",\"pct_functional\",\"pct_non_functional\", \"pct_handpump\",\"pct_Usage_capmore1000\", \"pct_rural\")\nhead(cluster_vars,10)\n\n                    shapeName wpt_functional wpt_non_functional pct_functional\naba north           aba north              7                  9      0.4117647\naba south           aba south             29                 35      0.4084507\nabadam                 abadam              0                  0      0.0000000\nabaji                   abaji             23                 34      0.4035088\nabak                     abak             23                 25      0.4791667\nabakaliki           abakaliki             82                 42      0.3519313\nabeokuta north abeokuta north             16                 15      0.4705882\nabeokuta south abeokuta south             72                 33      0.6050420\nabi                       abi             79                 62      0.5197368\naboh-mbaise       aboh-mbaise             18                 26      0.2727273\n               pct_non_functional pct_handpump pct_Usage_capmore1000  pct_rural\naba north               0.5294118   0.11764706             0.8235294 0.00000000\naba south               0.4929577   0.09859155             0.8732394 0.05633803\nabadam                  0.0000000   0.00000000             0.0000000 0.00000000\nabaji                   0.5964912   0.40350877             0.5964912 0.84210526\nabak                    0.5208333   0.08333333             0.9166667 0.83333333\nabakaliki               0.1802575   0.43776824             0.0944206 0.87553648\nabeokuta north          0.4411765   0.14705882             0.7647059 0.20588235\nabeokuta south          0.2773109   0.16806723             0.7058824 0.00000000\nabi                     0.4078947   0.59868421             0.3289474 0.95394737\naboh-mbaise             0.3939394   0.01515152             0.6515152 0.72727273\n\n\n\nrow.names(cluster_Kvars) <- cluster_Kvars$\"shapeName\"\nhead(cluster_Kvars,10)\n\n                    shapeName wpt_functional wpt_non_functional pct_functional\naba north           aba north              7                  9      0.4117647\naba south           aba south             29                 35      0.4084507\nabadam                 abadam              0                  0      0.0000000\nabaji                   abaji             23                 34      0.4035088\nabak                     abak             23                 25      0.4791667\nabakaliki           abakaliki             82                 42      0.3519313\nabeokuta north abeokuta north             16                 15      0.4705882\nabeokuta south abeokuta south             72                 33      0.6050420\nabi                       abi             79                 62      0.5197368\naboh-mbaise       aboh-mbaise             18                 26      0.2727273\n               pct_non_functional pct_handpump pct_Usage_capmore1000  pct_rural\naba north               0.5294118   0.11764706             0.8235294 0.00000000\naba south               0.4929577   0.09859155             0.8732394 0.05633803\nabadam                  0.0000000   0.00000000             0.0000000 0.00000000\nabaji                   0.5964912   0.40350877             0.5964912 0.84210526\nabak                    0.5208333   0.08333333             0.9166667 0.83333333\nabakaliki               0.1802575   0.43776824             0.0944206 0.87553648\nabeokuta north          0.4411765   0.14705882             0.7647059 0.20588235\nabeokuta south          0.2773109   0.16806723             0.7058824 0.00000000\nabi                     0.4078947   0.59868421             0.3289474 0.95394737\naboh-mbaise             0.3939394   0.01515152             0.6515152 0.72727273\n\n\n\nnigeria_Kict <- select(cluster_Kvars, c(2:8))\nhead(nigeria_Kict, 10)\n\n               wpt_functional wpt_non_functional pct_functional\naba north                   7                  9      0.4117647\naba south                  29                 35      0.4084507\nabadam                      0                  0      0.0000000\nabaji                      23                 34      0.4035088\nabak                       23                 25      0.4791667\nabakaliki                  82                 42      0.3519313\nabeokuta north             16                 15      0.4705882\nabeokuta south             72                 33      0.6050420\nabi                        79                 62      0.5197368\naboh-mbaise                18                 26      0.2727273\n               pct_non_functional pct_handpump pct_Usage_capmore1000  pct_rural\naba north               0.5294118   0.11764706             0.8235294 0.00000000\naba south               0.4929577   0.09859155             0.8732394 0.05633803\nabadam                  0.0000000   0.00000000             0.0000000 0.00000000\nabaji                   0.5964912   0.40350877             0.5964912 0.84210526\nabak                    0.5208333   0.08333333             0.9166667 0.83333333\nabakaliki               0.1802575   0.43776824             0.0944206 0.87553648\nabeokuta north          0.4411765   0.14705882             0.7647059 0.20588235\nabeokuta south          0.2773109   0.16806723             0.7058824 0.00000000\nabi                     0.4078947   0.59868421             0.3289474 0.95394737\naboh-mbaise             0.3939394   0.01515152             0.6515152 0.72727273\n\n\nUsing the code chunk below, k means results will be computed.\n\nset.seed(1234)\nfinal_kmeans <- kmeans(nigeria_Kict, 6, nstart = 25)"
  },
  {
    "objectID": "Take_Home_Ex/Take_Home_Ex2/Take_Home_Ex2.html#summary-of-k-mean-cluster",
    "href": "Take_Home_Ex/Take_Home_Ex2/Take_Home_Ex2.html#summary-of-k-mean-cluster",
    "title": "Regionalisation of Multivariate Water Point Attributes with Non-spatially Constrained and Spatially Constrained Clustering Methods",
    "section": "Summary of K-Mean Cluster",
    "text": "Summary of K-Mean Cluster\nWe will first bind the new cluster column, then the summarise_all function to display the average of each variables based on their cluster.\n\nnigeria_K <- wp_nga %>%\n  mutate(KM_Cluster = as.factor(final_kmeans$cluster))\n\nUsing the code chunk below, quick summary of the average values of all the variables within the cluster are compured.\n\nnigeria_K %>%\n  group_by(KM_Cluster) %>%\n  summarise_all(\"mean\")\n\nWarning in mean.default(shapeName): argument is not numeric or logical:\nreturning NA\n\nWarning in mean.default(shapeName): argument is not numeric or logical:\nreturning NA\n\nWarning in mean.default(shapeName): argument is not numeric or logical:\nreturning NA\n\nWarning in mean.default(shapeName): argument is not numeric or logical:\nreturning NA\n\nWarning in mean.default(shapeName): argument is not numeric or logical:\nreturning NA\n\nWarning in mean.default(shapeName): argument is not numeric or logical:\nreturning NA\n\n\nWarning in mean.default(Level): argument is not numeric or logical: returning NA\n\nWarning in mean.default(Level): argument is not numeric or logical: returning NA\n\nWarning in mean.default(Level): argument is not numeric or logical: returning NA\n\nWarning in mean.default(Level): argument is not numeric or logical: returning NA\n\nWarning in mean.default(Level): argument is not numeric or logical: returning NA\n\nWarning in mean.default(Level): argument is not numeric or logical: returning NA\n\n\nWarning in mean.default(shapeID): argument is not numeric or logical: returning\nNA\n\nWarning in mean.default(shapeID): argument is not numeric or logical: returning\nNA\n\nWarning in mean.default(shapeID): argument is not numeric or logical: returning\nNA\n\nWarning in mean.default(shapeID): argument is not numeric or logical: returning\nNA\n\nWarning in mean.default(shapeID): argument is not numeric or logical: returning\nNA\n\nWarning in mean.default(shapeID): argument is not numeric or logical: returning\nNA\n\n\nWarning in mean.default(shapeGroup): argument is not numeric or logical:\nreturning NA\n\nWarning in mean.default(shapeGroup): argument is not numeric or logical:\nreturning NA\n\nWarning in mean.default(shapeGroup): argument is not numeric or logical:\nreturning NA\n\nWarning in mean.default(shapeGroup): argument is not numeric or logical:\nreturning NA\n\nWarning in mean.default(shapeGroup): argument is not numeric or logical:\nreturning NA\n\nWarning in mean.default(shapeGroup): argument is not numeric or logical:\nreturning NA\n\n\nWarning in mean.default(shapeType): argument is not numeric or logical:\nreturning NA\n\nWarning in mean.default(shapeType): argument is not numeric or logical:\nreturning NA\n\nWarning in mean.default(shapeType): argument is not numeric or logical:\nreturning NA\n\nWarning in mean.default(shapeType): argument is not numeric or logical:\nreturning NA\n\nWarning in mean.default(shapeType): argument is not numeric or logical:\nreturning NA\n\nWarning in mean.default(shapeType): argument is not numeric or logical:\nreturning NA\n\n\nWarning in mean.default(geometry): argument is not numeric or logical: returning\nNA\n\nWarning in mean.default(geometry): argument is not numeric or logical: returning\nNA\n\nWarning in mean.default(geometry): argument is not numeric or logical: returning\nNA\n\nWarning in mean.default(geometry): argument is not numeric or logical: returning\nNA\n\nWarning in mean.default(geometry): argument is not numeric or logical: returning\nNA\n\nWarning in mean.default(geometry): argument is not numeric or logical: returning\nNA\n\n\nSimple feature collection with 6 features and 19 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2.668534 ymin: 4.273007 xmax: 14.67882 ymax: 13.89442\nGeodetic CRS:  WGS 84\n# A tibble: 6 × 20\n  KM_Cluster shapeName Level shapeID shapeGr…¹ shape…²                  geometry\n  <fct>          <dbl> <dbl>   <dbl>     <dbl>   <dbl>        <MULTIPOLYGON [°]>\n1 1                 NA    NA      NA        NA      NA (((4.354108 7.654823, 4.…\n2 2                 NA    NA      NA        NA      NA (((4.2153 11.65795, 4.22…\n3 3                 NA    NA      NA        NA      NA (((8.532642 11.98986, 8.…\n4 4                 NA    NA      NA        NA      NA (((3.636901 12.09428, 3.…\n5 5                 NA    NA      NA        NA      NA (((9.655053 11.73158, 9.…\n6 6                 NA    NA      NA        NA      NA (((8.960883 6.834356, 8.…\n# … with 13 more variables: total_wpt <dbl>, wpt_functional <dbl>,\n#   wpt_non_functional <dbl>, pct_functional <dbl>, pct_non_functional <dbl>,\n#   wpt_handpump <dbl>, pct_handpump <dbl>, wpt_usage1000less <dbl>,\n#   pct_Usage_capless1000 <dbl>, wpt_usage1000more <dbl>,\n#   pct_Usage_capmore1000 <dbl>, wpt_rural <dbl>, pct_rural <dbl>, and\n#   abbreviated variable names ¹​shapeGroup, ²​shapeType"
  },
  {
    "objectID": "Take_Home_Ex/Take_Home_Ex2/Take_Home_Ex2.html#visualization-of-k-means-clusters-using-tmap",
    "href": "Take_Home_Ex/Take_Home_Ex2/Take_Home_Ex2.html#visualization-of-k-means-clusters-using-tmap",
    "title": "Regionalisation of Multivariate Water Point Attributes with Non-spatially Constrained and Spatially Constrained Clustering Methods",
    "section": "Visualization of K-Means Clusters using tmap()",
    "text": "Visualization of K-Means Clusters using tmap()\nUsing the qtm() function, we plot the Nigeria map based on their designated K-means cluster.\n\nqtm(nigeria_K,fill = \"KM_Cluster\")\n\n\n\n\n\nObservations\nFrom the above map, we can interpret that clusters are still very fragmented. Therefore, KMeans is not the best non-spatial clustering method to be used.We can also analyse Cluster 2 should be an area of concern subsequently followed by Cluster 3."
  },
  {
    "objectID": "Take_Home_Ex/Take_Home_Ex2/Take_Home_Ex2.html#visualization-of-k-means-cluster-using-heatmap-plot",
    "href": "Take_Home_Ex/Take_Home_Ex2/Take_Home_Ex2.html#visualization-of-k-means-cluster-using-heatmap-plot",
    "title": "Regionalisation of Multivariate Water Point Attributes with Non-spatially Constrained and Spatially Constrained Clustering Methods",
    "section": "Visualization of K-Means Cluster using Heatmap Plot",
    "text": "Visualization of K-Means Cluster using Heatmap Plot\nWe will now visualise the variables using the ggparcoord() function.\n\nnigeria_ict_Kmat <- data.matrix(nigeria_Kict)\n\n\nheatmaply(normalize(nigeria_ict_Kmat),\n    columns = 1:7,\n    showPoints = TRUE, \n    seriate = \"OLO\",\n    colors = Reds,\n    k_row = 6,\n    margins = c(NA,200,60,NA),\n    fontsize_row = 4,\n    fontsize_col = 5,\n    main=\"Geographic Segmentation of Nigeria  by Water Point indicators\",\n    xlab = \"Water Point Indicators\",\n    ylab = \"Townships of Nigeria\"\n          )\n\n\n\n\n\n\nObservations\nBased on the heatmap plot, we can infer that area of concern with a higher average of pct_functional compare to pct_non_functional water points. The next area of concern could be high average of pct_rural areas with very high values as compared to other indicators."
  },
  {
    "objectID": "Take_Home_Ex/Take_Home_Ex2/Take_Home_Ex2.html#skater-approach",
    "href": "Take_Home_Ex/Take_Home_Ex2/Take_Home_Ex2.html#skater-approach",
    "title": "Regionalisation of Multivariate Water Point Attributes with Non-spatially Constrained and Spatially Constrained Clustering Methods",
    "section": "SKATER Approach",
    "text": "SKATER Approach\nThe Skater algorithm is based on a connectivity graph to express spatial relationships between neighboring regions, with each area represented by a node and edges representing connections between areas. The dissimilarity between neighboring areas is used to compute edge costs.\n\nConverting into Spatial Polygon Data Frames\nFirst, we need to convert \"wp_nga\" into spatial data frame. This is because SKATER function only support sp objects such as SpatialPolygonDataFrame.\nThe code chunk below is process to covert the data set into spatial data frame\n\nnigeria_sp <- as_Spatial(wp_nga)\nnigeria_sp\n\nclass       : SpatialPolygonsDataFrame \nfeatures    : 774 \nextent      : 2.668534, 14.67882, 4.273007, 13.89442  (xmin, xmax, ymin, ymax)\ncrs         : +proj=longlat +datum=WGS84 +no_defs \nvariables   : 18\nnames       : shapeName, Level,                    shapeID, shapeGroup, shapeType, total_wpt, wpt_functional, wpt_non_functional, pct_functional, pct_non_functional, wpt_handpump, pct_handpump, wpt_usage1000less, pct_Usage_capless1000, wpt_usage1000more, ... \nmin values  : aba north,  ADM2, NGA-ADM2-72505758B10049836,        NGA,      ADM2,         0,              0,                  0,              0,                  0,            0,            0,                 0,                     0,                 0, ... \nmax values  :      zuru,  ADM2, NGA-ADM2-72505758B99970923,        NGA,      ADM2,       894,            752,                278,              1,                  1,          764,            1,               767,                     1,               245, ... \n\n\n\n\nComputing Neighbor List\nUsing, \"ply2nd()\" of spdep  package of R, we will compute neighbor list from polygon list.\n\nnigeria.nb <- poly2nb(nigeria_sp)\nsummary(nigeria.nb)\n\nNeighbour list object:\nNumber of regions: 774 \nNumber of nonzero links: 4440 \nPercentage nonzero weights: 0.7411414 \nAverage number of links: 5.736434 \n1 region with no links:\n86\nLink number distribution:\n\n  0   1   2   3   4   5   6   7   8   9  10  11  12  14 \n  1   2  14  57 125 182 140 122  72  41  12   4   1   1 \n2 least connected regions:\n138 560 with 1 link\n1 most connected region:\n508 with 14 links\n\n\nFrom the summary report above, it can be observed there are total of 774 regions. There are 2 regions with least number of neighbors, 1 link and 1 most connected region with 14 neighbors.\nWe can plot the neighbours list on nigeria_sp by using the code chunk below. Since we now can plot the community area boundaries as well, we plot this graph on top of the map.\n\nplot(nigeria_sp, \n     border=grey(.5))   #gives the boundaries \nplot(nigeria.nb, \n     coordinates(nigeria_sp), #coordinates are used to extract centroid \n     col=\"blue\", \n     add=TRUE)          #Plot of neighbor list object \n\n\n\n\n\n\nCalculating the edge cost\nCost of each edge is computed using \"nbcosts()\" of spdep package.It is the distance between it nodes. This function compute this distance using a data.frame with observations vector in each node. For each observation, it is the notion of a generalised weight for a spatial weights matrix.\nNext, we will convert the neighbour list to a list weights object by specifying the just computed lcosts as the weights.Note that we specify the style as B to make sure the cost values are not row-standardised.\n\nnga_0 <- wp_nga[c(1:85, 87:774),]\nnga_sp <- as_Spatial(nga_0)\nnb_nga_sp <- poly2nb(nga_sp)\nsummary(nb_nga_sp)\n\nNeighbour list object:\nNumber of regions: 773 \nNumber of nonzero links: 4440 \nPercentage nonzero weights: 0.7430602 \nAverage number of links: 5.743855 \nLink number distribution:\n\n  1   2   3   4   5   6   7   8   9  10  11  12  14 \n  2  14  57 125 182 140 122  72  41  12   4   1   1 \n2 least connected regions:\n138 560 with 1 link\n1 most connected region:\n508 with 14 links\n\n\n\nlcosts <- nbcosts(nb_nga_sp,nigeria_ict)  #cost of each edge \n\n\nnigeria.w <- nb2listw(nb_nga_sp, \n                   lcosts, \n                   style=\"B\")\nsummary(nigeria.w)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 773 \nNumber of nonzero links: 4440 \nPercentage nonzero weights: 0.7430602 \nAverage number of links: 5.743855 \nLink number distribution:\n\n  1   2   3   4   5   6   7   8   9  10  11  12  14 \n  2  14  57 125 182 140 122  72  41  12   4   1   1 \n2 least connected regions:\n138 560 with 1 link\n1 most connected region:\n508 with 14 links\n\nWeights style: B \nWeights constants summary:\n    n     nn       S0        S1         S2\nB 773 597529 375921.2 130080067 1226120981\n\n\n\n\nFrom the above summary report, it can be observed that for each region there on a average of 6 neighbors.\n\n\nComputing minimum spanning tree\nUsing, \"mstree()\" of spdep package the minimum spanning tree is computed.\n\nnigeria.mst <- mstree(nigeria.w)\nclass(nigeria.mst)        #to check class\n\n[1] \"mst\"    \"matrix\"\n\ndim(nigeria.mst)          #to check dimensions\n\n[1] 772   3\n\n\nNote that the dimension is 772 and not 773. This is because the minimum spanning tree consists on n-1 edges (links) in order to traverse all the nodes. We can display the content of shan.mst by using head() as shown in the code chunk below.\n\nhead(nigeria.mst)\n\n     [,1] [,2]      [,3]\n[1,]   52   53  9.064298\n[2,]   52   80 11.422384\n[3,]   53  621 12.198790\n[4,]   53  198 12.401807\n[5,]  198  197  7.008173\n[6,]  197  209  7.074684"
  },
  {
    "objectID": "Take_Home_Ex/Take_Home_Ex2/Take_Home_Ex2.html#computing-skater-clustering",
    "href": "Take_Home_Ex/Take_Home_Ex2/Take_Home_Ex2.html#computing-skater-clustering",
    "title": "Regionalisation of Multivariate Water Point Attributes with Non-spatially Constrained and Spatially Constrained Clustering Methods",
    "section": "Computing SKATER clustering",
    "text": "Computing SKATER clustering\nThe code chunk below compute the spatially constrained cluster using skater() of spdep package. For this we will use clusters computed through hierarchical clustering technique.\n\nset.seed(1234)\nclust5 <- skater(edges = nigeria.mst[,1:2], \n                 data = nigeria_ict, \n                 method = \"euclidean\", \n                 ncuts = 4)\n\nIt is known, the skater() takes three mandatory arguments: -\n1. Two columns of the MST matrix (i.e. not the cost),\n2. the data matrix (to update the costs as units are being grouped),\n3. the number of cuts.\nThe code chunk below, gives the result of the skater() is an object of class skater.\n\nstr(clust5)\n\nList of 8\n $ groups      : num [1:773] 1 1 2 2 1 1 1 1 1 1 ...\n $ edges.groups:List of 5\n  ..$ :List of 3\n  .. ..$ node: num [1:359] 31 13 37 210 209 197 198 53 52 80 ...\n  .. ..$ edge: num [1:358, 1:3] 17 35 558 331 598 638 662 369 599 521 ...\n  .. ..$ ssw : num 16047\n  ..$ :List of 3\n  .. ..$ node: num [1:409] 85 131 413 655 397 452 93 237 711 240 ...\n  .. ..$ edge: num [1:408, 1:3] 131 413 655 397 93 237 240 694 392 382 ...\n  .. ..$ ssw : num 28576\n  ..$ :List of 3\n  .. ..$ node: num [1:3] 230 529 110\n  .. ..$ edge: num [1:2, 1:3] 529 230 110 529 282 ...\n  .. ..$ ssw : num 436\n  ..$ :List of 3\n  .. ..$ node: num 81\n  .. ..$ edge: num[0 , 1:3] \n  .. ..$ ssw : num 0\n  ..$ :List of 3\n  .. ..$ node: num 706\n  .. ..$ edge: num[0 , 1:3] \n  .. ..$ ssw : num 0\n $ not.prune   : NULL\n $ candidates  : int [1:5] 1 2 3 4 5\n $ ssto        : num 49580\n $ ssw         : num [1:5] 49580 47509 46534 45689 45059\n $ crit        : num [1:2] 1 Inf\n $ vec.crit    : num [1:773] 1 1 1 1 1 1 1 1 1 1 ...\n - attr(*, \"class\")= chr \"skater\"\n\n\n\nccs5 <- clust5$groups\nccs5  #cluster assignment \n\n  [1] 1 1 2 2 1 1 1 1 1 1 1 2 1 1 1 2 1 1 1 2 2 1 1 2 1 1 1 1 1 2 1 1 2 1 1 2 1\n [38] 2 2 2 2 1 1 1 1 2 2 2 1 2 1 1 1 1 1 1 1 1 2 2 2 1 2 2 2 1 1 1 2 1 1 1 1 2\n [75] 2 2 1 1 1 1 4 1 2 2 2 2 2 2 2 2 2 1 2 2 2 2 2 2 2 2 1 1 1 2 2 2 2 2 2 3 2\n[112] 2 2 2 2 2 1 2 2 1 1 2 2 2 1 2 2 2 2 2 2 2 1 2 1 1 2 2 2 2 2 2 2 2 2 2 2 2\n[149] 2 2 2 2 2 2 2 1 2 2 2 2 2 2 2 1 2 2 2 1 1 2 1 1 1 2 1 1 1 1 1 1 1 1 1 2 2\n[186] 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2\n[223] 2 2 2 2 2 2 2 3 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2\n[260] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 2 1\n[297] 1 1 1 1 2 1 1 2 1 2 2 1 1 1 1 1 1 1 1 1 1 2 2 1 1 1 2 1 1 1 1 2 1 1 1 1 1\n[334] 1 1 1 1 1 1 1 2 2 2 2 1 1 1 1 2 1 1 1 1 1 1 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1\n[371] 1 2 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 2 1 2 2 2 2\n[408] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 2 2 2 2 2 2 2 2 1 2 1 2 1 2 2\n[445] 2 2 2 2 2 2 2 2 2 2 1 2 2 2 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\n[482] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 1 2 2 2 2 2 1 2 2 2 2 2 1 2 2 2 1 2 2 2 2\n[519] 2 2 1 1 1 2 2 2 1 2 3 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 2 1 1 2 1 1 1 1 1 1\n[556] 2 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 1 1 1 1 1 1 1 1 1 1\n[593] 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[630] 1 1 1 1 2 1 1 1 1 1 2 2 1 2 1 2 2 2 2 2 1 2 2 2 2 2 2 2 2 2 2 2 1 2 1 1 2\n[667] 2 1 2 1 2 2 2 2 2 2 2 2 2 2 1 2 2 2 2 2 1 2 2 2 2 1 1 2 2 1 2 2 2 2 2 2 2\n[704] 2 2 5 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2\n[741] 2 2 2 1 1 1 2 2 2 2 2 2 2 2 2 1 1 2 2 2 1 2 2 2 2 2 2 2 2 2 2 2 2\n\n\n\ntable(ccs5)  #obersevation in each cluster\n\nccs5\n  1   2   3   4   5 \n359 409   3   1   1 \n\n\nIt can be observed that maximum number of observations are in Cluster 2 followed by Cluster 1. Pruned tree that shows the five clusters on top of the township area can be plotted using the code chunk below.\n\nplot(nigeria_sp, border=gray(.5))\nplot(clust5, \n     coordinates(nigeria_sp), \n     cex.lab=.7,\n     groups.colors=c(\"red\",\"green\",\"blue\", \"brown\", \"pink\"),\n     cex.circles=0.005, \n     add=TRUE)\n\nWarning in segments(coords[id1, 1], coords[id1, 2], coords[id2, 1],\ncoords[id2, : \"add\" is not a graphical parameter\n\nWarning in segments(coords[id1, 1], coords[id1, 2], coords[id2, 1],\ncoords[id2, : \"add\" is not a graphical parameter\n\nWarning in segments(coords[id1, 1], coords[id1, 2], coords[id2, 1],\ncoords[id2, : \"add\" is not a graphical parameter\n\n\n\n\n\nNOTE: As number of observations are very large, therfore, pruned tree is not very clear. Therefore we will now plot clusters in Choropleth Maps"
  },
  {
    "objectID": "Take_Home_Ex/Take_Home_Ex2/Take_Home_Ex2.html#visualizing-the-clusters-in-choropleth-maps",
    "href": "Take_Home_Ex/Take_Home_Ex2/Take_Home_Ex2.html#visualizing-the-clusters-in-choropleth-maps",
    "title": "Regionalisation of Multivariate Water Point Attributes with Non-spatially Constrained and Spatially Constrained Clustering Methods",
    "section": "Visualizing the clusters in Choropleth Maps",
    "text": "Visualizing the clusters in Choropleth Maps\nThe code chunk below is used to plot the newly derived clusters by using SKATER method.\n\ngroups_mat <- as.matrix(clust5$groups)\n\n\nnigeria_sf_spatialcluster <- cbind(nga_0, as.factor(groups_mat)) %>%\n  rename(`SP_CLUSTER`=`as.factor.groups_mat.`)\n\nqtm(nigeria_sf_spatialcluster, \"SP_CLUSTER\")\n\n\n\n\nBoth the hierarchical clustering and spatially constrained hierarchical clustering maps are plotted next to each other for easy comparison and analysis.\n\nhclust.map <- qtm(nigeria_sf_cluster,\n                  \"CLUSTER\") + \n  tm_borders(alpha = 0.5)\n  tm_layout(main.title = \"Hierarchical Clustering\")\n\n$tm_layout\n$tm_layout$main.title\n[1] \"Hierarchical Clustering\"\n\n$tm_layout$style\n[1] NA\n\n\nattr(,\"class\")\n[1] \"tm\"\n\nshclust.map <- qtm(nigeria_sf_spatialcluster,\n                   \"SP_CLUSTER\") + \n  tm_borders(alpha = 0.5) \n  tm_layout(main.title = \"Spatially constrained hierarchical clustering\")\n\n$tm_layout\n$tm_layout$main.title\n[1] \"Spatially constrained hierarchical clustering\"\n\n$tm_layout$style\n[1] NA\n\n\nattr(,\"class\")\n[1] \"tm\"\n\ntmap_arrange(hclust.map, shclust.map,\n             asp=NA, ncol=2)\n\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n\n\n\n\n\n\nObservations\nFrom the above results, we can infer that Cluster 1 and Cluster 2 are areas of concerns with a higher average of water points in Nigeria. It is also observed that in \"Hierarchical Clustering\" map regions for a particular cluster are scattered all over. For eg: Cluster 2 regions are scattered over north, south west and south regions. Whereas if we observe the \"Spatially constrained hierarchical clustering\", for each cluster regions are spatially clustered together."
  },
  {
    "objectID": "Take_Home_Ex/Take_Home_Ex2/Take_Home_Ex2.html#clustgeo",
    "href": "Take_Home_Ex/Take_Home_Ex2/Take_Home_Ex2.html#clustgeo",
    "title": "Regionalisation of Multivariate Water Point Attributes with Non-spatially Constrained and Spatially Constrained Clustering Methods",
    "section": "ClustGeo",
    "text": "ClustGeo\nIn this section, using ClustGeo packages we will perform non-spatially constrained hierarchical cluster analysis and spatially constrained cluster analysis. ClustGeo packages, provides a Ward-like hierarchical clustering algorithm called hclustgeo() including spatial/geographical constraints and is designed to support the need of performing spatially constrained cluster analysis.\n\nComputing Distance Matrix of Polygon\nSpatial distance matrix will be derived by using st_distance() of sf package before performing spatially constrained hierarchical clustering.\n\ndist <- st_distance(wp_nga, wp_nga)\ndistmat <- as.dist(dist)  #convert the data frame into matrix\n\n\n\nComputing Optimal Mixing Parameter\nNext, choicealpha() will be used to determine a suitable value for the mixing parameter alpha as shown in the code chunk below.\n\nset.seed(1234)\ncr <- choicealpha(proxmat, distmat, range.alpha = seq(0, 1, 0.1), K=5, graph = TRUE)\n\n\n\n\n\n\n\nWith reference to the graphs above, alpha = 0.2 will be used as shown in the code chunk below\n\nclustG <- hclustgeo(proxmat, distmat, alpha = 0.2)\n\n\ngroups <- as.factor(cutree(clustG, k=5)) #derive cluster object \n\n\nnigeria_sf_Gcluster <- cbind(wp_nga, as.matrix(groups)) %>%\n  rename(`CLUSTER` = `as.matrix.groups.`)\n\n\nqtm(nigeria_sf_Gcluster, \"CLUSTER\")\n\n\n\n\n\n\nObservations\nFrom the above results, we can infer that Cluster 2 can be deemed as an area of concern with high average of water points. Whereas Cluster 5 is area with less of concern."
  },
  {
    "objectID": "Take_Home_Ex/Take_Home_Ex2/Take_Home_Ex2.html#future-work",
    "href": "Take_Home_Ex/Take_Home_Ex2/Take_Home_Ex2.html#future-work",
    "title": "Regionalisation of Multivariate Water Point Attributes with Non-spatially Constrained and Spatially Constrained Clustering Methods",
    "section": "Future Work",
    "text": "Future Work\nMore clustering techniques, like normal mixtures, can be performed for more detailed analysis of spatially plotted maps. Due to time constraint, in this exercise only two clustering techniques are used.\nThere can be more spatially clustering methods for the analysis of the area. Also, for more detailed analysis, geographical weighted regression spatial technique can be used in which non-stationary variables are taken into consideration (e.g., climate; demographic factors; physical environment characteristics) and models the local relationships between these independent variables and an outcome of interest (also known as dependent variable).\nWe will explore this technique in our next take home exercise."
  },
  {
    "objectID": "Hand-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html#simple-linear-regression-method",
    "href": "Hand-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html#simple-linear-regression-method",
    "title": "Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "Simple Linear Regression Method",
    "text": "Simple Linear Regression Method\nWe will build regression model by using SELLING_PRICE as the dependent variable and AREA_SQM as the independent variable using the code chunk below.\n\ncondo.slr <- lm(formula=SELLING_PRICE ~ AREA_SQM, data = condo_resale.sf)\n\nNOTE: lm() returns an object of class “lm” or for multiple responses of class c(“mlm”, “lm”). The functions summary() and anova() can be used to obtain and print a summary and analysis of variance table of the results.\n\nsummary(condo.slr)\n\n\nCall:\nlm(formula = SELLING_PRICE ~ AREA_SQM, data = condo_resale.sf)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-3695815  -391764   -87517   258900 13503875 \n\nCoefficients:\n             Estimate Std. Error t value Pr(>|t|)    \n(Intercept) -258121.1    63517.2  -4.064 5.09e-05 ***\nAREA_SQM      14719.0      428.1  34.381  < 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 942700 on 1434 degrees of freedom\nMultiple R-squared:  0.4518,    Adjusted R-squared:  0.4515 \nF-statistic:  1182 on 1 and 1434 DF,  p-value: < 2.2e-16\n\nanova(condo.slr)\n\nAnalysis of Variance Table\n\nResponse: SELLING_PRICE\n            Df     Sum Sq    Mean Sq F value    Pr(>F)    \nAREA_SQM     1 1.0504e+15 1.0504e+15    1182 < 2.2e-16 ***\nResiduals 1434 1.2743e+15 8.8861e+11                      \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\n\nOBSERVATIONS\n\nFrom the above summary report, it reveals that the SELLING_PRICE can be explained by using the formula:\n\ny = -258121.1 + 14719x1\n\nThe R-squared of 0.4518 reveals that the simple regression model built is able to explain about 45% of the resale prices.\nSince p-value is much smaller than 0.0001, less than significance level of 0.05, we will reject the null hypothesis that mean is a good estimator of SELLING_PRICE. This will allow us to infer that simple linear regression model above is a good estimator of SELLING_PRICE.\n\nTo visualise the best fit curve on a scatterplot, we can incorporate lm() as a method function in ggplot’s geometry as shown in the code chunk below.\n\nggplot(data=condo_resale.sf,  \n       aes(x=`AREA_SQM`, y=`SELLING_PRICE`)) +\n  geom_point() +\n  geom_smooth(method = lm)\n\n`geom_smooth()` using formula 'y ~ x'\n\n\n\n\n\nFrom the above visualization, it can be interpreted there are a few statistical outliers with relatively high selling prices."
  },
  {
    "objectID": "Hand-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html#multiple-linear-regression-method",
    "href": "Hand-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html#multiple-linear-regression-method",
    "title": "Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "Multiple Linear Regression Method",
    "text": "Multiple Linear Regression Method\n\nVisualizing the relationships of the independent variables\nBefore proceeding with multiple linear regression mode, it is important to ensure independent variables are not highly correlated with each other. If these highly correlated independent variables are used in building a regression model by mistake, the quality of the model will be compromised. This phenomenon is known as multicollinearity in statistics.\nIn this exercise, we will use corrplot() package will be used for to plot a scatterplot matrix of the relationship between the independent variables in condo_resale data.frame.\n\ncorrplot(cor(condo_resale[, 5:23]), diag = FALSE, order = \"AOE\",\n         tl.pos = \"td\", tl.cex = 0.5, method = \"number\", type = \"upper\")\n\n\n\n\nThere are four methods in corrplot (parameter order), named “AOE”, “FPC”, “hclust”, “alphabet”. In the code chunk above, AOE order is used. It orders the variables by using the angular order of the eigenvectors method suggested by Michael Friendly.\nFrom the scatterplot matrix, it is clear that Freehold is highly correlated to LEASE_99YEAR. In view of this, it is wiser to only include either one of them in the subsequent model building. As a result, LEASE_99YEAR is excluded in the subsequent model building."
  },
  {
    "objectID": "Hand-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html#building-a-hedonic-pricing-model-using-multiple-linear-regression-method",
    "href": "Hand-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html#building-a-hedonic-pricing-model-using-multiple-linear-regression-method",
    "title": "Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "Building a hedonic pricing model using multiple linear regression method",
    "text": "Building a hedonic pricing model using multiple linear regression method\nThe code chunk below using lm() to calibrate the multiple linear regression model.\n\ncondo.mlr <- lm(formula = SELLING_PRICE ~ AREA_SQM + AGE    + \n                  PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE +\n                  PROX_URA_GROWTH_AREA + PROX_HAWKER_MARKET + PROX_KINDERGARTEN + \n                  PROX_MRT  + PROX_PARK + PROX_PRIMARY_SCH + \n                  PROX_TOP_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_SUPERMARKET + \n                  PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n                data=condo_resale.sf)\nsummary(condo.mlr)\n\n\nCall:\nlm(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + PROX_CHILDCARE + \n    PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + PROX_HAWKER_MARKET + \n    PROX_KINDERGARTEN + PROX_MRT + PROX_PARK + PROX_PRIMARY_SCH + \n    PROX_TOP_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_SUPERMARKET + \n    PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n    data = condo_resale.sf)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-3475964  -293923   -23069   241043 12260381 \n\nCoefficients:\n                       Estimate Std. Error t value Pr(>|t|)    \n(Intercept)           481728.40  121441.01   3.967 7.65e-05 ***\nAREA_SQM               12708.32     369.59  34.385  < 2e-16 ***\nAGE                   -24440.82    2763.16  -8.845  < 2e-16 ***\nPROX_CBD              -78669.78    6768.97 -11.622  < 2e-16 ***\nPROX_CHILDCARE       -351617.91  109467.25  -3.212  0.00135 ** \nPROX_ELDERLYCARE      171029.42   42110.51   4.061 5.14e-05 ***\nPROX_URA_GROWTH_AREA   38474.53   12523.57   3.072  0.00217 ** \nPROX_HAWKER_MARKET     23746.10   29299.76   0.810  0.41782    \nPROX_KINDERGARTEN     147468.99   82668.87   1.784  0.07466 .  \nPROX_MRT             -314599.68   57947.44  -5.429 6.66e-08 ***\nPROX_PARK             563280.50   66551.68   8.464  < 2e-16 ***\nPROX_PRIMARY_SCH      180186.08   65237.95   2.762  0.00582 ** \nPROX_TOP_PRIMARY_SCH    2280.04   20410.43   0.112  0.91107    \nPROX_SHOPPING_MALL   -206604.06   42840.60  -4.823 1.57e-06 ***\nPROX_SUPERMARKET      -44991.80   77082.64  -0.584  0.55953    \nPROX_BUS_STOP         683121.35  138353.28   4.938 8.85e-07 ***\nNO_Of_UNITS             -231.18      89.03  -2.597  0.00951 ** \nFAMILY_FRIENDLY       140340.77   47020.55   2.985  0.00289 ** \nFREEHOLD              359913.01   49220.22   7.312 4.38e-13 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 755800 on 1417 degrees of freedom\nMultiple R-squared:  0.6518,    Adjusted R-squared:  0.6474 \nF-statistic: 147.4 on 18 and 1417 DF,  p-value: < 2.2e-16\n\n\n\nObservation\nFrom the above summary report, it can be interpreted that 1 unit change in any one variable will affect change in resale price with how many units. Sign is very important to be considered. Positive sign means it will increase the price of resale unit and negative sign indicates the depreciation in resale unit. For eg: Change in are_sqm by 1 unit will increase the selling price by 12708 units."
  },
  {
    "objectID": "Hand-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html#preparing-publications-quality-table-oslrr-method",
    "href": "Hand-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html#preparing-publications-quality-table-oslrr-method",
    "title": "Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "Preparing publications quality table: oslrr method",
    "text": "Preparing publications quality table: oslrr method\nWith reference to the report above, it is clear that not all the independent variables are statistically significant. We will revised the model by removing those variables which are not statistically significant.\nNow, we are ready to calibrate the revised model by using the code chunk below.\n\ncondo.mlr1 <- lm(formula = SELLING_PRICE ~ AREA_SQM + AGE + \n                   PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE +\n                   PROX_URA_GROWTH_AREA + PROX_MRT  + PROX_PARK + \n                   PROX_PRIMARY_SCH + PROX_SHOPPING_MALL    + PROX_BUS_STOP + \n                   NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD,\n                 data=condo_resale.sf)\nols_regress(condo.mlr1)\n\n                             Model Summary                               \n------------------------------------------------------------------------\nR                       0.807       RMSE                     755957.289 \nR-Squared               0.651       Coef. Var                    43.168 \nAdj. R-Squared          0.647       MSE                571471422208.591 \nPred R-Squared          0.638       MAE                      414819.628 \n------------------------------------------------------------------------\n RMSE: Root Mean Square Error \n MSE: Mean Square Error \n MAE: Mean Absolute Error \n\n                                     ANOVA                                       \n--------------------------------------------------------------------------------\n                    Sum of                                                      \n                   Squares          DF         Mean Square       F         Sig. \n--------------------------------------------------------------------------------\nRegression    1.512586e+15          14        1.080418e+14    189.059    0.0000 \nResidual      8.120609e+14        1421    571471422208.591                      \nTotal         2.324647e+15        1435                                          \n--------------------------------------------------------------------------------\n\n                                               Parameter Estimates                                                \n-----------------------------------------------------------------------------------------------------------------\n               model           Beta    Std. Error    Std. Beta       t        Sig           lower          upper \n-----------------------------------------------------------------------------------------------------------------\n         (Intercept)     527633.222    108183.223                   4.877    0.000     315417.244     739849.200 \n            AREA_SQM      12777.523       367.479        0.584     34.771    0.000      12056.663      13498.382 \n                 AGE     -24687.739      2754.845       -0.167     -8.962    0.000     -30091.739     -19283.740 \n            PROX_CBD     -77131.323      5763.125       -0.263    -13.384    0.000     -88436.469     -65826.176 \n      PROX_CHILDCARE    -318472.751    107959.512       -0.084     -2.950    0.003    -530249.889    -106695.613 \n    PROX_ELDERLYCARE     185575.623     39901.864        0.090      4.651    0.000     107302.737     263848.510 \nPROX_URA_GROWTH_AREA      39163.254     11754.829        0.060      3.332    0.001      16104.571      62221.936 \n            PROX_MRT    -294745.107     56916.367       -0.112     -5.179    0.000    -406394.234    -183095.980 \n           PROX_PARK     570504.807     65507.029        0.150      8.709    0.000     442003.938     699005.677 \n    PROX_PRIMARY_SCH     159856.136     60234.599        0.062      2.654    0.008      41697.849     278014.424 \n  PROX_SHOPPING_MALL    -220947.251     36561.832       -0.115     -6.043    0.000    -292668.213    -149226.288 \n       PROX_BUS_STOP     682482.221    134513.243        0.134      5.074    0.000     418616.359     946348.082 \n         NO_Of_UNITS       -245.480        87.947       -0.053     -2.791    0.005       -418.000        -72.961 \n     FAMILY_FRIENDLY     146307.576     46893.021        0.057      3.120    0.002      54320.593     238294.560 \n            FREEHOLD     350599.812     48506.485        0.136      7.228    0.000     255447.802     445751.821 \n-----------------------------------------------------------------------------------------------------------------\n\n\nNote: Using oslrr function, output is more cleaned and symemtric.\n\nFrom first, model summary, we can interpret dependent variable is 65.1% in relation with independent variable.\nFrom Anova summary, we can check the significance is less than 0.05. Therefore, null hypothesis, all population means are equal, will be rejected."
  },
  {
    "objectID": "Hand-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html#preparing-publication-quality-table-gtsummary-method",
    "href": "Hand-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html#preparing-publication-quality-table-gtsummary-method",
    "title": "Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "Preparing Publication Quality Table: gtsummary method",
    "text": "Preparing Publication Quality Table: gtsummary method\nThe gtsummary package provides an elegant and flexible way to create publication-ready summary tables in R.\nIn the code chunk below, tbl_regression() is used to create a well formatted regression report.\n\ntbl_regression(condo.mlr1, intercept = TRUE)\n\n\n\n\n\n  \n  \n    \n      Characteristic\n      Beta\n      95% CI1\n      p-value\n    \n  \n  \n    (Intercept)\n527,633\n315,417, 739,849\n<0.001\n    AREA_SQM\n12,778\n12,057, 13,498\n<0.001\n    AGE\n-24,688\n-30,092, -19,284\n<0.001\n    PROX_CBD\n-77,131\n-88,436, -65,826\n<0.001\n    PROX_CHILDCARE\n-318,473\n-530,250, -106,696\n0.003\n    PROX_ELDERLYCARE\n185,576\n107,303, 263,849\n<0.001\n    PROX_URA_GROWTH_AREA\n39,163\n16,105, 62,222\n<0.001\n    PROX_MRT\n-294,745\n-406,394, -183,096\n<0.001\n    PROX_PARK\n570,505\n442,004, 699,006\n<0.001\n    PROX_PRIMARY_SCH\n159,856\n41,698, 278,014\n0.008\n    PROX_SHOPPING_MALL\n-220,947\n-292,668, -149,226\n<0.001\n    PROX_BUS_STOP\n682,482\n418,616, 946,348\n<0.001\n    NO_Of_UNITS\n-245\n-418, -73\n0.005\n    FAMILY_FRIENDLY\n146,308\n54,321, 238,295\n0.002\n    FREEHOLD\n350,600\n255,448, 445,752\n<0.001\n  \n  \n  \n    \n      1 CI = Confidence Interval\n    \n  \n\n\n\n\nWith gtsummary package, model statistics can be included in the report by either appending them to the report table by using add_glance_table() or adding as a table source note by using add_glance_source_note() as shown in the code chunk below.\n\ntbl_regression(condo.mlr1, \n               intercept = TRUE) %>% \n  add_glance_source_note(\n    label = list(sigma ~ \"\\U03C3\"),\n    include = c(r.squared, adj.r.squared, \n                AIC, statistic,\n                p.value, sigma))\n\n\n\n\n\n  \n  \n    \n      Characteristic\n      Beta\n      95% CI1\n      p-value\n    \n  \n  \n    (Intercept)\n527,633\n315,417, 739,849\n<0.001\n    AREA_SQM\n12,778\n12,057, 13,498\n<0.001\n    AGE\n-24,688\n-30,092, -19,284\n<0.001\n    PROX_CBD\n-77,131\n-88,436, -65,826\n<0.001\n    PROX_CHILDCARE\n-318,473\n-530,250, -106,696\n0.003\n    PROX_ELDERLYCARE\n185,576\n107,303, 263,849\n<0.001\n    PROX_URA_GROWTH_AREA\n39,163\n16,105, 62,222\n<0.001\n    PROX_MRT\n-294,745\n-406,394, -183,096\n<0.001\n    PROX_PARK\n570,505\n442,004, 699,006\n<0.001\n    PROX_PRIMARY_SCH\n159,856\n41,698, 278,014\n0.008\n    PROX_SHOPPING_MALL\n-220,947\n-292,668, -149,226\n<0.001\n    PROX_BUS_STOP\n682,482\n418,616, 946,348\n<0.001\n    NO_Of_UNITS\n-245\n-418, -73\n0.005\n    FAMILY_FRIENDLY\n146,308\n54,321, 238,295\n0.002\n    FREEHOLD\n350,600\n255,448, 445,752\n<0.001\n  \n  \n    \n      R² = 0.651; Adjusted R² = 0.647; AIC = 42,967; Statistic = 189; p-value = <0.001; σ = 755,957\n    \n  \n  \n    \n      1 CI = Confidence Interval\n    \n  \n\n\n\n\n\nChecking for multicolinearity\nIn this section, we will use oslrr that provides a collection of very useful methods for building better multiple linear regression models:\n\ncomprehensive regression output\nresidual diagnostics\nmeasures of influence\nheteroskedasticity tests\ncollinearity diagnostics\nmodel fit assessment\nvariable contribution assessment\nvariable selection procedures\n\nIn the code chunk below, the ols_vif_tol() of olsrr package is used to test if there are sign of multicollinearity.\n\nols_vif_tol(condo.mlr1)\n\n              Variables Tolerance      VIF\n1              AREA_SQM 0.8728554 1.145665\n2                   AGE 0.7071275 1.414172\n3              PROX_CBD 0.6356147 1.573280\n4        PROX_CHILDCARE 0.3066019 3.261559\n5      PROX_ELDERLYCARE 0.6598479 1.515501\n6  PROX_URA_GROWTH_AREA 0.7510311 1.331503\n7              PROX_MRT 0.5236090 1.909822\n8             PROX_PARK 0.8279261 1.207837\n9      PROX_PRIMARY_SCH 0.4524628 2.210126\n10   PROX_SHOPPING_MALL 0.6738795 1.483945\n11        PROX_BUS_STOP 0.3514118 2.845664\n12          NO_Of_UNITS 0.6901036 1.449058\n13      FAMILY_FRIENDLY 0.7244157 1.380423\n14             FREEHOLD 0.6931163 1.442759\n\n\nSince the VIF of the independent variables are less than 10. We can safely conclude that there are no sign of multicollinearity among the independent variables.\n\n\nTest for Non-Linearity\nIn multiple linear regression, it is important for us to test the assumption that linearity and additivity of the relationship between dependent and independent variables.\nThe below code chunk is used to perform linearity assumption test.\n\nols_plot_resid_fit(condo.mlr1)\n\n\n\n\nOBSERVATION\nThe figure above reveals that most of the data poitns are scattered around the 0 line, hence we can safely conclude that the relationships between the dependent variable and independent variables are linear.\n\n\nTest for Normality Assumption\nThe code chunk below is used to perform normality assumption test.\n\nols_plot_resid_hist(condo.mlr1)\n\n\n\n\nThe above figure reveals, residual of the multiple linear regression model (i.e. condo.mlr1) is resemble normal distribution.\nThe below code chunk is used to perform formal statistical test method.\n\nols_test_normality(condo.mlr1)\n\nWarning in ks.test.default(y, \"pnorm\", mean(y), sd(y)): ties should not be\npresent for the Kolmogorov-Smirnov test\n\n\n-----------------------------------------------\n       Test             Statistic       pvalue  \n-----------------------------------------------\nShapiro-Wilk              0.6856         0.0000 \nKolmogorov-Smirnov        0.1366         0.0000 \nCramer-von Mises         121.0768        0.0000 \nAnderson-Darling         67.9551         0.0000 \n-----------------------------------------------\n\n\nOBSERVATION\nThe summary table above reveals that the p-values of the four tests are way smaller than the alpha value of 0.05. Hence we will reject the null hypothesis that the residual is NOT resemble normal distribution.\n\n\nTesting for Spatial Autocorrelation\nIn order to perform spatial autocorrelation test, we need to convert condo_resale.sf from sf data frame into a SpatialPointsDataFrame.\n\nmlr.output <- as.data.frame(condo.mlr1$residuals)  #export the residuals\ncondo_resale.res.sf <- cbind(condo_resale.sf, \n                        condo.mlr1$residuals) %>%\nrename(`MLR_RES` = `condo.mlr1.residuals`)  #joing the date frames \n\nNow, we will convert condo_resale.res.sf from simple feature object into a SpatialPoints DataFrame. Below is the code chunk for the same.\n\ncondo_resale.sp <- as_Spatial(condo_resale.res.sf)\ncondo_resale.sp\n\nclass       : SpatialPointsDataFrame \nfeatures    : 1436 \nextent      : 14940.85, 43352.45, 24765.67, 48382.81  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 23\nnames       : POSTCODE, SELLING_PRICE, AREA_SQM, AGE,    PROX_CBD, PROX_CHILDCARE, PROX_ELDERLYCARE, PROX_URA_GROWTH_AREA, PROX_HAWKER_MARKET, PROX_KINDERGARTEN,    PROX_MRT,   PROX_PARK, PROX_PRIMARY_SCH, PROX_TOP_PRIMARY_SCH, PROX_SHOPPING_MALL, ... \nmin values  :    18965,        540000,       34,   0, 0.386916393,    0.004927023,      0.054508623,          0.214539508,        0.051817113,       0.004927023, 0.052779424, 0.029064164,      0.077106132,          0.077106132,                  0, ... \nmax values  :   828833,       1.8e+07,      619,  37, 19.18042832,     3.46572633,      3.949157205,           9.15540001,        5.374348075,       2.229045366,  3.48037319,  2.16104919,      3.928989144,          6.748192062,        3.477433767, ... \n\n\nNow, we will visualize the distribution of the residuals on an interactive map.The code chunks below is used to create an interactive point symbol map.\n\ntmap_mode(\"view\")   #interactive view\n\ntmap mode set to interactive viewing\n\ntm_shape(mpsz_svy21)+\n  tmap_options(check.and.fix = TRUE) +\n  tm_polygons(alpha = 0.4) +\ntm_shape(condo_resale.res.sf) +  \n  tm_dots(col = \"MLR_RES\",\n          alpha = 0.6,\n          style=\"quantile\") +\n  tm_view(set.zoom.limits = c(11,14))\n\nWarning: The shape mpsz_svy21 is invalid (after reprojection). See\nsf::st_is_valid\n\n\nVariable(s) \"MLR_RES\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\nThe figure above reveal that there is sign of spatial autocorrelation.To proof that our observation is indeed true, the Moran’s I test will be performed\nFirst, we will compute the distance-based weight matrix by using dnearneigh() function of spdep.\n\nnb <- dnearneigh(coordinates(condo_resale.sp), 0, 1500, longlat = FALSE)\nsummary(nb)\n\nNeighbour list object:\nNumber of regions: 1436 \nNumber of nonzero links: 66266 \nPercentage nonzero weights: 3.213526 \nAverage number of links: 46.14624 \nLink number distribution:\n\n  1   3   5   7   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24 \n  3   3   9   4   3  15  10  19  17  45  19   5  14  29  19   6  35  45  18  47 \n 25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44 \n 16  43  22  26  21  11   9  23  22  13  16  25  21  37  16  18   8  21   4  12 \n 45  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63  64 \n  8  36  18  14  14  43  11  12   8  13  12  13   4   5   6  12  11  20  29  33 \n 65  66  67  68  69  70  71  72  73  74  75  76  77  78  79  80  81  82  83  84 \n 15  20  10  14  15  15  11  16  12  10   8  19  12  14   9   8   4  13  11   6 \n 85  86  87  88  89  90  91  92  93  94  95  96  97  98  99 100 101 102 103 104 \n  4   9   4   4   4   6   2  16   9   4   5   9   3   9   4   2   1   2   1   1 \n105 106 107 108 109 110 112 116 125 \n  1   5   9   2   1   3   1   1   1 \n3 least connected regions:\n193 194 277 with 1 link\n1 most connected region:\n285 with 125 links\n\n\nFrom the above summary reports, it can be interpreted there are total of 1436 regions on average of 3 neighbors per region.\nNext, nb2listw() of spdep packge will be used to convert the output neighbours lists (i.e. nb) into a spatial weights.\n\nnb_lw <- nb2listw(nb, style = 'W')\nsummary(nb_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 1436 \nNumber of nonzero links: 66266 \nPercentage nonzero weights: 3.213526 \nAverage number of links: 46.14624 \nLink number distribution:\n\n  1   3   5   7   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24 \n  3   3   9   4   3  15  10  19  17  45  19   5  14  29  19   6  35  45  18  47 \n 25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44 \n 16  43  22  26  21  11   9  23  22  13  16  25  21  37  16  18   8  21   4  12 \n 45  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63  64 \n  8  36  18  14  14  43  11  12   8  13  12  13   4   5   6  12  11  20  29  33 \n 65  66  67  68  69  70  71  72  73  74  75  76  77  78  79  80  81  82  83  84 \n 15  20  10  14  15  15  11  16  12  10   8  19  12  14   9   8   4  13  11   6 \n 85  86  87  88  89  90  91  92  93  94  95  96  97  98  99 100 101 102 103 104 \n  4   9   4   4   4   6   2  16   9   4   5   9   3   9   4   2   1   2   1   1 \n105 106 107 108 109 110 112 116 125 \n  1   5   9   2   1   3   1   1   1 \n3 least connected regions:\n193 194 277 with 1 link\n1 most connected region:\n285 with 125 links\n\nWeights style: W \nWeights constants summary:\n     n      nn   S0       S1       S2\nW 1436 2062096 1436 94.81916 5798.341\n\n\nNext, lm.morantest() of spdep package will be used to perform Moran’s I test for residual spatial autocorrelation\n\nlm.morantest(condo.mlr1, nb_lw)\n\n\n    Global Moran I for regression residuals\n\ndata:  \nmodel: lm(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD +\nPROX_CHILDCARE + PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + PROX_MRT +\nPROX_PARK + PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_BUS_STOP +\nNO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, data = condo_resale.sf)\nweights: nb_lw\n\nMoran I statistic standard deviate = 24.366, p-value < 2.2e-16\nalternative hypothesis: greater\nsample estimates:\nObserved Moran I      Expectation         Variance \n    1.438876e-01    -5.487594e-03     3.758259e-05 \n\n\nThe Global Moran’s I test for residual spatial autocorrelation shows that it’s p-value is much smaller than 0, 0.0002, which is less than the alpha value of 0.05. Hence, we will reject the null hypothesis that the residuals are randomly distributed.\nSince the Observed Global Moran I = 0.1424418 which is greater than 0, we can infer than the residuals resemble cluster distribution."
  },
  {
    "objectID": "Hand-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html#building-fixed-bandwidth-gwr-model",
    "href": "Hand-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html#building-fixed-bandwidth-gwr-model",
    "title": "Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "Building Fixed Bandwidth GWR model",
    "text": "Building Fixed Bandwidth GWR model\n\nComputing fixed bandwidth\nIn the code chunk below bw.gwr() of GWModel package is used to determine the optimal fixed bandwidth to use in the model\nThere are possible two approaches to determine stopping rule:\n\nCV cross-validation approach\nAIC corrected (AICc) approach\n\nNote: To choose between fixed distance and adaptive distance method, we will choose based on AIC results, lowest will be choosen to do visualization.\n\nbw.fixed <- bw.gwr(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n                     PROX_CHILDCARE + PROX_ELDERLYCARE  + PROX_URA_GROWTH_AREA + \n                     PROX_MRT   + PROX_PARK + PROX_PRIMARY_SCH + \n                     PROX_SHOPPING_MALL + PROX_BUS_STOP + NO_Of_UNITS + \n                     FAMILY_FRIENDLY + FREEHOLD, \n                   data=condo_resale.sp, \n                   approach=\"CV\", \n                   kernel=\"gaussian\", \n                   adaptive=FALSE, \n                   longlat=FALSE)\n\nFixed bandwidth: 17660.96 CV score: 8.259118e+14 \nFixed bandwidth: 10917.26 CV score: 7.970454e+14 \nFixed bandwidth: 6749.419 CV score: 7.273273e+14 \nFixed bandwidth: 4173.553 CV score: 6.300006e+14 \nFixed bandwidth: 2581.58 CV score: 5.404958e+14 \nFixed bandwidth: 1597.687 CV score: 4.857515e+14 \nFixed bandwidth: 989.6077 CV score: 4.722431e+14 \nFixed bandwidth: 613.7939 CV score: 1.378294e+16 \nFixed bandwidth: 1221.873 CV score: 4.778717e+14 \nFixed bandwidth: 846.0596 CV score: 4.791629e+14 \nFixed bandwidth: 1078.325 CV score: 4.751406e+14 \nFixed bandwidth: 934.7772 CV score: 4.72518e+14 \nFixed bandwidth: 1023.495 CV score: 4.730305e+14 \nFixed bandwidth: 968.6643 CV score: 4.721317e+14 \nFixed bandwidth: 955.7206 CV score: 4.722072e+14 \nFixed bandwidth: 976.6639 CV score: 4.721387e+14 \nFixed bandwidth: 963.7202 CV score: 4.721484e+14 \nFixed bandwidth: 971.7199 CV score: 4.721293e+14 \nFixed bandwidth: 973.6083 CV score: 4.721309e+14 \nFixed bandwidth: 970.5527 CV score: 4.721295e+14 \nFixed bandwidth: 972.4412 CV score: 4.721296e+14 \nFixed bandwidth: 971.2741 CV score: 4.721292e+14 \nFixed bandwidth: 970.9985 CV score: 4.721293e+14 \nFixed bandwidth: 971.4443 CV score: 4.721292e+14 \nFixed bandwidth: 971.5496 CV score: 4.721293e+14 \nFixed bandwidth: 971.3793 CV score: 4.721292e+14 \nFixed bandwidth: 971.3391 CV score: 4.721292e+14 \nFixed bandwidth: 971.3143 CV score: 4.721292e+14 \nFixed bandwidth: 971.3545 CV score: 4.721292e+14 \nFixed bandwidth: 971.3296 CV score: 4.721292e+14 \nFixed bandwidth: 971.345 CV score: 4.721292e+14 \nFixed bandwidth: 971.3355 CV score: 4.721292e+14 \nFixed bandwidth: 971.3413 CV score: 4.721292e+14 \nFixed bandwidth: 971.3377 CV score: 4.721292e+14 \nFixed bandwidth: 971.34 CV score: 4.721292e+14 \nFixed bandwidth: 971.3405 CV score: 4.721292e+14 \nFixed bandwidth: 971.3408 CV score: 4.721292e+14 \nFixed bandwidth: 971.3403 CV score: 4.721292e+14 \nFixed bandwidth: 971.3406 CV score: 4.721292e+14 \nFixed bandwidth: 971.3404 CV score: 4.721292e+14 \nFixed bandwidth: 971.3405 CV score: 4.721292e+14 \nFixed bandwidth: 971.3405 CV score: 4.721292e+14 \n\n\nThe result shows that the recommended bandwidth is 971.3405 metres. Last observation bandwidth is considered.\n\n\nGWModel method- fixed bandwidth\nUsing the code chunk below, we will now calibrate the gwr model using fixed bandwidth and gaussian kernel.\n\ngwr.fixed <- gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n                         PROX_CHILDCARE + PROX_ELDERLYCARE  + PROX_URA_GROWTH_AREA + \n                         PROX_MRT   + PROX_PARK + PROX_PRIMARY_SCH + \n                         PROX_SHOPPING_MALL + PROX_BUS_STOP + NO_Of_UNITS + \n                         FAMILY_FRIENDLY + FREEHOLD, \n                       data=condo_resale.sp, \n                       bw=bw.fixed, \n                       kernel = 'gaussian', \n                       longlat = FALSE)\n\nWarning in proj4string(data): CRS object has comment, which is lost in output; in tests, see\nhttps://cran.r-project.org/web/packages/sp/vignettes/CRS_warnings.html\n\n\nThe output is saved in a list of class “gwrm”. The code below can be used to display the model output.\n\ngwr.fixed\n\n   ***********************************************************************\n   *                       Package   GWmodel                             *\n   ***********************************************************************\n   Program starts at: 2022-12-10 22:05:41 \n   Call:\n   gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n    PROX_CHILDCARE + PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + \n    PROX_MRT + PROX_PARK + PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + \n    PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n    data = condo_resale.sp, bw = bw.fixed, kernel = \"gaussian\", \n    longlat = FALSE)\n\n   Dependent (y) variable:  SELLING_PRICE\n   Independent variables:  AREA_SQM AGE PROX_CBD PROX_CHILDCARE PROX_ELDERLYCARE PROX_URA_GROWTH_AREA PROX_MRT PROX_PARK PROX_PRIMARY_SCH PROX_SHOPPING_MALL PROX_BUS_STOP NO_Of_UNITS FAMILY_FRIENDLY FREEHOLD\n   Number of data points: 1436\n   ***********************************************************************\n   *                    Results of Global Regression                     *\n   ***********************************************************************\n\n   Call:\n    lm(formula = formula, data = data)\n\n   Residuals:\n     Min       1Q   Median       3Q      Max \n-3470778  -298119   -23481   248917 12234210 \n\n   Coefficients:\n                          Estimate Std. Error t value Pr(>|t|)    \n   (Intercept)           527633.22  108183.22   4.877 1.20e-06 ***\n   AREA_SQM               12777.52     367.48  34.771  < 2e-16 ***\n   AGE                   -24687.74    2754.84  -8.962  < 2e-16 ***\n   PROX_CBD              -77131.32    5763.12 -13.384  < 2e-16 ***\n   PROX_CHILDCARE       -318472.75  107959.51  -2.950 0.003231 ** \n   PROX_ELDERLYCARE      185575.62   39901.86   4.651 3.61e-06 ***\n   PROX_URA_GROWTH_AREA   39163.25   11754.83   3.332 0.000885 ***\n   PROX_MRT             -294745.11   56916.37  -5.179 2.56e-07 ***\n   PROX_PARK             570504.81   65507.03   8.709  < 2e-16 ***\n   PROX_PRIMARY_SCH      159856.14   60234.60   2.654 0.008046 ** \n   PROX_SHOPPING_MALL   -220947.25   36561.83  -6.043 1.93e-09 ***\n   PROX_BUS_STOP         682482.22  134513.24   5.074 4.42e-07 ***\n   NO_Of_UNITS             -245.48      87.95  -2.791 0.005321 ** \n   FAMILY_FRIENDLY       146307.58   46893.02   3.120 0.001845 ** \n   FREEHOLD              350599.81   48506.48   7.228 7.98e-13 ***\n\n   ---Significance stars\n   Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 \n   Residual standard error: 756000 on 1421 degrees of freedom\n   Multiple R-squared: 0.6507\n   Adjusted R-squared: 0.6472 \n   F-statistic: 189.1 on 14 and 1421 DF,  p-value: < 2.2e-16 \n   ***Extra Diagnostic information\n   Residual sum of squares: 8.120609e+14\n   Sigma(hat): 752522.9\n   AIC:  42966.76\n   AICc:  42967.14\n   BIC:  41731.39\n   ***********************************************************************\n   *          Results of Geographically Weighted Regression              *\n   ***********************************************************************\n\n   *********************Model calibration information*********************\n   Kernel function: gaussian \n   Fixed bandwidth: 971.3405 \n   Regression points: the same locations as observations are used.\n   Distance metric: Euclidean distance metric is used.\n\n   ****************Summary of GWR coefficient estimates:******************\n                               Min.     1st Qu.      Median     3rd Qu.\n   Intercept            -3.5988e+07 -5.1998e+05  7.6780e+05  1.7412e+06\n   AREA_SQM              1.0003e+03  5.2758e+03  7.4740e+03  1.2301e+04\n   AGE                  -1.3475e+05 -2.0813e+04 -8.6260e+03 -3.7784e+03\n   PROX_CBD             -7.7047e+07 -2.3608e+05 -8.3600e+04  3.4646e+04\n   PROX_CHILDCARE       -6.0097e+06 -3.3667e+05 -9.7425e+04  2.9007e+05\n   PROX_ELDERLYCARE     -3.5000e+06 -1.5970e+05  3.1971e+04  1.9577e+05\n   PROX_URA_GROWTH_AREA -3.0170e+06 -8.2013e+04  7.0749e+04  2.2612e+05\n   PROX_MRT             -3.5282e+06 -6.5836e+05 -1.8833e+05  3.6922e+04\n   PROX_PARK            -1.2062e+06 -2.1732e+05  3.5383e+04  4.1335e+05\n   PROX_PRIMARY_SCH     -2.2695e+07 -1.7066e+05  4.8472e+04  5.1555e+05\n   PROX_SHOPPING_MALL   -7.2585e+06 -1.6684e+05 -1.0517e+04  1.5923e+05\n   PROX_BUS_STOP        -1.4676e+06 -4.5207e+04  3.7601e+05  1.1664e+06\n   NO_Of_UNITS          -1.3170e+03 -2.4822e+02 -3.0846e+01  2.5496e+02\n   FAMILY_FRIENDLY      -2.2749e+06 -1.1140e+05  7.6214e+03  1.6107e+05\n   FREEHOLD             -9.2067e+06  3.8073e+04  1.5169e+05  3.7528e+05\n                             Max.\n   Intercept            112793548\n   AREA_SQM                 21575\n   AGE                     434201\n   PROX_CBD               2704596\n   PROX_CHILDCARE         1654087\n   PROX_ELDERLYCARE      38867814\n   PROX_URA_GROWTH_AREA  78515730\n   PROX_MRT               3124316\n   PROX_PARK             18122425\n   PROX_PRIMARY_SCH       4637503\n   PROX_SHOPPING_MALL     1529952\n   PROX_BUS_STOP         11342182\n   NO_Of_UNITS              12907\n   FAMILY_FRIENDLY        1720744\n   FREEHOLD               6073636\n   ************************Diagnostic information*************************\n   Number of data points: 1436 \n   Effective number of parameters (2trace(S) - trace(S'S)): 438.3804 \n   Effective degrees of freedom (n-2trace(S) + trace(S'S)): 997.6196 \n   AICc (GWR book, Fotheringham, et al. 2002, p. 61, eq 2.33): 42263.61 \n   AIC (GWR book, Fotheringham, et al. 2002,GWR p. 96, eq. 4.22): 41632.36 \n   BIC (GWR book, Fotheringham, et al. 2002,GWR p. 61, eq. 2.34): 42515.71 \n   Residual sum of squares: 2.53407e+14 \n   R-square value:  0.8909912 \n   Adjusted R-square value:  0.8430417 \n\n   ***********************************************************************\n   Program stops at: 2022-12-10 22:05:43 \n\n\nThe report shows that the geographically adjusted r-square of the gwr is 0.8909 which is significantly better than the global multiple linear regression model of 0.6472.\nAlso, AIC for geographically interpreted results is lower than the global multiple linear regression. Therefore, we will consider geographically weighted regression results for further analysis."
  },
  {
    "objectID": "Hand-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html#computing-the-adaptive-bandwidth",
    "href": "Hand-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html#computing-the-adaptive-bandwidth",
    "title": "Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "Computing the adaptive bandwidth",
    "text": "Computing the adaptive bandwidth\nThe code chunk used look very similar to the one used to compute the fixed bandwidth except the adaptive argument has changed to TRUE.\n\nbw.adaptive <- bw.gwr(formula = SELLING_PRICE ~ AREA_SQM + AGE  + \n                        PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE    + \n                        PROX_URA_GROWTH_AREA + PROX_MRT + PROX_PARK + \n                        PROX_PRIMARY_SCH + PROX_SHOPPING_MALL   + PROX_BUS_STOP + \n                        NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n                      data=condo_resale.sp, \n                      approach=\"CV\", \n                      kernel=\"gaussian\", \n                      adaptive=TRUE, \n                      longlat=FALSE)\n\nAdaptive bandwidth: 895 CV score: 7.952401e+14 \nAdaptive bandwidth: 561 CV score: 7.667364e+14 \nAdaptive bandwidth: 354 CV score: 6.953454e+14 \nAdaptive bandwidth: 226 CV score: 6.15223e+14 \nAdaptive bandwidth: 147 CV score: 5.674373e+14 \nAdaptive bandwidth: 98 CV score: 5.426745e+14 \nAdaptive bandwidth: 68 CV score: 5.168117e+14 \nAdaptive bandwidth: 49 CV score: 4.859631e+14 \nAdaptive bandwidth: 37 CV score: 4.646518e+14 \nAdaptive bandwidth: 30 CV score: 4.422088e+14 \nAdaptive bandwidth: 25 CV score: 4.430816e+14 \nAdaptive bandwidth: 32 CV score: 4.505602e+14 \nAdaptive bandwidth: 27 CV score: 4.462172e+14 \nAdaptive bandwidth: 30 CV score: 4.422088e+14 \n\n\nThe result shows that the 30 is the recommended data points to be used. Last observation is considered."
  },
  {
    "objectID": "Hand-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html#constructing-the-adaptive-bandwidth-gwr-model",
    "href": "Hand-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html#constructing-the-adaptive-bandwidth-gwr-model",
    "title": "Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "Constructing the adaptive bandwidth gwr model",
    "text": "Constructing the adaptive bandwidth gwr model\nNow, we will calibrate the gwr-based hedonic pricing model by using adaptive bandwidth and gaussian kernel as shown in the code chunk below.\n\ngwr.adaptive <- gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + \n                            PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE + \n                            PROX_URA_GROWTH_AREA + PROX_MRT + PROX_PARK + \n                            PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_BUS_STOP + \n                            NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n                          data=condo_resale.sp, bw=bw.adaptive, \n                          kernel = 'gaussian', \n                          adaptive=TRUE, \n                          longlat = FALSE)\n\nWarning in proj4string(data): CRS object has comment, which is lost in output; in tests, see\nhttps://cran.r-project.org/web/packages/sp/vignettes/CRS_warnings.html\n\n\n\ngwr.adaptive  #model output\n\n   ***********************************************************************\n   *                       Package   GWmodel                             *\n   ***********************************************************************\n   Program starts at: 2022-12-10 22:05:53 \n   Call:\n   gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n    PROX_CHILDCARE + PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + \n    PROX_MRT + PROX_PARK + PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + \n    PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n    data = condo_resale.sp, bw = bw.adaptive, kernel = \"gaussian\", \n    adaptive = TRUE, longlat = FALSE)\n\n   Dependent (y) variable:  SELLING_PRICE\n   Independent variables:  AREA_SQM AGE PROX_CBD PROX_CHILDCARE PROX_ELDERLYCARE PROX_URA_GROWTH_AREA PROX_MRT PROX_PARK PROX_PRIMARY_SCH PROX_SHOPPING_MALL PROX_BUS_STOP NO_Of_UNITS FAMILY_FRIENDLY FREEHOLD\n   Number of data points: 1436\n   ***********************************************************************\n   *                    Results of Global Regression                     *\n   ***********************************************************************\n\n   Call:\n    lm(formula = formula, data = data)\n\n   Residuals:\n     Min       1Q   Median       3Q      Max \n-3470778  -298119   -23481   248917 12234210 \n\n   Coefficients:\n                          Estimate Std. Error t value Pr(>|t|)    \n   (Intercept)           527633.22  108183.22   4.877 1.20e-06 ***\n   AREA_SQM               12777.52     367.48  34.771  < 2e-16 ***\n   AGE                   -24687.74    2754.84  -8.962  < 2e-16 ***\n   PROX_CBD              -77131.32    5763.12 -13.384  < 2e-16 ***\n   PROX_CHILDCARE       -318472.75  107959.51  -2.950 0.003231 ** \n   PROX_ELDERLYCARE      185575.62   39901.86   4.651 3.61e-06 ***\n   PROX_URA_GROWTH_AREA   39163.25   11754.83   3.332 0.000885 ***\n   PROX_MRT             -294745.11   56916.37  -5.179 2.56e-07 ***\n   PROX_PARK             570504.81   65507.03   8.709  < 2e-16 ***\n   PROX_PRIMARY_SCH      159856.14   60234.60   2.654 0.008046 ** \n   PROX_SHOPPING_MALL   -220947.25   36561.83  -6.043 1.93e-09 ***\n   PROX_BUS_STOP         682482.22  134513.24   5.074 4.42e-07 ***\n   NO_Of_UNITS             -245.48      87.95  -2.791 0.005321 ** \n   FAMILY_FRIENDLY       146307.58   46893.02   3.120 0.001845 ** \n   FREEHOLD              350599.81   48506.48   7.228 7.98e-13 ***\n\n   ---Significance stars\n   Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 \n   Residual standard error: 756000 on 1421 degrees of freedom\n   Multiple R-squared: 0.6507\n   Adjusted R-squared: 0.6472 \n   F-statistic: 189.1 on 14 and 1421 DF,  p-value: < 2.2e-16 \n   ***Extra Diagnostic information\n   Residual sum of squares: 8.120609e+14\n   Sigma(hat): 752522.9\n   AIC:  42966.76\n   AICc:  42967.14\n   BIC:  41731.39\n   ***********************************************************************\n   *          Results of Geographically Weighted Regression              *\n   ***********************************************************************\n\n   *********************Model calibration information*********************\n   Kernel function: gaussian \n   Adaptive bandwidth: 30 (number of nearest neighbours)\n   Regression points: the same locations as observations are used.\n   Distance metric: Euclidean distance metric is used.\n\n   ****************Summary of GWR coefficient estimates:******************\n                               Min.     1st Qu.      Median     3rd Qu.\n   Intercept            -1.3487e+08 -2.4669e+05  7.7928e+05  1.6194e+06\n   AREA_SQM              3.3188e+03  5.6285e+03  7.7825e+03  1.2738e+04\n   AGE                  -9.6746e+04 -2.9288e+04 -1.4043e+04 -5.6119e+03\n   PROX_CBD             -2.5330e+06 -1.6256e+05 -7.7242e+04  2.6624e+03\n   PROX_CHILDCARE       -1.2790e+06 -2.0175e+05  8.7158e+03  3.7778e+05\n   PROX_ELDERLYCARE     -1.6212e+06 -9.2050e+04  6.1029e+04  2.8184e+05\n   PROX_URA_GROWTH_AREA -7.2686e+06 -3.0350e+04  4.5869e+04  2.4613e+05\n   PROX_MRT             -4.3781e+07 -6.7282e+05 -2.2115e+05 -7.4593e+04\n   PROX_PARK            -2.9020e+06 -1.6782e+05  1.1601e+05  4.6572e+05\n   PROX_PRIMARY_SCH     -8.6418e+05 -1.6627e+05 -7.7853e+03  4.3222e+05\n   PROX_SHOPPING_MALL   -1.8272e+06 -1.3175e+05 -1.4049e+04  1.3799e+05\n   PROX_BUS_STOP        -2.0579e+06 -7.1461e+04  4.1104e+05  1.2071e+06\n   NO_Of_UNITS          -2.1993e+03 -2.3685e+02 -3.4699e+01  1.1657e+02\n   FAMILY_FRIENDLY      -5.9879e+05 -5.0927e+04  2.6173e+04  2.2481e+05\n   FREEHOLD             -1.6340e+05  4.0765e+04  1.9023e+05  3.7960e+05\n                            Max.\n   Intercept            18758355\n   AREA_SQM                23064\n   AGE                     13303\n   PROX_CBD             11346650\n   PROX_CHILDCARE        2892127\n   PROX_ELDERLYCARE      2465671\n   PROX_URA_GROWTH_AREA  7384059\n   PROX_MRT              1186242\n   PROX_PARK             2588497\n   PROX_PRIMARY_SCH      3381462\n   PROX_SHOPPING_MALL   38038564\n   PROX_BUS_STOP        12081592\n   NO_Of_UNITS              1010\n   FAMILY_FRIENDLY       2072414\n   FREEHOLD              1813995\n   ************************Diagnostic information*************************\n   Number of data points: 1436 \n   Effective number of parameters (2trace(S) - trace(S'S)): 350.3088 \n   Effective degrees of freedom (n-2trace(S) + trace(S'S)): 1085.691 \n   AICc (GWR book, Fotheringham, et al. 2002, p. 61, eq 2.33): 41982.22 \n   AIC (GWR book, Fotheringham, et al. 2002,GWR p. 96, eq. 4.22): 41546.74 \n   BIC (GWR book, Fotheringham, et al. 2002,GWR p. 61, eq. 2.34): 41914.08 \n   Residual sum of squares: 2.528227e+14 \n   R-square value:  0.8912425 \n   Adjusted R-square value:  0.8561185 \n\n   ***********************************************************************\n   Program stops at: 2022-12-10 22:05:55 \n\n\nThe report shows that the adjusted r-square of the gwr is 0.8561 which is significantly better than the global multiple linear regression model of 0.6472. Also, GWR model AIC is less than Global multiple linear regreesion AIC. Therefore, GWR results will be used for further analysis."
  },
  {
    "objectID": "Hand-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html#visualizing-gwr-output",
    "href": "Hand-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html#visualizing-gwr-output",
    "title": "Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "Visualizing GWR Output",
    "text": "Visualizing GWR Output\nIn addition to regression residuals, the output feature class table includes fields for observed and predicted y values, condition number (cond), Local R2, residuals, and explanatory variable coefficients and standard errors:\n\nCondition Number: this diagnostic evaluates local collinearity. In the presence of strong local collinearity, results become unstable. Results associated with condition numbers larger than 30, may be unreliable.\nLocal R2: these values range between 0.0 and 1.0 and indicate how well the local regression model fits observed y values. Very low values indicate the local model is performing poorly. Mapping the Local R2 values to see where GWR predicts well and where it predicts poorly may provide clues about important variables that may be missing from the regression model.\nPredicted: these are the estimated (or fitted) y values 3. computed by GWR.\nResiduals: to obtain the residual values, the fitted y values are subtracted from the observed y values. Standardized residuals have a mean of zero and a standard deviation of 1. A cold-to-hot rendered map of standardized residuals can be produce by using these values.\nCoefficient Standard Error: these values measure the reliability of each coefficient estimate. Confidence in those estimates are higher when standard errors are small in relation to the actual coefficient values. Large standard errors may indicate problems with local collinearity.\n\nThey are all stored in a SpatialPointsDataFrame or SpatialPolygonsDataFrame object integrated with fit.points, GWR coefficient estimates, y value, predicted values, coefficient standard errors and t-values in its “data” slot in an object called SDF of the output list."
  },
  {
    "objectID": "Hand-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html#converting-sdf-into-sf-data.frame",
    "href": "Hand-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html#converting-sdf-into-sf-data.frame",
    "title": "Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "Converting SDF into sf data.frame",
    "text": "Converting SDF into sf data.frame\nFirstly, we will convert data into sf data.frame by using the code chunk below.\n\ncondo_resale.sf.adaptive <- st_as_sf(gwr.adaptive$SDF) %>%\n  st_transform(crs=3414)\n\n\ncondo_resale.sf.adaptive.svy21 <- st_transform(condo_resale.sf.adaptive, 3414)\ncondo_resale.sf.adaptive.svy21  \n\nSimple feature collection with 1436 features and 51 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 14940.85 ymin: 24765.67 xmax: 43352.45 ymax: 48382.81\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n    Intercept  AREA_SQM        AGE  PROX_CBD PROX_CHILDCARE PROX_ELDERLYCARE\n1   2050011.7  9561.892  -9514.634 -120681.9      319266.92       -393417.79\n2   1633128.2 16576.853 -58185.479 -149434.2      441102.18        325188.74\n3   3433608.2 13091.861 -26707.386 -259397.8     -120116.82        535855.81\n4    234358.9 20730.601 -93308.988 2426853.7      480825.28        314783.72\n5   2285804.9  6722.836 -17608.018 -316835.5       90764.78       -137384.61\n6  -3568877.4  6039.581 -26535.592  327306.1     -152531.19       -700392.85\n7  -2874842.4 16843.575 -59166.727 -983577.2     -177810.50       -122384.02\n8   2038086.0  6905.135 -17681.897 -285076.6       70259.40        -96012.78\n9   1718478.4  9580.703 -14401.128  105803.4     -657698.02       -123276.00\n10  3457054.0 14072.011 -31579.884 -234895.4       79961.45        548581.04\n   PROX_URA_GROWTH_AREA    PROX_MRT  PROX_PARK PROX_PRIMARY_SCH\n1            -159980.20  -299742.96 -172104.47        242668.03\n2            -142290.39 -2510522.23  523379.72       1106830.66\n3            -253621.21  -936853.28  209099.85        571462.33\n4           -2679297.89 -2039479.50 -759153.26       3127477.21\n5             303714.81   -44567.05  -10284.62         30413.56\n6             -28051.25   733566.47 1511488.92        320878.23\n7            1397676.38 -2745430.34  710114.74       1786570.95\n8             269368.71   -14552.99   73533.34         53359.73\n9            -361974.72  -476785.32 -132067.59        -40128.92\n10           -150024.38 -1503835.53  574155.47        108996.67\n   PROX_SHOPPING_MALL PROX_BUS_STOP  NO_Of_UNITS FAMILY_FRIENDLY  FREEHOLD\n1          300881.390     1210615.4  104.8290640       -9075.370  303955.6\n2          -87693.378     1843587.2 -288.3441183      310074.664  396221.3\n3         -126732.712     1411924.9   -9.5532945        5949.746  168821.7\n4          -29593.342     7225577.5 -161.3551620     1556178.531 1212515.6\n5           -7490.586      677577.0   42.2659674       58986.951  328175.2\n6          258583.881     1086012.6 -214.3671271      201992.641  471873.1\n7         -384251.210     5094060.5   -0.9212521      359659.512  408871.9\n8          -39634.902      735767.1   30.1741069       55602.506  347075.0\n9          276718.757     2815772.4  675.1615559      -30453.297  503872.8\n10        -454726.822     2123557.0  -21.3044311     -100935.586  213324.6\n         y    yhat    residual CV_Score Stud_residual Intercept_SE AREA_SQM_SE\n1  3000000 2886532   113468.16        0    0.38207013     516105.5    823.2860\n2  3880000 3466801   413198.52        0    1.01433140     488083.5    825.2380\n3  3325000 3616527  -291527.20        0   -0.83780678     963711.4    988.2240\n4  4250000 5435482 -1185481.63        0   -2.84614670     444185.5    617.4007\n5  1400000 1388166    11834.26        0    0.03404453    2119620.6   1376.2778\n6  1320000 1516702  -196701.94        0   -0.72065800   28572883.7   2348.0091\n7  3410000 3266881   143118.77        0    0.41291992     679546.6    893.5893\n8  1420000 1431955   -11955.27        0   -0.03033109    2217773.1   1415.2604\n9  2025000 1832799   192200.83        0    0.52018109     814281.8    943.8434\n10 2550000 2223364   326635.53        0    1.10559735    2410252.0   1271.4073\n      AGE_SE PROX_CBD_SE PROX_CHILDCARE_SE PROX_ELDERLYCARE_SE\n1   5889.782    37411.22          319111.1           120633.34\n2   6226.916    23615.06          299705.3            84546.69\n3   6510.236    56103.77          349128.5           129687.07\n4   6010.511   469337.41          304965.2           127150.69\n5   8180.361   410644.47          698720.6           327371.55\n6  14601.909  5272846.47         1141599.8          1653002.19\n7   8970.629   346164.20          530101.1           148598.71\n8   8661.309   438035.69          742532.8           399221.05\n9  11791.208    89148.35          704630.7           329683.30\n10  9941.980   173532.77          500976.2           281876.74\n   PROX_URA_GROWTH_AREA_SE PROX_MRT_SE PROX_PARK_SE PROX_PRIMARY_SCH_SE\n1                 56207.39    185181.3     205499.6            152400.7\n2                 76956.50    281133.9     229358.7            165150.7\n3                 95774.60    275483.7     314124.3            196662.6\n4                470762.12    279877.1     227249.4            240878.9\n5                474339.56    363830.0     364580.9            249087.7\n6               5496627.21    730453.2    1741712.0            683265.5\n7                371692.97    375511.9     297400.9            344602.8\n8                517977.91    423155.4     440984.4            261251.2\n9                153436.22    285325.4     304998.4            278258.5\n10               239182.57    571355.7     599131.8            331284.8\n   PROX_SHOPPING_MALL_SE PROX_BUS_STOP_SE NO_Of_UNITS_SE FAMILY_FRIENDLY_SE\n1               109268.8         600668.6       218.1258           131474.7\n2                98906.8         410222.1       208.9410           114989.1\n3               119913.3         464156.7       210.9828           146607.2\n4               177104.1         562810.8       361.7767           108726.6\n5               301032.9         740922.4       299.5034           160663.7\n6              2931208.6        1418333.3       602.5571           331727.0\n7               249969.5         821236.4       532.1978           129241.2\n8               351634.0         775038.4       338.6777           171895.1\n9               289872.7         850095.5       439.9037           220223.4\n10              265529.7         631399.2       259.0169           189125.5\n   FREEHOLD_SE Intercept_TV AREA_SQM_TV     AGE_TV PROX_CBD_TV\n1     115954.0    3.9720784   11.614302  -1.615447 -3.22582173\n2     130110.0    3.3460017   20.087361  -9.344188 -6.32792021\n3     141031.5    3.5629010   13.247868  -4.102368 -4.62353528\n4     138239.1    0.5276150   33.577223 -15.524302  5.17080808\n5     210641.1    1.0784029    4.884795  -2.152474 -0.77155660\n6     374347.3   -0.1249043    2.572214  -1.817269  0.06207388\n7     182216.9   -4.2305303   18.849348  -6.595605 -2.84136028\n8     216649.4    0.9189786    4.879056  -2.041481 -0.65080678\n9     220473.7    2.1104224   10.150733  -1.221345  1.18682383\n10    206346.2    1.4343123   11.068059  -3.176418 -1.35360852\n   PROX_CHILDCARE_TV PROX_ELDERLYCARE_TV PROX_URA_GROWTH_AREA_TV PROX_MRT_TV\n1         1.00048819          -3.2612693            -2.846248368 -1.61864578\n2         1.47178634           3.8462625            -1.848971738 -8.92998600\n3        -0.34404755           4.1319138            -2.648105057 -3.40075727\n4         1.57665606           2.4756745            -5.691404992 -7.28705261\n5         0.12990138          -0.4196596             0.640289855 -0.12249416\n6        -0.13361179          -0.4237096            -0.005103357  1.00426206\n7        -0.33542751          -0.8235874             3.760298131 -7.31116712\n8         0.09462126          -0.2405003             0.520038994 -0.03439159\n9        -0.93339393          -0.3739225            -2.359121712 -1.67102293\n10        0.15961128           1.9461735            -0.627237944 -2.63204802\n   PROX_PARK_TV PROX_PRIMARY_SCH_TV PROX_SHOPPING_MALL_TV PROX_BUS_STOP_TV\n1   -0.83749312           1.5923022            2.75358842        2.0154464\n2    2.28192684           6.7019454           -0.88662640        4.4941192\n3    0.66565951           2.9058009           -1.05686949        3.0419145\n4   -3.34061770          12.9836105           -0.16709578       12.8383775\n5   -0.02820944           0.1220998           -0.02488294        0.9145046\n6    0.86781794           0.4696245            0.08821750        0.7656963\n7    2.38773567           5.1844351           -1.53719231        6.2029165\n8    0.16674816           0.2042469           -0.11271635        0.9493299\n9   -0.43301073          -0.1442145            0.95462153        3.3123012\n10   0.95831249           0.3290120           -1.71252687        3.3632555\n   NO_Of_UNITS_TV FAMILY_FRIENDLY_TV FREEHOLD_TV  Local_R2\n1     0.480589953        -0.06902748    2.621347 0.8846744\n2    -1.380026395         2.69655779    3.045280 0.8899773\n3    -0.045279967         0.04058290    1.197050 0.8947007\n4    -0.446007570        14.31276425    8.771149 0.9073605\n5     0.141120178         0.36714544    1.557983 0.9510057\n6    -0.355762335         0.60891234    1.260522 0.9247586\n7    -0.001731033         2.78285441    2.243875 0.8310458\n8     0.089093858         0.32346758    1.602012 0.9463936\n9     1.534793921        -0.13828365    2.285410 0.8380365\n10   -0.082251138        -0.53369623    1.033819 0.9080753\n                    geometry\n1  POINT (22085.12 29951.54)\n2   POINT (25656.84 34546.2)\n3   POINT (23963.99 32890.8)\n4  POINT (27044.28 32319.77)\n5  POINT (41042.56 33743.64)\n6   POINT (39717.04 32943.1)\n7   POINT (28419.1 33513.37)\n8  POINT (40763.57 33879.61)\n9  POINT (23595.63 28884.78)\n10 POINT (24586.56 33194.31)\n\n\n\ngwr.adaptive.output <- as.data.frame(gwr.adaptive$SDF)\ncondo_resale.sf.adaptive <- cbind(condo_resale.res.sf, as.matrix(gwr.adaptive.output))\n\n\nglimpse(condo_resale.sf.adaptive)\n\nRows: 1,436\nColumns: 77\n$ POSTCODE                <dbl> 118635, 288420, 267833, 258380, 467169, 466472…\n$ SELLING_PRICE           <dbl> 3000000, 3880000, 3325000, 4250000, 1400000, 1…\n$ AREA_SQM                <dbl> 309, 290, 248, 127, 145, 139, 218, 141, 165, 1…\n$ AGE                     <dbl> 30, 32, 33, 7, 28, 22, 24, 24, 27, 31, 17, 22,…\n$ PROX_CBD                <dbl> 7.941259, 6.609797, 6.898000, 4.038861, 11.783…\n$ PROX_CHILDCARE          <dbl> 0.16597932, 0.28027246, 0.42922669, 0.39473543…\n$ PROX_ELDERLYCARE        <dbl> 2.5198118, 1.9333338, 0.5021395, 1.9910316, 1.…\n$ PROX_URA_GROWTH_AREA    <dbl> 6.618741, 7.505109, 6.463887, 4.906512, 6.4106…\n$ PROX_HAWKER_MARKET      <dbl> 1.76542207, 0.54507614, 0.37789301, 1.68259969…\n$ PROX_KINDERGARTEN       <dbl> 0.05835552, 0.61592412, 0.14120309, 0.38200076…\n$ PROX_MRT                <dbl> 0.5607188, 0.6584461, 0.3053433, 0.6910183, 0.…\n$ PROX_PARK               <dbl> 1.1710446, 0.1992269, 0.2779886, 0.9832843, 0.…\n$ PROX_PRIMARY_SCH        <dbl> 1.6340256, 0.9747834, 1.4715016, 1.4546324, 0.…\n$ PROX_TOP_PRIMARY_SCH    <dbl> 3.3273195, 0.9747834, 1.4715016, 2.3006394, 0.…\n$ PROX_SHOPPING_MALL      <dbl> 2.2102717, 2.9374279, 1.2256850, 0.3525671, 1.…\n$ PROX_SUPERMARKET        <dbl> 0.9103958, 0.5900617, 0.4135583, 0.4162219, 0.…\n$ PROX_BUS_STOP           <dbl> 0.10336166, 0.28673408, 0.28504777, 0.29872340…\n$ NO_Of_UNITS             <dbl> 18, 20, 27, 30, 30, 31, 32, 32, 32, 32, 34, 34…\n$ FAMILY_FRIENDLY         <dbl> 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0…\n$ FREEHOLD                <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1…\n$ LEASEHOLD_99YR          <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ LOG_SELLING_PRICE       <dbl> 14.91412, 15.17135, 15.01698, 15.26243, 14.151…\n$ MLR_RES                 <dbl> -1489099.55, 415494.57, 194129.69, 1088992.71,…\n$ Intercept               <dbl> 2050011.67, 1633128.24, 3433608.17, 234358.91,…\n$ AREA_SQM.1              <dbl> 9561.892, 16576.853, 13091.861, 20730.601, 672…\n$ AGE.1                   <dbl> -9514.634, -58185.479, -26707.386, -93308.988,…\n$ PROX_CBD.1              <dbl> -120681.94, -149434.22, -259397.77, 2426853.66…\n$ PROX_CHILDCARE.1        <dbl> 319266.925, 441102.177, -120116.816, 480825.28…\n$ PROX_ELDERLYCARE.1      <dbl> -393417.795, 325188.741, 535855.806, 314783.72…\n$ PROX_URA_GROWTH_AREA.1  <dbl> -159980.203, -142290.389, -253621.206, -267929…\n$ PROX_MRT.1              <dbl> -299742.96, -2510522.23, -936853.28, -2039479.…\n$ PROX_PARK.1             <dbl> -172104.47, 523379.72, 209099.85, -759153.26, …\n$ PROX_PRIMARY_SCH.1      <dbl> 242668.03, 1106830.66, 571462.33, 3127477.21, …\n$ PROX_SHOPPING_MALL.1    <dbl> 300881.390, -87693.378, -126732.712, -29593.34…\n$ PROX_BUS_STOP.1         <dbl> 1210615.44, 1843587.22, 1411924.90, 7225577.51…\n$ NO_Of_UNITS.1           <dbl> 104.8290640, -288.3441183, -9.5532945, -161.35…\n$ FAMILY_FRIENDLY.1       <dbl> -9075.370, 310074.664, 5949.746, 1556178.531, …\n$ FREEHOLD.1              <dbl> 303955.61, 396221.27, 168821.75, 1212515.58, 3…\n$ y                       <dbl> 3000000, 3880000, 3325000, 4250000, 1400000, 1…\n$ yhat                    <dbl> 2886531.8, 3466801.5, 3616527.2, 5435481.6, 13…\n$ residual                <dbl> 113468.16, 413198.52, -291527.20, -1185481.63,…\n$ CV_Score                <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ Stud_residual           <dbl> 0.38207013, 1.01433140, -0.83780678, -2.846146…\n$ Intercept_SE            <dbl> 516105.5, 488083.5, 963711.4, 444185.5, 211962…\n$ AREA_SQM_SE             <dbl> 823.2860, 825.2380, 988.2240, 617.4007, 1376.2…\n$ AGE_SE                  <dbl> 5889.782, 6226.916, 6510.236, 6010.511, 8180.3…\n$ PROX_CBD_SE             <dbl> 37411.22, 23615.06, 56103.77, 469337.41, 41064…\n$ PROX_CHILDCARE_SE       <dbl> 319111.1, 299705.3, 349128.5, 304965.2, 698720…\n$ PROX_ELDERLYCARE_SE     <dbl> 120633.34, 84546.69, 129687.07, 127150.69, 327…\n$ PROX_URA_GROWTH_AREA_SE <dbl> 56207.39, 76956.50, 95774.60, 470762.12, 47433…\n$ PROX_MRT_SE             <dbl> 185181.3, 281133.9, 275483.7, 279877.1, 363830…\n$ PROX_PARK_SE            <dbl> 205499.6, 229358.7, 314124.3, 227249.4, 364580…\n$ PROX_PRIMARY_SCH_SE     <dbl> 152400.7, 165150.7, 196662.6, 240878.9, 249087…\n$ PROX_SHOPPING_MALL_SE   <dbl> 109268.8, 98906.8, 119913.3, 177104.1, 301032.…\n$ PROX_BUS_STOP_SE        <dbl> 600668.6, 410222.1, 464156.7, 562810.8, 740922…\n$ NO_Of_UNITS_SE          <dbl> 218.1258, 208.9410, 210.9828, 361.7767, 299.50…\n$ FAMILY_FRIENDLY_SE      <dbl> 131474.73, 114989.07, 146607.22, 108726.62, 16…\n$ FREEHOLD_SE             <dbl> 115954.0, 130110.0, 141031.5, 138239.1, 210641…\n$ Intercept_TV            <dbl> 3.9720784, 3.3460017, 3.5629010, 0.5276150, 1.…\n$ AREA_SQM_TV             <dbl> 11.614302, 20.087361, 13.247868, 33.577223, 4.…\n$ AGE_TV                  <dbl> -1.6154474, -9.3441881, -4.1023685, -15.524301…\n$ PROX_CBD_TV             <dbl> -3.22582173, -6.32792021, -4.62353528, 5.17080…\n$ PROX_CHILDCARE_TV       <dbl> 1.000488185, 1.471786337, -0.344047555, 1.5766…\n$ PROX_ELDERLYCARE_TV     <dbl> -3.26126929, 3.84626245, 4.13191383, 2.4756745…\n$ PROX_URA_GROWTH_AREA_TV <dbl> -2.846248368, -1.848971738, -2.648105057, -5.6…\n$ PROX_MRT_TV             <dbl> -1.61864578, -8.92998600, -3.40075727, -7.2870…\n$ PROX_PARK_TV            <dbl> -0.83749312, 2.28192684, 0.66565951, -3.340617…\n$ PROX_PRIMARY_SCH_TV     <dbl> 1.59230221, 6.70194543, 2.90580089, 12.9836104…\n$ PROX_SHOPPING_MALL_TV   <dbl> 2.753588422, -0.886626400, -1.056869486, -0.16…\n$ PROX_BUS_STOP_TV        <dbl> 2.0154464, 4.4941192, 3.0419145, 12.8383775, 0…\n$ NO_Of_UNITS_TV          <dbl> 0.480589953, -1.380026395, -0.045279967, -0.44…\n$ FAMILY_FRIENDLY_TV      <dbl> -0.06902748, 2.69655779, 0.04058290, 14.312764…\n$ FREEHOLD_TV             <dbl> 2.6213469, 3.0452799, 1.1970499, 8.7711485, 1.…\n$ Local_R2                <dbl> 0.8846744, 0.8899773, 0.8947007, 0.9073605, 0.…\n$ coords.x1               <dbl> 22085.12, 25656.84, 23963.99, 27044.28, 41042.…\n$ coords.x2               <dbl> 29951.54, 34546.20, 32890.80, 32319.77, 33743.…\n$ geometry                <POINT [m]> POINT (22085.12 29951.54), POINT (25656.…\n\n\n\nsummary(gwr.adaptive$SDF$yhat)\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n  171347  1102001  1385528  1751842  1982307 13887901"
  },
  {
    "objectID": "Hand-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html#visualizing-local-r2",
    "href": "Hand-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html#visualizing-local-r2",
    "title": "Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "Visualizing local R2",
    "text": "Visualizing local R2\nThe code chunks below is used to create an interactive point symbol map.\n\ntmap_mode(\"view\")    #interactive mode\n\ntmap mode set to interactive viewing\n\ntm_shape(mpsz_svy21)+\n  tm_polygons(alpha = 0.1) +\ntm_shape(condo_resale.sf.adaptive) +  \n  tm_dots(col = \"Local_R2\",\n          border.col = \"gray60\",\n          border.lwd = 1) +\n  tm_view(set.zoom.limits = c(11,14))\n\nWarning: The shape mpsz_svy21 is invalid (after reprojection). See\nsf::st_is_valid\n\n\n\n\n\n\n\n\ntmap_mode(\"plot\")   #static view\n\ntmap mode set to plotting"
  },
  {
    "objectID": "Hand-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html#visualizing-coefficient-estimates",
    "href": "Hand-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html#visualizing-coefficient-estimates",
    "title": "Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "Visualizing coefficient estimates",
    "text": "Visualizing coefficient estimates\nThe code chunks below is used to create an interactive point symbol map.\n\ntmap_mode(\"view\")\n\ntmap mode set to interactive viewing\n\nAREA_SQM_SE <- tm_shape(mpsz_svy21)+\n  tm_polygons(alpha = 0.1) +\ntm_shape(condo_resale.sf.adaptive) +  \n  tm_dots(col = \"AREA_SQM_SE\",\n          border.col = \"gray60\",\n          border.lwd = 1) +\n  tm_view(set.zoom.limits = c(11,14))\n\nAREA_SQM_TV <- tm_shape(mpsz_svy21)+\n  tm_polygons(alpha = 0.1) +\ntm_shape(condo_resale.sf.adaptive) +  \n  tm_dots(col = \"AREA_SQM_TV\",\n          border.col = \"gray60\",\n          border.lwd = 1) +\n  tm_view(set.zoom.limits = c(11,14))\n\ntmap_arrange(AREA_SQM_SE, AREA_SQM_TV, \n             asp=1, ncol=2,\n             sync = TRUE)\n\nWarning: The shape mpsz_svy21 is invalid (after reprojection). See\nsf::st_is_valid\n\nWarning: The shape mpsz_svy21 is invalid (after reprojection). See\nsf::st_is_valid\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNOTE: Sync is used in tmap_arrange, to control zoom for both the maps simultaneously. It will help in better comparison of both the maps together.\n\ntmap_mode(\"plot\")    #static plotting\n\ntmap mode set to plotting\n\n\n\nBy URA Planning Region\n\ntm_shape(mpsz_svy21[mpsz_svy21$REGION_N==\"CENTRAL REGION\", ])+\n  tm_polygons()+\ntm_shape(condo_resale.sf.adaptive) + \n  tm_bubbles(col = \"Local_R2\",\n           size = 0.15,\n           border.col = \"gray60\",\n           border.lwd = 1)\n\nWarning: The shape mpsz_svy21[mpsz_svy21$REGION_N == \"CENTRAL REGION\", ] is\ninvalid. See sf::st_is_valid"
  }
]