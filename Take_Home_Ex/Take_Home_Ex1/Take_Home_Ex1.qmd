---
title: "Geospatial Analytics for Social Good: Non Functional Spatial Distribution of Water Points in Nigeria"
author: "Ridhima Bansal"
date: "November 29,2022"
editor: visual  
---

# Background

Water is an essential resource, providing healthy environment, a sustainable economy, reducing poverty and also ensuring peace and security. Importance of accessible and clear water is very critical, already 40% of the population doesn't have access to safe drinkable water. The scarcity of water leads to imbalance in the ecosystem. There will be food scarcity as agricultural department is dependent on world's accessible freshwater.

Scarcity of fresh water is so adverse that 80% of illness in developing countries are because of lack of sanitation and clean water. Providing clean water in rural communities of the developing countries is still a major issue in many countries globally, especially countries in Africa continent.

To address this issue a projected has been initiated with aim to collect water point related data from rural areas at the water point or small water scheme level and share the data via WPdx Data Repository, a cloud-based data library.

# Objective

To address complex problems faced by society using geospatial analysis. Using appropriate global and local measures of spatial Association techniques, the spatial patterns of Not Functional water points are revealed. In this exercise, Nigeria will be used as a study point country.

# The Data

## Aspatial Data

The data from [WPdx Global Data Repositories](https://www.waterpointdata.org/access-data/) will be used, WPdx+ data set.

## Geospatial Data

Nigeria Level-2 Administrative Boundary (also known as Local Government Area) polygon features GIS data will be used downloaded from [geoBoundaries](https://www.geoboundaries.org/).

# The Task

## Data Wrangling

Following tasks will be performed in geospatial analysis:

-   Using appropriate sf method, importing the shapefile into R and save it in a simple feature data frame format.

-   Using appropriate tidyr and dplyr methods, proportion of functional and non-functional water point at LGA level is derived.

-   Combining the geospatial and aspatial data frame into simple feature data frame.

-   Performing outliers/clusters analysis by using appropriate local measures of spatial association methods.

-   Performing hotspot areas analysis by using appropriate local measures of spatial association methods.

## Thematic Mapping

-   Maps are plotted to show the spatial distribution of functional and non-functional water point rate at LGA level by using appropriate thematic mapping technique provided by tmap package.

## Analytical Mapping

-   Hotspot areas and outliers/clusters maps of functional and non0functional water point rate at LGA level by using appropriate thematic mapping technique provided by tmap package.

# Getting Started

## Setting the Analytical Tools

Installing and launching R packages into R environment

```{R}
pacman::p_load(sf, spdep, tmap, tidyverse,funModeling)
```

Explanation of the following packages:

-   **sf**: used for importing, managing, and processing geospatial data

-   **tidyverse**: a collection of packages for data science tasks

-   **tmap**: used for creating thematic maps, such as choropleth and bubble maps

-   **spdep**: used for following computations:

    1.  Global Spatial Autocorrelation (GSA) statistics\
    2.  Local Indicator of Spatial Association (LISA) statistics for detecting clusters and outliers\
    3.  Getis-Ord's Gi-statistics for detecting hot spot or/and cold spot area

-   **funModeling**: used for Exploratory data analysis, data preparation and model performance

## Import shapefile into R environment

### Importing water point geospatial

Using, st_read() of **sf** package, Nigeria Level-2 Administrative Boundary shapefile is imported into R environment.

```{r}
#| eval: false

wp <- st_read(dsn = "Geodata",
              layer = "geo_export",
              crs = 4326) %>%
  filter(clean_coun == "Nigeria")
```

Things to learn from the code chunk above:

\*\*st_read()\*\* of sf package is used to import geo_export shapefile into R environment and save the imported geospatial data into simple feature data table.

\*\*filter()\*\* of dplyr package is used to extract water point records of Nigeria. In the code chunk below, "write_rds()" of reader package is used to save the extracted sf table .....

Next, \`write_rds()\` of readr package is used to save the extracted sf data table (i.e.Â wp) into an output file in rds data format. The output file is called \*wp_nga.rds\* and it is saved in \*geodata\* sub-folder.

```{R}
#| eval: false
write_rds(wp, "Geodata/wp_nga.rds")
```

### Importing Nigeria LGA boundary data

Now, we are going to import the LGA boundary data into R environment by using the code chunk below.

```{R}
#| eval: false
nga <- st_read(dsn = "Geodata",
               layer= "geoBoundaries-NGA-ADM2",
               crs = 4326)
```

Thing to learn from the code chunk above.

\- \`st_read()\` of \*\*sf\*\* package is used to import \*geoBoundaries-NGA-ADM2\* shapefile into R environment and save the imported geospatial data into simple feature data table.

# Data Wrangling

## Recoding the NA values into string

In the code chunk below, \`replace_na()\` is used to recode all the \*NA\* values in \*status_cle\* field into \*Unknown\*.

```{R}
#| eval: false
wp_nga <- read_rds("geodata/wp_nga.rds") %>%
  mutate(status_cle = replace_na(status_cle, "Unknown"))
  
```

## Exploratory Data Analysis

In the code chunk below, `freq()` of **funModeling** package is used to display the distribution of *status_cle* field in *wp_nga*.

```{r}
#| eval: false
freq(data=wp_nga, 
     input = 'status_cle')
```

# Extracting Water Points

By using classes in *status_cle* field, extracting water points records for Nigeria.

## Extracting functional water point

Using, `filter()` of dplyr is used to select functional water points.

```{r}
#| eval: false
wpt_functional <- wp_nga %>%
  filter(status_cle %in%
           c("Functional", 
             "Functional but not in use",
             "Functional but needs repair"))
```

```{r}
#| eval: false
freq(data=wpt_functional, 
     input = 'status_cle')
```

## Extracting non-functional water points

Using, `filter()` of dplyr is used to select non-functional water points.

```{r}
#| eval: false
wpt_nonfunctional <- wp_nga %>%
  filter(status_cle %in%
           c("Abandoned/Decommissioned", 
             "Abandoned",
             "Non-Functional",
             "Non functional due to dry season",
             "Non-Functional due to dry season"))
```

```{r}
#| eval: false
freq(data=wpt_nonfunctional, 
     input = 'status_cle')
```

## Extracting water point with unknown class

Using, `filter()` of dplyr is used to select water points with unknown status.

```{r}
#| eval: false
wpt_unknown <- wp_nga %>%
  filter(status_cle == "Unknown")
```

# Performing Point-in Polygon Count

```{r}
#| eval: false
nga_wp <- nga %>% 
  mutate(`total wpt` = lengths(
    st_intersects(nga, wp_nga))) %>%
  mutate(`wpt functional` = lengths(
    st_intersects(nga, wpt_functional))) %>%
  mutate(`wpt non-functional` = lengths(
    st_intersects(nga, wpt_nonfunctional))) %>%
  mutate(`wpt unknown` = lengths(
    st_intersects(nga, wpt_unknown)))
```

# Saving the Analytical Data Table

Learnings from code chunks:

-   `mutate()` of **dplyr** package is used to derive two fields namely *pct_functional* and *pct_non-functional*.

-   to keep the file size small, `select()` of **dplyr** is used to retain only field 3,4,9,10, 18,19,20,21,22,and 23.

```{r}
#| eval: false
nga_wp <- nga_wp %>%
  mutate(pct_functional = `wpt functional`/`total wpt`) %>%
  mutate(`pct_non-functional` = `wpt non-functional`/`total wpt`)
```

```{r}
#| eval: false
write_rds(nga_wp, "Geodata/nga_wp.rds")
```

# Visualising the spatial distribution of water points

```{r}
nga_wp <- read_rds("Geodata/nga_wp.rds")
#| fig-width: 14
#| fig:height: 12
  tm_shape(nga_wp)+
  tm_fill(c("total wpt","wpt functional","wpt non-functional","wpt unknown"), 
          style = "quantile", 
          palette = "Blues") +
  tm_layout(main.title = "Distribution of Water Points",
            main.title.position = "center",
            main.title.size = 1,
            legend.height = 0.25, 
            legend.width = 0.35,
            legend.position = c("right", "bottom"),
            frame = TRUE) +
  tm_borders(alpha = 0.5)
```

Using maps we can observe exact number of total, non functional, non-functional and unknown spatial distribution of water points. (Figure 1)

![](images/paste-31344AB4.png){fig-align="center"}

Fig 1: Visual spatial distribution of water points

## **Observations**

Above visualization shows the spatial distribution of water points in functional, non functional and unknown classes. The darker blue shade shows that proportion of water points in the particular region is highest among all the neighboring regions.

It can be observed that cluster of Wukari, Gassol, Ardo Kola, Zing, Bali has high proportion of functional, non functional and unknown class water points.

# Thematic Mapping

Thematic maps are the single0topic maps that focus on specific themes or phenomena. By using. ***tmap()*** package,spatial distribution of functional and non functional water point rate at LGA level can be plotted.

But for our study we will only plot the **non functional** spatial distribution of water points using the code chunk below:

```{R}
equal <- tm_shape(nga_wp) +
  tm_fill("wpt non-functional",
          n = 5,
          style = "equal") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Equal interval classification")

quantile <- tm_shape(nga_wp) +
  tm_fill("wpt non-functional",
          n = 5,
          style = "quantile") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Equal quantile classification")

tmap_arrange(equal, 
             quantile, 
             asp=1, 
             ncol=2)
```

Left Map: It shows the equal **interval** classification of non functional spatial distribution of water points.\
Right Map: It shows the equal **quantile** classification of non functional spatial distribution of water points.

# Computing Contiguity Spatial Weights

Global spatial autocorrelation statistics is computed and spatial complete randomness test for global spatial autocorrelation is performed.

We are using **Queen method**, considering areas adjacent if they are located horizontally, vertically and diagonally on a 2-D plane.

Using **the code chunk below**, Queen contiguity weight matrix is computed:

```{R}
wm_q <- poly2nb(nga_wp, 
                queen=TRUE)
summary(wm_q)
```

In the above code chunk, **poly2nb()** of **spdep** package is used to compute contiguity weight matrices for the study area.

The **summary report** shows that in Nigeria area there are 774 area units. The most number of neighbors are with 508th area unit and the least number of neighbors are with 138th and 560th area unit. There is a region, 86th with no neighbors.

```{R}
set.ZeroPolicyOption(TRUE)
```

## Row- Standardized weight matrix

In this method, each neighboring polygon will assigned with equal weights (style="W"). W means sum over all links to n. It is done by assigning the fraction 1/(#ofneighbors) to each neighboring county then summing the weighted income values.

There are 2 major arguments of function ***nb2listw():***

1.  ***styles*** can take values "W", "B", "C", "U", "minmax" and "S".
2.  If *zero policy* is set to TRUE, weights vectors of zero length are inserted for regions without neighbor in the neighbours list. These will in turn generate lag values of zero, equivalent to the sum of products of the zero row t(rep(0, length=length(neighbours))) %\*% x, for arbitrary numerical vector x of length length(neighbours). The spatially lagged value of x for the zero-neighbour region will then be zero, which may (or may not) be a sensible choice.

```{R}
rswm_q <- nb2listw(wm_q, 
                   style="W", 
                   zero.policy = TRUE)
rswm_q
```

The above **summary report** shows that there are 774 total number of regions. Using, row standardized weight matrix there are on an average 5 neighbors per region.

# Global Spatial Autocorrelation: Moran's I

Using the code chunk below, ***moran.test() from spdep,*** Moran's I statistics testing will be performed on non functional water points.

```{R}
moran.test(nga_wp$`wpt non-functional`, 
           listw=rswm_q, 
           zero.policy = TRUE, 
           na.action=na.omit)

```

The code chunk above, moran.test() is used Moran's test for spatial autocorrelation using a spatial weights matrix in weights list form.

## Observation

It can be observed that Z value, 0.433, is greater than zero. Therefore, it can be concluded non functional spatial distribution of water points are clusters and observations tend to be similar. But before making final conclusion on statistical test, we will perform Monte Carlo Moran's I simulation.

## Computing Monte Carlo's Moran's I

Monte Carlo simulation is performed when there is a doubt that the assumptions of Moran's I are true (normality and randomization).

The code chunk below performs permutation test for Moran's I statistic by using **m*oran.mc()*** of **spdep**. A total of 1000 simulation will be performed.

nsim is set as 999 for 1000 simulations as 0 is also included.

```{R}
set.seed(1234)
bperm= moran.mc(nga_wp$`wpt non-functional`, 
                listw=rswm_q, 
                nsim=999, 
                zero.policy = TRUE, 
                na.action=na.omit)
bperm
```

### Observations

**Null Hyposthesis**: The distribution of non functional water points are random phenomenon.

**Alternative Hypothesis**: that the distribution non functional water points is spatially dependent through calculating the Moran's I statistic and Geary's C ratio for the data set

From the above results, we can observe p value is less than significant level of 0.05. Therefore, we can **reject** the null hypothesis. It can be concluded that distribution of non functional water points are spatially dependent through calculating the Moran's I statistics ratio for the data set.

## Visualizing Monte Carlo Moran's I

Monte Carlo Moran's I statistics testing will be visualized by plotting the distribution of the statistical values as a histogram by using the code chunk below:

In the code chunk below ***hist()*** and ***abline()*** of R Graphics are used.

```{R}
mean(bperm$res[1:999])
```

```{R}
var(bperm$res[1:999])
```

```{R}
summary(bperm$res[1:999])
```

```{R}
hist(bperm$res, 
     freq=TRUE, 
     breaks=20, 
     xlab="Simulated Moran's I")
abline(v=0, 
       col="red") 
```

Learnings from above code chunk :

**hist()** -computes a histogram of the given data values.

**abline()-** This function adds one or more straight lines through the current plot

From the above histogram, it can interpreted that at Simulated Moran's I value 0 then frequency of non functional spatial water distribution points are maximum.

# Spatial Correlogram

Spatial correlogram are great to examine the patterns of spatial autocorrelation in the data or model residual.

They show how correlated are pairs of spatial observations when you increase the distance (lag) between them - they are plots of some index of autocorrelation (Moran's I) against distance.

## Compute Moran's I Correlogram

Computation of 6-lag spatial correlogram of non functional water points. The global spatial autocorrelation used in Moran's I. The **plot()** of base Graph is then used to plot the output.

```{R}
MI_corr <- sp.correlogram(wm_q, 
                          nga_wp$`wpt non-functional`, 
                          order=6, 
                          method="I", 
                          style="W")
plot(MI_corr)
```

Above plot might not provide complete interpretation as not all autocorrelation values are statistically significant. Therefore, full analysis report is printed using the below code chunk.

```{R}
print(MI_corr)
```

### Observations

From the above output, it can be observed that all the 6 lag spatial correlogram, p value is less than the significant value of 0.05. Therefore null hypothesis, the non functional water points location of values may be altered without affecting the information content of the data, is **rejected**.

# Cluster and Outlier Analysis

Local Indicators of Spatial Association or LISA are statistics that evaluate the existence of clusters in the spatial arrangement of a given variable. We are studying non functional spatial distribution of water points among census tracts in a Nigeria, local clusters in the rates mean that there are areas that have higher or lower rates than is to be expected by chance alone; that is, the values occurring are above or below those of a random distribution in space.

## Computing local Moran's I

Computing local Moran's I of ***non functional water points*** at the county level using **localmoran() function in spdep.**

```{R}
fips <- order(nga_wp$shapeName)
localMI <- localmoran(nga_wp$`wpt non-functional`, rswm_q)
head(localMI)
```

localmoran() function returns a matrix of values whose columns are:

-   Ii: the local Moran's I statistics

-   E.Ii: the expectation of local moran statistic under the randomisation hypothesis

-   Var.Ii: the variance of local moran statistic under the randomisation hypothesis

-   Z.Ii:the standard deviate of local moran statistic

-   Pr(): the p-value of local moran statistic

List the content of the local Moran matrix derived by using *printCoefmat()*

## Mapping the Local Moran's I

Before mapping, append the local Moran's I dataframe (i.e.Â localMI) onto nga_wp SpatialPolygonDataFrame

```{R}
nga_wp.localMI <- cbind(nga_wp,localMI) %>%
  rename(Pr.Ii = Pr.z....E.Ii..)
```

```{R}
tm_shape(nga_wp.localMI) +
  tm_fill(col = "Ii", 
          style = "pretty",
          palette = "RdBu",
          title = "local moran statistics") +
  tm_borders(alpha = 0.5)
```

## Mapping local Moran's I p values

As li has both positive and negative values, therefore it is useful to consider p values for each of these values:

```{R}
tm_shape(nga_wp.localMI) +
  tm_fill(col = "Pr.Ii", 
          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),
          palette="-Blues", 
          title = "local Moran's I p-values") +
  tm_borders(alpha = 0.5)
```

## Mapping both local Moran's I values and p values (Non Functional)

Both the maps are plotted together for in depth comparison analysis for non functional water points in Nigeria.

```{R}
localMI.map <- tm_shape(nga_wp.localMI) +
  tm_fill(col = "Ii", 
          style = "pretty", 
          title = "local moran statistics") +
  tm_borders(alpha = 0.5)
  tm_layout(main.title= "Local Moran's I Statistics",
            main.title.size = 0.7,
            main.title.fontface = "bold")

pvalue.map <- tm_shape(nga_wp.localMI) +
  tm_fill(col = "Pr.Ii", 
          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),
          palette="-Blues", 
          title = "local Moran's I p-values") +
  tm_borders(alpha = 0.5)
  tm_layout(main.title= "Local Moran's p-values(Non Functional)",
            main.title.size = 0.7,
            main.title.fontface = "bold")

tmap_arrange(localMI.map, pvalue.map, asp=1, ncol=2)
```

### Observation

"Green" regions are **outlier** regions with with relatively low value in surrounding regions. When same locations are compared in "Local Moran's I p value" map, their p value is less than significant value 0.05, therefore these outlier regions are statistically significant.

"Light Orange" regions are **clustered** regions with relatively high value in surrounding regions. When these locations are compared with Local Moran's p value map, their p values are more than significant value of 0.05, therefore, these clustered regions are not statistically significant.

## Mapping both local Moran's I values and p values (Functional)

Both the maps are plotted together for in depth comparison analysis for functional water points in Nigeria.

```{R}
fips <- order(nga_wp$shapeName)
localMI_func <- localmoran(nga_wp$`wpt functional`, rswm_q)
nga_wp.localMI_func <- cbind(nga_wp,localMI_func) %>%
  rename(Pr.Ii = Pr.z....E.Ii..)
localMI_func.map <- tm_shape(nga_wp.localMI_func) +
  tm_fill(col = "Ii", 
          style = "pretty", 
          title = "local moran statistics") +
  tm_borders(alpha = 0.5)
  tm_layout(main.title= "Local Moran's I Statistics",
            main.title.size = 0.7,
            main.title.fontface = "bold")

func_pvalue.map <- tm_shape(nga_wp.localMI_func) +
  tm_fill(col = "Pr.Ii", 
          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),
          palette="-Blues", 
          title = "local Moran's I p-values") +
  tm_borders(alpha = 0.5)
  tm_layout(main.title= "Local Moran's p-values(Functional)",
            main.title.size = 0.7,
            main.title.fontface = "bold")

tmap_arrange(localMI.map, pvalue.map, asp=1, ncol=2)

```

### Observation

"Green" regions are **outlier** regions with with relatively low value in surrounding regions. When same locations are compared in "Local Moran's I p value" map, their p value is less than significant value 0.05, therefore these outlier regions are statistically significant.

"Light Orange" regions are **clustered** regions with relatively high value in surrounding regions. When these locations are compared with Local Moran's p value map, their p values are more than significant value of 0.05, therefore, these clustered regions are not statistically significant. But some regions in the north side has p value less than significant value, therefore those clustered areas are statistically significant regions for functional distribution of spatial water points in Nigeria.

# Creating LISA Cluster Map

It shows the significant locations color coded by type of spatial autocorrelation. The first step before we can generate the LISA cluster map is to plot the Moran scatterplot.

```{R}
nci <- moran.plot(nga_wp$`wpt non-functional`, rswm_q,
                  labels=as.character(nga_wp$shapeName), 
                  xlab="Non-Functional waterpoints", 
                  ylab="Spatially Lag Non-functional waterpoints")
```

**Outliers**: It is significant and negative if location i is associated with relatively low values in surrounding locations.\
**Cluster**: It is significant and positive if location i is associated with relatively high values of the surrounding locations.

The scatter plot is divided into 4 categories:

1.  **Lower Left Quadrant (Low-Low)**- these are **clusters** of low frequency of non functional spatial distribution of water points as against spatially lagged non functional points.
2.  **Lower right Quadrant (High-Low)-** these are the **outliers** where areas of high frequency of incidents where non functional water points occurred are located next to areas where there is low frequency of non functional water points in Nigeria occurred.
3.  **Upper Left Quadrant (Low-High)**- these are the **outliers** where low frequency of non functional water points occurred that are located next to areas where high frequency of non functional water points occured.
4.  **Upper right Quadrant (High-High)-** these are the **clusters where** indicates high spatial correlation where non functional water points areas are clustered closely together.

## Plotting Moran scatterplot with standardized variables

First, using ***scale()*** to centers and scales the variable. Here centering is done by subtracting the mean (omitting NAs) the corresponding columns, and scaling is done by dividing the (centered) variable by their standard deviations.

The ***as.vector()*** added to the end is to make sure that the data type we get out of this is a vector, that map neatly into out dataframe.

```{R}
nga_wp$Z.nonfunc <- scale(nga_wp$`wpt non-functional`) %>% 
  as.vector 
nci2 <- moran.plot(nga_wp$Z.nonfunc, rswm_q,
                   labels=as.character(nga_wp$shapeName),
                   xlab="z-no functional points", 
                   ylab="Spatially Lag non functional points")
```

**NOTE: One of the drawback of Moran's I scatterplot is that it does not indicate whether the above regions are significant or not.**

## Preparing LISA Map Classes (Non Functional)

```{R}
quadrant <- vector(mode="numeric",length=nrow(localMI))
nga_wp$lag_non_func_points <- lag.listw(rswm_q, nga_wp$`wpt non-functional`)
DV <- nga_wp$lag_non_func_points - mean(nga_wp$lag_non_func_points)     
C_mI <- localMI[,1] - mean(localMI[,1])    
signif <- 0.05       
quadrant[DV <0 & C_mI>0] <- 1
quadrant[DV >0 & C_mI<0] <- 2
quadrant[DV <0 & C_mI<0] <- 3  
quadrant[DV >0 & C_mI>0] <- 4      
quadrant[localMI[,5]>signif] <- 0

quadrant_func <- vector(mode="numeric",length=nrow(localMI_func))
nga_wp$lag_func_points <- lag.listw(rswm_q, nga_wp$`wpt functional`)
DV_func <- nga_wp$lag_func_points - mean(nga_wp$lag_func_points)     
C_mI_func <- localMI[,1] - mean(localMI[,1])    
signif <- 0.05       
quadrant[DV_func <0 & C_mI_func>0] <- 1
quadrant[DV_func >0 & C_mI_func<0] <- 2
quadrant[DV_func <0 & C_mI_func<0] <- 3  
quadrant[DV_func >0 & C_mI_func>0] <- 4      
quadrant[localMI[,5]>signif] <- 0
```

For each country/administrative region, LISA classification of the scores are assigned as follows:

-   If DV \> 0 & C_mI \> 0; it is categorised as "High-High" \[4\]

-   If DV \< 0 & C_mI \< 0; it is categorised as "Low-Low" \[3\]

-   If DV \< 0 & C_mI \> 0; it is categorised as "Low-High" \[1\]

-   If DV \> 0 & C_mI \< 0; it is categorised as "High-Low" \[2\]

## Plotting LISA Map (Non Functional)

```{R}
nga_wp.localMI$quadrant <- quadrant
colors <- c("#ffffff", "#2c7bb6", "#abd9e9", "#fdae61", "#d7191c")
clusters <- c("insignificant", "low-low", "low-high", "high-low", "high-high")

tm_shape(nga_wp.localMI) +
  tm_fill(col = "quadrant", 
          style = "cat", 
          palette = colors[c(sort(unique(quadrant)))+1], 
          labels = clusters[c(sort(unique(quadrant)))+1],
          popup.vars = c("")) +
  tm_view(set.zoom.limits = c(11,17)) +
  tm_borders(alpha=0.5)
```

For effective interpretation, it is better to plot **both the wpt non functional map and its LISA classification** map next to each other.

```{R}
nonfunc <- tm_shape(nga_wp)+
      tm_fill("wpt non-functional",
              style= "jenks",
              n=6,
              title= "wpt non functional")+
      tm_layout(main.title= "NonFunctional WaterPoints")+
      tm_borders(alpha=0.5)

nga_wp.localMI$quadrant <- quadrant
colors <- c("#ffffff", "#2c7bb6", "#abd9e9", "#fdae61", "#d7191c")
clusters <- c("insignificant", "low-low", "low-high", "high-low", "high-high")

LISAmap <- tm_shape(nga_wp.localMI) +
  tm_fill(col = "quadrant", 
          style = "cat", 
          palette = colors[c(sort(unique(quadrant)))+1], 
          labels = clusters[c(sort(unique(quadrant)))+1],
          popup.vars= c("")) +
  tm_view(set.zoom.limits = c(11,17)) +
  tm_borders(alpha=0.5)+
  tm_layout(main.title= "LISA map with classification")

tmap_arrange(nonfunc, LISAmap, 
             asp=1, ncol=2)
```

### Observation

It can be observed that regions with more than 100 non functional water points are clustered regions with relatively high values of the surrounding regions as observed from the LISA classification map. All the high-high values are the **clusters where** indicates high spatial correlation where non functional water points areas are clustered closely together. "Dark Blue", low low regions are the clusters of low frequency of non functional spatial distribution of water points.

## Plotting LISA Map (Functional)

```{R}
func <- tm_shape(nga_wp)+
      tm_fill("wpt functional",
              style= "jenks",
              n=6,
              title= "wpt functional")+
      tm_layout(main.title= "Functional WaterPoints")+
      tm_borders(alpha=0.5)

nga_wp.localMI_func$quadrant_func <- quadrant
colors <- c("#ffffff", "#2c7bb6", "#abd9e9", "#fdae61", "#d7191c")
clusters <- c("insignificant", "low-low", "low-high", "high-low", "high-high")

LISAmap_func <- tm_shape(nga_wp.localMI_func) +
  tm_fill(col = "quadrant_func", 
          style = "cat", 
          palette = colors[c(sort(unique(quadrant)))+1], 
          labels = clusters[c(sort(unique(quadrant)))+1],
          popup.vars= c("")) +
  tm_view(set.zoom.limits = c(11,17)) +
  tm_borders(alpha=0.5)+
  tm_layout(main.title= "LISA map with classification")

tmap_arrange(func, LISAmap_func, 
             asp=1, ncol=2)
```

**Observations**: All the high-high values are the **clusters where** indicates high spatial correlation where functional water points areas are clustered closely together. "Dark Blue", low low regions are the clusters of low frequency of functional spatial distribution of water points.

# Hot spot and Cold spot Area Analysis

Beside detecting cluster and outliers, localised spatial statistics can be also used to detect hot spot and/or cold spot areas.

**"Hot Spot" is used to describe a region or value that is higher relative to its surroundings.**

## Getis and Ord's G-Statistics

It is an alternative spatial statistics to detect spatial anomalies, looking at neighbors within a defined proximity to identify where either high or low values clutser spatially. Statistically significant **hot-spots** are recognised as areas of high values where other areas within a neighbourhood range also share high values too. The analysis consists of three steps:

-   Deriving spatial weight matrix

-   Computing Gi statistics

-   Mapping Gi statistics

## Deriving Distance-based weight matrix

First, defining a new set of neighbors. Whist the spatial autocorrelation considered units which shared borders, for Getis-Ord we are defining neighbours based on distance.

There are two type of distance-based proximity matrix, they are:

-   fixed distance weight matrix; and

-   adaptive distance weight matrix.

**Deriving the centroid**

Coordinates in separate dataframe is required. The mapping function applies a given function to each element of a vector and returns a vector of the same length. Our input vector will be the geometry column of us.bound. Our function will be *st_centroid()*. We will be using map_dbl variation of map from the purrr package.

Calculation longitude, first value in each centroid; latitude, second value in each centroid; and then combining both longitude and latitude using the code chunk below.

```{R}
longitude <- map_dbl(nga_wp$geometry, ~st_centroid(.x)[[1]])
latitude <- map_dbl(nga_wp$geometry, ~st_centroid(.x)[[2]])
coords <- cbind(longitude, latitude)
```

### Determine the cut-off distance

Upper limit for the distance is calculated using the following steps:

-   Return a matrix with the indices of points belonging to the set of the k nearest neighbours of each other by using ***knearneigh()*** of **spdep**.

-   Convert the knn object returned by *knearneigh()* into a neighbours list of class nb with a list of integer vectors containing neighbour region number ids by using ***knn2nb()***

-   Return the length of neighbour relationship edges by using ***nbdists()*** of **spdep**. The function returns in the units of the coordinates if the coordinates are projected, in km otherwise.

-   Remove the list structure of the returned object by using ***unlist()***

```{R}
k1 <- knn2nb(knearneigh(coords))
k1dists <- unlist(nbdists(k1, coords, longlat = TRUE))
summary(k1dists)
```

The summary report shows that the largest first nearest neighbour distance is 71.66 km, so using this as the upper threshold gives certainty that all units will have at least one neighbour.

### Computing fixed distance weight matrix

Using ***dnearneigh(),*** distance weight matrix is computed as shown in the code chunk below.

The functions ***dnearneigh()*** identifies neighbours of region points by Euclidean distance in the metric of the points between lower (greater than or equal to (changed from version 1.1-7)) and upper (less than or equal to) bounds, or with longlat = TRUE, by Great Circle distance in kilometers.

```{R}
wm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)
wm_d62
```

Next, using ***nb2listw()*** nb objects are converted into spatial weight objects.

```{R}
wm62_lw <- nb2listw(wm_d62, style = 'B')
summary(wm62_lw)
```

From the **summary report** it can be observed that there are on an average 17 neighbors of each regions under Binary Weight style. There are 6 regions with no neighbors. There are 12 regions which are least connected. 619th region has the most number of neighbors, 57 links.

### **  **Computing Adaptive distance based matrix

More densely settled areas (usually the urban areas) tend to have more neighbors and the less densely settled areas (usually the rural counties) tend to have lesser neighbors.

It is possible to control the numbers of neighbors directly using k-nearest neighbors, either accepting asymmetric neighbors or imposing symmetry as shown in the code chunk below.

```{R}
knn <- knn2nb(knearneigh(coords, k=8))
knn
```

From the above summary report, the neighbor list is converted into non symmetric format with average of 8 neighbor links for each region.

Next, ***nb2listw()*** is used to convert the nb object into spatial weights object.

```{R}
knn_lw <- nb2listw(knn, style = 'B')
summary(knn_lw)
```

Style B is the basic binary code. Using this style there are average of 8 neighbor links to each region.

# Computing Gi Statistics

Given a set of geospatial features (i.e. points or polygons) and an analysis field, the spatial statistics tell you where features with either high (i.e. hot spots) or low values (cold spots) cluster spatially. The spatial statistic used is called **Getis-Ord Gi statistic.**

Interpretation of Getis-Ord Gi and Gi:

**A hot spot area**: significant and positive if location i is associated with relatively high values of the surrounding locations.\
**A cold spot are**a: significant and negative if location i is associated with relatively low values in surrounding locations.

## Gi statistics using fixed distance

```{R}
fips <- order(nga_wp$shapeName)
gi.fixed <- localG(nga_wp$`wpt non-functional`, wm62_lw)
gi.fixed
```

The output of localG() is a vector of G or Gstar values, with attributes "gstari" set to TRUE or FALSE, "call" set to the function call, and class "localG".

The Gi statistics is represented as a Z-score. Greater values represent a greater intensity of clustering and the direction (positive or negative) indicates high or low clusters.

Joining the Gi values to their corresponding nga_wp sf data frame:

```{R}
nga_wp.gi <- cbind(nga_wp, as.matrix(gi.fixed)) %>%
  rename(gstat_fixed = as.matrix.gi.fixed.)
```

Following steps were followed in the above code chunk:

-   First, it convert the output vector (i.e.Â gi.fixed) into r matrix object by using as.matrix()

-   Next, cbind() is used to join nga_wp\@data and gi.fixed matrix to produce a new SpatialPolygonDataFrame called nga_wp.gi.

-   Lastly, the field name of the gi values is renamed to gstat_fixed by using rename().

## Mapping Gi values with fixed distance weights

The code chunk below shows the functions used to map the Gi values derived using fixed distance weight matrix.

```{R}
nonfunc <- qtm(nga_wp, "wpt non-functional")

Gimap <-tm_shape(nga_wp.gi) +
  tm_fill(col = "gstat_fixed", 
          style = "pretty",
          palette="-RdBu",
          title = "local Gi") +
  tm_borders(alpha = 0.5)

tmap_arrange(nonfunc, Gimap, asp=1, ncol=2)
```

**Observations\
** It can be observed from wpt non functional map that city "Ifelodun" has the highest non functional spatial distribution of water points. According to local Gi map, when Gi statistics fixed distance weight method was used for calculation in which all the features should have atleast one neighbor, then hot spot region with maximum non functional water points is "Moba" as it is significant and positive with relatively high values of the surrounding locations.

## Gi statistics using adaptive distance

The code chunk below are used to compute the Gi values for wpt non functional water point areas by using an adaptive distance weight matrix ***(i.e knb_lw)*****.**

```{R}
fips <- order(nga_wp$shapeName)
gi.adaptive <- localG(nga_wp$`wpt non-functional`, knn_lw)
nga_wp.gi <- cbind(nga_wp, as.matrix(gi.adaptive)) %>%
  rename(gstat_adaptive = as.matrix.gi.adaptive.)
```

## Mapping Gi values with the adaptive distance weights

In adaptive distance weights, weights adjusts itself according to the density of the data. Shorter bandwidths where data is dense and Longer bandwidths where data is sparse.

Using, choropleth mapping functions of **tmap** package location of hot spot and cold spot areas are visualized.

The code chunk below shows the functions used to map the Gi values derived using fixed distance weight matrix.

```{R}
nonfunc <- qtm(nga_wp, "wpt non-functional")

Gimap <- tm_shape(nga_wp.gi) + 
  tm_fill(col = "gstat_adaptive", 
          style = "pretty", 
          palette="-RdBu", 
          title = "local Gi") + 
  tm_borders(alpha = 0.5)

tmap_arrange(nonfunc, 
             Gimap, 
             asp=1, 
             ncol=2)
```

### **Observations**

It can be observed from wpt non functional map that city "Ifelodun" has the highest non functional spatial distribution of water points. According to local Gi map, when Gi statistics adaptive distance weight method was used for calculations, number of 'dark red' regions increased from 1. That means number of regions with hot spot non functional water points in Nigeria are more sparse.

# Conclusion

As the need for fresh water is a necessary for every country. Failure of water points in Nigeria contribute significantly as one of the factors that cannot be controlled in short or medium term. Water points in urban areas perform worse than those in rural areas. [This is likely due to urban overcrowding amid rapid increases in urban populations driven by rural-urban migration. The availability of pumps is likely to be much higher per capita in rural than in urban areas.](https://www.researchgate.net/publication/324091771_Why_Are_So_Many_Water_Points_in_Nigeria_Non-Functional_An_Empirical_Analysis_of_Contributing_Factors)

The geospatial analysis of functional and non functional spatial distribution of water points using Global and Local measures of Spatial Autocorrelation had computed great insights from the large data sets of Nigeria's geoboundaries and water points. The LISA analysis helped in getting the Hot spot and cold spot areas of non functional water points in Nigeria. Using Chloropleth mapping we found out the functional, non functional and unknown water point regions. Using Moran's I statistical test we concluded whether the regions were clustered or dispersed and observations tend to be similar or dissimilar. Using Thematic and Analytical Mapping spatial distribution of functional and non-functional water point rate at LGA level are analysed.

In this data set, we used row standardization parameter as this method is effective when polygons are similar in size and distribution, and when spatial relationships are a function of polygon proximity (the\
idea that if two polygons share a boundary, spatial interaction between them increases. Also for this data set to find hot spot and cold spot area analaysis, the inverse method is more appropriate as the data was continuous and model processes closer two features in the space that most likely influence each other.

# Acknowledgement

Sincerely thanks to Prof Kam, for all the Geospatial Analytics lecture notes and Hands on Exercise materials- taken reference from them, from data importing to data wrangling to Geospatial data visualisation.

## Resources Used

Below are the resources used for the analysis for this Take Home Exercise . Special thanks to prof who recommended Senior Sample submissions.

-   [Megan Sim Tze Yen, Analysing and Visualising Spatio-temporal Patterns of COVID-19 in DKI Jakarta, Indonesia](https://is415-msty.netlify.app/posts/2021-09-10-take-home-exercise-1/#conclusions)

-   [R Function List](https://statisticsglobe.com/r-functions-list/)

-   [Research Paper, Is there space for violence?: A data-driven approach to the exploration of spatial-temporal dimensions of conflict](https://ink.library.smu.edu.sg/cgi/viewcontent.cgi?article=5334&context=sis_research)

-   [Research Paper, Why Are So Many Water Points in Nigeria Non-Functional?](https://www.researchgate.net/publication/324091771_Why_Are_So_Many_Water_Points_in_Nigeria_Non-Functional_An_Empirical_Analysis_of_Contributing_Factors)

## 
