---
title: "Hand On Exercise 1: Geospatial Data Wrangling with R"
editor: visual
---

## Overview

In this hands-on exercise, I learn how to import and wrangle geospatial data using appropriate R packages.

## Getting Started

The code chunk below install and load sf and tidyverse packages into R environment.

```{r}
pacman::p_load(sf,tidyverse)
```

### Import Geospatial Data

#### Importing polygon feature data

```{r}

mpsz= st_read(dsn= "data/geospatial/", layer = "MP14_SUBZONE_WEB_PL")
```

```{r}
cyclingpath = st_read(dsn = "data/geospatial/", 
                         layer = "CyclingPath")
```

#### Importing GIS data in kml format

```{r}
preschool = st_read("data/geospatial/pre-schools-location-kml.kml")
```

### Checking the content of simple feature data frame

Retrieve information related to the content of a simple feature data frame.

#### st_geometry()

```{r}
st_geometry(mpsz)
```

#### glimpse()

```{r}
glimpse(mpsz)
```

#### head()

```{r}
head(mpsz, n=5)  
```

### Plotting the Geospatial Data

In this section, we will cover interesting visual of geospatial features.

##### Normal(Default) View:

```{r}
plot(mpsz)
```

##### Only geometry view:

```{R}
plot(st_geometry(mpsz))
```

##### Specific attribute view:

```{r}
plot(mpsz["PLN_AREA_N"])
```

### Working with projections

Map projections is important property of geospatial data. We must ensure both geospatial data should be in similar coordinate system.

**Project Transformation:** Project a simple feature data frame from one coordinate system to another coordinate system.

#### Assigning EPSG code to a simple feature data frame

```{r}
st_crs(mpsz)
```

We can observe, `mpsz` data frame is projected in svy21 but when we read until the end of the print, it indicates that the EPSG is 9001. This is a wrong EPSG code because the correct EPSG code for svy21 should be \[3414\].

In order to assign the correct EPSG code to `mpsz` data frame:

```{r}
mpsz3414 <- st_set_crs(mpsz, 3414)
st_crs(mpsz3414)

```

Now the error has been rectified.

#### Transforming the projection of preschool from wgs84 to svy21.

Transform the original data from geographic coordinate system to projected coordinate system

Transforming preschool data from one coordinate system to another:

```{r}
st_geometry(preschool) ##Original WGS84
preschool3414 <- st_transform(preschool, 
                              crs = 3414)
st_geometry(preschool3414) #Transformed SVY21
```

### Importing and Converting An Aspatial Data

In this section, we will learn, how to import an aspatial data into R environment and save it as a tibble data frame.

#### Importing the aspatial data

##We will assume that the data is in wgs84 Geographic Coordinate System.

```{r}
listings <- read_csv("data/aspatial/listings.csv")
```

```{r}
list(listings) 
```

#### Creating a simple feature data frame from an aspatial data frame

```{r}
listings_sf <- st_as_sf(listings, 
                       coords = c("longitude", "latitude"),
                       crs=4326) %>%
  st_transform(crs = 3414)
glimpse(listings_sf)
```

New column called `geometry` has been added into the data frame. On the other hand, the `longitude` and `latitude` columns have been dropped from the data frame.

### Geoprocessing with sf package

Apart from handling functions, **sf** package also offers a wide range of geoprocessing (also known as GIS analysis) functions.

#### Buffering

#### 

The scenario:

The authority is planning to upgrade the exiting cycling path. To do so, they need to acquire 5 metres of reserved land on the both sides of the current cycling path. You are tasked to determine the extend of the land need to be acquired and their total area.

The solution:

First, 5-meter buffers around cycling paths are computed.

```{r}
buffer_cycling <- st_buffer(cyclingpath, 
                               dist=5, nQuadSegs = 30)
```

Second, calculate the area of the buffer:

```{r}
buffer_cycling$AREA <- st_area(buffer_cycling)
```

Thirdly, total land involved is calculated:

```{r}
sum(buffer_cycling$AREA)
```

**Successful!**

#### Point-in-polygon count

The scenario:

A pre-school service group want to find out the numbers of pre-schools in each Planning Subzone.

The solution:

Firstly, using **st_intersects()**, pre school located at each Planning Subzone is identified.

Secondly, using **length()**,numbers of pre-schools that fall inside each planning subzone is calculated.

```{r}
mpsz3414$`PreSch Count`<- lengths(st_intersects(mpsz3414, preschool3414))
```

Summary statistics:

```{r}
summary(mpsz3414$`PreSch Count`)
```

To list the planning subzone with the most number of pre-school:

```{r}
top_n(mpsz3414, 1, `PreSch Count`)
```

**Ques:Calculate the density of pre-school by planning subzone.** **Solution:**

To derive the area of each planning subzone:

```{R}
mpsz3414$Area <- mpsz3414 %>%
  st_area()
```

Compute the density :

```{r}
mpsz3414 <- mpsz3414 %>%
  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)
```

### Explorotary Data Analysis (EDA)

In this section, wewill learn how to use appropriate [ggplot2](https://ggplot2.tidyverse.org/) functions to create functional and yet truthful statistical graphs for EDA purposes.

1.  **HISTOGRAM**

```{R}
  hist(mpsz3414$`PreSch Density`)
```

**USING ggplot2**

```{r}
ggplot(data=mpsz3414, 
       aes(x= as.numeric(`PreSch Density`)))+
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue") +
  labs(title = "Are pre-school even distributed in Singapore?",
       subtitle= "There are many planning sub-zones with a single pre-school, on the other hand, \nthere are two planning sub-zones with at least 20 pre-schools",
      x = "Pre-school density (per km sq)",
      y = "Frequency")
```

**SCATTER PLOT**

**Relationship between Pre-school Density and Pre-school Count:**

```{r}
ggplot(data=mpsz3414,aes(x= as.numeric(`PreSch Density`), y=as.numeric(`PreSch Count`)))+
        geom_point()+labs(x= "Pre-Scool density(per km sq)",y="Pre-school Count")
```
