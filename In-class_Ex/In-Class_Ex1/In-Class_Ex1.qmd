---
title: "Spatial Weights and Applications"
editor: visual
---

# Overview

In this In-Class Ex1 , we will learn how to compute spatial weights using R. Following will be the learning at the end of this module:

-   Importing spatial and csv file data: **sf** and **readr** package

-   Relational join : **dplyr** package

-   Spatial weight computation: **spdep** package

-   Calculation of spatially lagged variables: **spdep** package

# Getting Started

The code chunk below will install and load tidyverse and sf packages.

```{r}
pacman::p_load(sf,tidyverse,spdep,tmap)
```

# Getting the data into R environment

Importing polygon features

This code chunk will import ESRI shapefile into R.

## Importing Hunan Data

```{r}
hunan = st_read(dsn="data/geospatial/", 
                layer="Hunan")
```

## Importing data attribute in csv

```{r}
hunan2012= read_csv("data/aspatial/Hunan_2012.csv")
```

## Perform relational join

Update the attribute table of *hunan*'s SpatialPolygonsDataFrame with the attribute fields of *hunan2012* dataframe

```{r}
hunan <- left_join(hunan,hunan2012)
```

# Visualizing Regional Development Indicator

Preparation of basemap and choropleth map showing the distribution of GDPPC 2012.

Using, qtm() of **tmap** package.

```{r}
basemap <- tm_shape(hunan) +
  tm_polygons() +
  tm_text("NAME_3", size=0.5)

gdppc <- qtm(hunan, "GDPPC")
tmap_arrange(basemap, gdppc, asp=1, ncol=2)
```

# Computing Contiguity Spatial Weights

In this section, Computing Contiguity Spatial Weights are computed using [*poly2nb()*](https://r-spatial.github.io/spdep/reference/poly2nb.html) of **spdep** package. This function builds a neighbours list based on regions with contiguous boundaries. "Queen" arguement is passed that takes TRUE and FALSE as options.

**Default is set to TRUE, that is, if you don't specify queen = FALSE this function will return a list of first order neighbours using the Queen criteria.**

## Computing (QUEEN) contiguity based neighbours

Queen contiguity weight matrix:

```{r}
wm_q <- poly2nb(hunan, queen=TRUE)
summary(wm_q)
```

The summary report is as follow:

-   Number of regions: 88 area units

-   There is only 1 region with maximum number neighbors, 11 links

-   There are 2 regions with minimum number of neighbors, 1 link.

For each polygon in our polygon object, *wm_q* lists all neighboring polygons:

```{r}
wm_q[[1]]
```

Above code chunk indicates polygon 1 has 5 neighbors. TO get the name of country that depicts polygon 1 following code chunk is used:

```{R}
hunan$County[1]
```

To reveal the neighbors of "Anxiang", following code chunk is used:

```{r}
hunan$NAME_3[c(2,3,4,57,85)]
```

GDPPC for the above 5 countries can be retrieved using following code chunk:

```{r}
nb1 <- wm_q[[1]]
nb1 <- hunan$GDPPC[nb1]
nb1
```

To get the complete weight matrix, **str()** function is used:

```{r}
str(wm_q,11)
```

## Computing (ROOK) contiguity based neighbors

Rook contiguity weight matrix:

```{r}
wm_r <- poly2nb(hunan, queen=FALSE)
summary(wm_r)
```

Summary of the above Report:

Total 88 area units in Hunan. The most connected unit has 10 neighbors and the least connected units,2 units, have 1 neighbor.

## Visualizing Contiguity Weights

A **connectivity graph** takes a point and displays a line to each neighboring point. As we are working with the polygons , therefore we need points to plot the connectivity graph. The most typical method to compute points are by taking polygon centroid.

We will calculate these in the sf package before moving onto the graphs. Getting Latitude and Longitude of Polygon Centroids.

st_centroid on the sf object is little more complicated, therefore, mapping funtion will be used. The **mapping function** applies a given function to each element of a vector and returns a vector of the same length. Longitude value can be accessed through double bracket notation \[\[\]\] and 1. This allows us to get only the longitude, which is the first value in each centroid.

```{R}
longitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])
```

For latitude, only difference is that we access the second value per each centroid with \[\[2\]\].

```{r}
latitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])
```

Putting latitude and longitude in the same object:

```{r}
coords <- cbind(longitude, latitude)
```

We can check first few observations using head():

```{r}
head(coords)
```

### Plotting Queen contiguity based neighbors map

```{R}
plot(hunan$geometry, border="lightgrey")
plot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= "red")
```

### Plotting Rook contiguity based neighbors map

```{r}
plot(hunan$geometry, border="lightgrey")
plot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
```

### Plotting both Rook and Queen contiguity based neighbor map together:

```{r}
par(mfrow=c(1,2))
plot(hunan$geometry, border="lightgrey")
plot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= "red", main="Queen Contiguity")
plot(hunan$geometry, border="lightgrey")
plot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = "red", main="Rook Contiguity")
```

## Computing distance based neighbors

In this section, distance weight matrix is computed using **dnearneigh()** of **spdep** package of R.

The function identifies neighbours of region points by Euclidean distance with a distance band with lower d1= and upper d2= bounds controlled by the bounds= argument. If unprojected coordinates are used and either specified in the coordinates object x or with x as a two column matrix and longlat=TRUE, great circle distances in **km** will be calculated assuming the WGS84 reference ellipsoid.

### Determine the cut-off distance

Upper limit of distance is calculated using the following steps:

1.  Using [*knearneigh()*](https://r-spatial.github.io/spdep/reference/knearneigh.html) of **spdep**, matrix is returned by indices of points belonging to the set of the k nearest neighbours of each other.

2.  The returned objected is converted into a neighbours list of class nb with a list of integer vectors containing neighbour region number ids by using [*knn2nb()*](https://r-spatial.github.io/spdep/reference/knn2nb.html).

3.  Return the length of neighbour relationship edges by using [*nbdists()*](https://r-spatial.github.io/spdep/reference/nbdists.html) of **spdep**. The function returns in the units of the coordinates if the coordinates are projected, in km otherwise.

4.  Remove the list structure of the returned object by using [**unlist()**](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/unlist).

```{r}
#coords <- coordinates(hunan)
k1 <- knn2nb(knearneigh(coords))
k1dists <- unlist(nbdists(k1, coords, longlat = TRUE))
summary(k1dists)
```

According to summary report, maximum first neighbor distance is 61.79Km, therefore this is used as upper threshold giving certainty that all the units will have at least on neighbor.

### Computing fixed distance weight matrix

Fixed distance weight matrix is used using ***dnearneigh().***

```{r}
wm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)
wm_d62
```

According to summary report, on an average each region has \~3.6 neighbors. As neighbors cant be in decimal place. Therefore, it can be concluded that neighbors are between 3 and 4 for each unit.

Next, we will use ***str()*** to display the content of **wm_d62** weight matrix.

```{r}
str(wm_d62)
```

Another way to display the structure of the weight matrix is to combine table(). and card() of spdep.

```{r}
table(hunan$County, card(wm_d62))
```

```{r}
n_comp <- n.comp.nb(wm_d62)
n_comp$nc
```

```{r}
table(n_comp$comp.id)
```

#### Plotting fixed distance weight matrix

```{r}
plot(hunan$geometry, border="lightgrey")
plot(wm_d62, coords, add=TRUE)
plot(k1, coords, add=TRUE, col="red", length=0.08)
```

The red lines show the links of 1st nearest neighbours and the black lines show the links of neighbours within the cut-off distance of 62km.

Alternatively,

```{R}
par(mfrow=c(1,2))
plot(hunan$geometry, border="lightgrey")
plot(k1, coords, add=TRUE, col="red", length=0.08, main="1st nearest neighbours")
plot(hunan$geometry, border="lightgrey")
plot(wm_d62, coords, add=TRUE, pch = 19, cex = 0.6, main="Distance link")
```

### Computing adaptive distance weight matrix

According to distance weight matrix, urban areas(densely populated) have more neighbors as compared to rural areas(less populated areas) of the country. Having many neighbours smoothes the neighbour relationship across more neighbours.

One of the ways to control neighbors is by using k-nearest neighbours, either accepting asymmetric neighbours or imposing symmetry as shown in the code chunk below.

```{r}
knn6 <- knn2nb(knearneigh(coords, k=6))
knn6
```

Similarly, we can display the content of the matrix by using *str()*.

```{r}
str(knn6)
```

**Notice that each county has six neighbours, no less no more!**

#### Plotting the distance based neighbors

```{r}
plot(hunan$geometry, border="lightgrey")
plot(knn6, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
```

## Weight based on IDW

In this section, spatial weight matrix is derived using Inverse distance method.

Distance between the areas will be computed using nbdists() of spdep.

```{R}
dist <- nbdists(wm_q, coords, longlat = TRUE)
ids <- lapply(dist, function(x) 1/(x))
ids
```

### Row-Standardized wight matrix

Each neighboring polygon will assigned equal weights(style="W"). This is accomplished by assigning the fraction 1/(#ofneighbors) to each neighboring county then summing the weighted income values.

Drawback: Polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data.More robust style options are available, notably style="B".

```{r}
rswm_q <- nb2listw(wm_q, style="W", zero.policy = TRUE)
rswm_q
```

**The zero.policy=TRUE option allows for lists of non-neighbors.**

```{r}
rswm_q$weights[10]
```

Each neighbor is assigned a 0.2 of the total weight. This means that when R computes the average neighboring income values, each neighbor's income will be multiplied by 0.2 before being tallied.

Row standardised distance weight matrix :

```{R}
rswm_ids <- nb2listw(wm_q, glist=ids, style="B", zero.policy=TRUE)
rswm_ids
```

```{r}
rswm_ids$weights[1]
```
```{r}
summary(unlist(rswm_ids$weights))
```